{"version":3,"sources":["../node_modules/howler/dist/howler.js"],"names":["HowlerGlobal","this","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","indexOf","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","exports","global","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"static/js/3.c3ecfeaf.chunk.js","sourcesContent":["/*!\r\n *  howler.js v2.2.0\r\n *  howlerjs.com\r\n *\r\n *  (c) 2013-2020, James Simpson of GoldFire Studios\r\n *  goldfirestudios.com\r\n *\r\n *  MIT License\r\n */\r\n\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  /** Global Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Create the global controller. All contained methods and properties apply\r\n   * to all sounds that are currently playing or will be in the future.\r\n   */\r\n  var HowlerGlobal = function() {\r\n    this.init();\r\n  };\r\n  HowlerGlobal.prototype = {\r\n    /**\r\n     * Initialize the global Howler object.\r\n     * @return {Howler}\r\n     */\r\n    init: function() {\r\n      var self = this || Howler;\r\n\r\n      // Create a global ID counter.\r\n      self._counter = 1000;\r\n\r\n      // Pool of unlocked HTML5 Audio objects.\r\n      self._html5AudioPool = [];\r\n      self.html5PoolSize = 10;\r\n\r\n      // Internal properties.\r\n      self._codecs = {};\r\n      self._howls = [];\r\n      self._muted = false;\r\n      self._volume = 1;\r\n      self._canPlayEvent = 'canplaythrough';\r\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\r\n\r\n      // Public properties.\r\n      self.masterGain = null;\r\n      self.noAudio = false;\r\n      self.usingWebAudio = true;\r\n      self.autoSuspend = true;\r\n      self.ctx = null;\r\n\r\n      // Set to false to disable the auto audio unlocker.\r\n      self.autoUnlock = true;\r\n\r\n      // Setup the various state values for global tracking.\r\n      self._setup();\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the global volume for all sounds.\r\n     * @param  {Float} vol Volume from 0.0 to 1.0.\r\n     * @return {Howler/Float}     Returns self or current volume.\r\n     */\r\n    volume: function(vol) {\r\n      var self = this || Howler;\r\n      vol = parseFloat(vol);\r\n\r\n      // If we don't have an AudioContext created yet, run the setup.\r\n      if (!self.ctx) {\r\n        setupAudioContext();\r\n      }\r\n\r\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\r\n        self._volume = vol;\r\n\r\n        // Don't update any of the nodes if we are muted.\r\n        if (self._muted) {\r\n          return self;\r\n        }\r\n\r\n        // When using Web Audio, we just need to adjust the master gain.\r\n        if (self.usingWebAudio) {\r\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\r\n        }\r\n\r\n        // Loop through and change volume for all HTML5 audio nodes.\r\n        for (var i=0; i<self._howls.length; i++) {\r\n          if (!self._howls[i]._webAudio) {\r\n            // Get all of the sounds in this Howl group.\r\n            var ids = self._howls[i]._getSoundIds();\r\n\r\n            // Loop through all sounds and change the volumes.\r\n            for (var j=0; j<ids.length; j++) {\r\n              var sound = self._howls[i]._soundById(ids[j]);\r\n\r\n              if (sound && sound._node) {\r\n                sound._node.volume = sound._volume * vol;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return self;\r\n      }\r\n\r\n      return self._volume;\r\n    },\r\n\r\n    /**\r\n     * Handle muting and unmuting globally.\r\n     * @param  {Boolean} muted Is muted or not.\r\n     */\r\n    mute: function(muted) {\r\n      var self = this || Howler;\r\n\r\n      // If we don't have an AudioContext created yet, run the setup.\r\n      if (!self.ctx) {\r\n        setupAudioContext();\r\n      }\r\n\r\n      self._muted = muted;\r\n\r\n      // With Web Audio, we just need to mute the master gain.\r\n      if (self.usingWebAudio) {\r\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\r\n      }\r\n\r\n      // Loop through and mute all HTML5 Audio nodes.\r\n      for (var i=0; i<self._howls.length; i++) {\r\n        if (!self._howls[i]._webAudio) {\r\n          // Get all of the sounds in this Howl group.\r\n          var ids = self._howls[i]._getSoundIds();\r\n\r\n          // Loop through all sounds and mark the audio node as muted.\r\n          for (var j=0; j<ids.length; j++) {\r\n            var sound = self._howls[i]._soundById(ids[j]);\r\n\r\n            if (sound && sound._node) {\r\n              sound._node.muted = (muted) ? true : sound._muted;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Handle stopping all sounds globally.\r\n     */\r\n    stop: function() {\r\n      var self = this || Howler;\r\n\r\n      // Loop through all Howls and stop them.\r\n      for (var i=0; i<self._howls.length; i++) {\r\n        self._howls[i].stop();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Unload and destroy all currently loaded Howl objects.\r\n     * @return {Howler}\r\n     */\r\n    unload: function() {\r\n      var self = this || Howler;\r\n\r\n      for (var i=self._howls.length-1; i>=0; i--) {\r\n        self._howls[i].unload();\r\n      }\r\n\r\n      // Create a new AudioContext to make sure it is fully reset.\r\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\r\n        self.ctx.close();\r\n        self.ctx = null;\r\n        setupAudioContext();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Check for codec support of specific extension.\r\n     * @param  {String} ext Audio file extention.\r\n     * @return {Boolean}\r\n     */\r\n    codecs: function(ext) {\r\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\r\n    },\r\n\r\n    /**\r\n     * Setup various state values for global tracking.\r\n     * @return {Howler}\r\n     */\r\n    _setup: function() {\r\n      var self = this || Howler;\r\n\r\n      // Keeps track of the suspend/resume state of the AudioContext.\r\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\r\n\r\n      // Automatically begin the 30-second suspend process\r\n      self._autoSuspend();\r\n\r\n      // Check if audio is available.\r\n      if (!self.usingWebAudio) {\r\n        // No audio is available on this system if noAudio is set to true.\r\n        if (typeof Audio !== 'undefined') {\r\n          try {\r\n            var test = new Audio();\r\n\r\n            // Check if the canplaythrough event is available.\r\n            if (typeof test.oncanplaythrough === 'undefined') {\r\n              self._canPlayEvent = 'canplay';\r\n            }\r\n          } catch(e) {\r\n            self.noAudio = true;\r\n          }\r\n        } else {\r\n          self.noAudio = true;\r\n        }\r\n      }\r\n\r\n      // Test to make sure audio isn't disabled in Internet Explorer.\r\n      try {\r\n        var test = new Audio();\r\n        if (test.muted) {\r\n          self.noAudio = true;\r\n        }\r\n      } catch (e) {}\r\n\r\n      // Check for supported codecs.\r\n      if (!self.noAudio) {\r\n        self._setupCodecs();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Check for browser support for various codecs and cache the results.\r\n     * @return {Howler}\r\n     */\r\n    _setupCodecs: function() {\r\n      var self = this || Howler;\r\n      var audioTest = null;\r\n\r\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\r\n      try {\r\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\r\n      } catch (err) {\r\n        return self;\r\n      }\r\n\r\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\r\n        return self;\r\n      }\r\n\r\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\r\n\r\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\r\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\r\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\r\n\r\n      self._codecs = {\r\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\r\n        mpeg: !!mpegTest,\r\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\r\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\r\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\r\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\r\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\r\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\r\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\r\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\r\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\r\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\r\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\r\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\r\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\r\n      };\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Some browsers/devices will only allow audio to be played after a user interaction.\r\n     * Attempt to automatically unlock audio on the first user interaction.\r\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\r\n     * @return {Howler}\r\n     */\r\n    _unlockAudio: function() {\r\n      var self = this || Howler;\r\n\r\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\r\n      if (self._audioUnlocked || !self.ctx) {\r\n        return;\r\n      }\r\n\r\n      self._audioUnlocked = false;\r\n      self.autoUnlock = false;\r\n\r\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\r\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\r\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\r\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\r\n        self._mobileUnloaded = true;\r\n        self.unload();\r\n      }\r\n\r\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\r\n      // http://stackoverflow.com/questions/24119684\r\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\r\n\r\n      // Call this method on touch start to create and play a buffer,\r\n      // then check if the audio actually played to determine if\r\n      // audio has now been unlocked on iOS, Android, etc.\r\n      var unlock = function(e) {\r\n        // Create a pool of unlocked HTML5 Audio objects that can\r\n        // be used for playing sounds without user interaction. HTML5\r\n        // Audio objects must be individually unlocked, as opposed\r\n        // to the WebAudio API which only needs a single activation.\r\n        // This must occur before WebAudio setup or the source.onended\r\n        // event will not fire.\r\n        while (self._html5AudioPool.length < self.html5PoolSize) {\r\n          try {\r\n            var audioNode = new Audio();\r\n\r\n            // Mark this Audio object as unlocked to ensure it can get returned\r\n            // to the unlocked pool when released.\r\n            audioNode._unlocked = true;\r\n\r\n            // Add the audio node to the pool.\r\n            self._releaseHtml5Audio(audioNode);\r\n          } catch (e) {\r\n            self.noAudio = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Loop through any assigned audio nodes and unlock them.\r\n        for (var i=0; i<self._howls.length; i++) {\r\n          if (!self._howls[i]._webAudio) {\r\n            // Get all of the sounds in this Howl group.\r\n            var ids = self._howls[i]._getSoundIds();\r\n\r\n            // Loop through all sounds and unlock the audio nodes.\r\n            for (var j=0; j<ids.length; j++) {\r\n              var sound = self._howls[i]._soundById(ids[j]);\r\n\r\n              if (sound && sound._node && !sound._node._unlocked) {\r\n                sound._node._unlocked = true;\r\n                sound._node.load();\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Fix Android can not play in suspend state.\r\n        self._autoResume();\r\n\r\n        // Create an empty buffer.\r\n        var source = self.ctx.createBufferSource();\r\n        source.buffer = self._scratchBuffer;\r\n        source.connect(self.ctx.destination);\r\n\r\n        // Play the empty buffer.\r\n        if (typeof source.start === 'undefined') {\r\n          source.noteOn(0);\r\n        } else {\r\n          source.start(0);\r\n        }\r\n\r\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\r\n        if (typeof self.ctx.resume === 'function') {\r\n          self.ctx.resume();\r\n        }\r\n\r\n        // Setup a timeout to check that we are unlocked on the next event loop.\r\n        source.onended = function() {\r\n          source.disconnect(0);\r\n\r\n          // Update the unlocked state and prevent this check from happening again.\r\n          self._audioUnlocked = true;\r\n\r\n          // Remove the touch start listener.\r\n          document.removeEventListener('touchstart', unlock, true);\r\n          document.removeEventListener('touchend', unlock, true);\r\n          document.removeEventListener('click', unlock, true);\r\n\r\n          // Let all sounds know that audio has been unlocked.\r\n          for (var i=0; i<self._howls.length; i++) {\r\n            self._howls[i]._emit('unlock');\r\n          }\r\n        };\r\n      };\r\n\r\n      // Setup a touch start listener to attempt an unlock in.\r\n      document.addEventListener('touchstart', unlock, true);\r\n      document.addEventListener('touchend', unlock, true);\r\n      document.addEventListener('click', unlock, true);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\r\n     * return a new Audio object and throw a warning.\r\n     * @return {Audio} HTML5 Audio object.\r\n     */\r\n    _obtainHtml5Audio: function() {\r\n      var self = this || Howler;\r\n\r\n      // Return the next object from the pool if one exists.\r\n      if (self._html5AudioPool.length) {\r\n        return self._html5AudioPool.pop();\r\n      }\r\n\r\n      //.Check if the audio is locked and throw a warning.\r\n      var testPlay = new Audio().play();\r\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\r\n        testPlay.catch(function() {\r\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\r\n        });\r\n      }\r\n\r\n      return new Audio();\r\n    },\r\n\r\n    /**\r\n     * Return an activated HTML5 Audio object to the pool.\r\n     * @return {Howler}\r\n     */\r\n    _releaseHtml5Audio: function(audio) {\r\n      var self = this || Howler;\r\n\r\n      // Don't add audio to the pool if we don't know if it has been unlocked.\r\n      if (audio._unlocked) {\r\n        self._html5AudioPool.push(audio);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\r\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\r\n     * @return {Howler}\r\n     */\r\n    _autoSuspend: function() {\r\n      var self = this;\r\n\r\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\r\n        return;\r\n      }\r\n\r\n      // Check if any sounds are playing.\r\n      for (var i=0; i<self._howls.length; i++) {\r\n        if (self._howls[i]._webAudio) {\r\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\r\n            if (!self._howls[i]._sounds[j]._paused) {\r\n              return self;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (self._suspendTimer) {\r\n        clearTimeout(self._suspendTimer);\r\n      }\r\n\r\n      // If no sound has played after 30 seconds, suspend the context.\r\n      self._suspendTimer = setTimeout(function() {\r\n        if (!self.autoSuspend) {\r\n          return;\r\n        }\r\n\r\n        self._suspendTimer = null;\r\n        self.state = 'suspending';\r\n\r\n        // Handle updating the state of the audio context after suspending.\r\n        var handleSuspension = function() {\r\n          self.state = 'suspended';\r\n\r\n          if (self._resumeAfterSuspend) {\r\n            delete self._resumeAfterSuspend;\r\n            self._autoResume();\r\n          }\r\n        };\r\n\r\n        // Either the state gets suspended or it is interrupted.\r\n        // Either way, we need to update the state to suspended.\r\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\r\n      }, 30000);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\r\n     * @return {Howler}\r\n     */\r\n    _autoResume: function() {\r\n      var self = this;\r\n\r\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\r\n        return;\r\n      }\r\n\r\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\r\n        clearTimeout(self._suspendTimer);\r\n        self._suspendTimer = null;\r\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\r\n        self.ctx.resume().then(function() {\r\n          self.state = 'running';\r\n\r\n          // Emit to all Howls that the audio has resumed.\r\n          for (var i=0; i<self._howls.length; i++) {\r\n            self._howls[i]._emit('resume');\r\n          }\r\n        });\r\n\r\n        if (self._suspendTimer) {\r\n          clearTimeout(self._suspendTimer);\r\n          self._suspendTimer = null;\r\n        }\r\n      } else if (self.state === 'suspending') {\r\n        self._resumeAfterSuspend = true;\r\n      }\r\n\r\n      return self;\r\n    }\r\n  };\r\n\r\n  // Setup the global audio controller.\r\n  var Howler = new HowlerGlobal();\r\n\r\n  /** Group Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Create an audio group controller.\r\n   * @param {Object} o Passed in properties for this group.\r\n   */\r\n  var Howl = function(o) {\r\n    var self = this;\r\n\r\n    // Throw an error if no source is provided.\r\n    if (!o.src || o.src.length === 0) {\r\n      console.error('An array of source files must be passed with any new Howl.');\r\n      return;\r\n    }\r\n\r\n    self.init(o);\r\n  };\r\n  Howl.prototype = {\r\n    /**\r\n     * Initialize a new Howl group object.\r\n     * @param  {Object} o Passed in properties for this group.\r\n     * @return {Howl}\r\n     */\r\n    init: function(o) {\r\n      var self = this;\r\n\r\n      // If we don't have an AudioContext created yet, run the setup.\r\n      if (!Howler.ctx) {\r\n        setupAudioContext();\r\n      }\r\n\r\n      // Setup user-defined default properties.\r\n      self._autoplay = o.autoplay || false;\r\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\r\n      self._html5 = o.html5 || false;\r\n      self._muted = o.mute || false;\r\n      self._loop = o.loop || false;\r\n      self._pool = o.pool || 5;\r\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\r\n      self._rate = o.rate || 1;\r\n      self._sprite = o.sprite || {};\r\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\r\n      self._volume = o.volume !== undefined ? o.volume : 1;\r\n      self._xhr = {\r\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\r\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\r\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\r\n      };\r\n\r\n      // Setup all other default properties.\r\n      self._duration = 0;\r\n      self._state = 'unloaded';\r\n      self._sounds = [];\r\n      self._endTimers = {};\r\n      self._queue = [];\r\n      self._playLock = false;\r\n\r\n      // Setup event listeners.\r\n      self._onend = o.onend ? [{fn: o.onend}] : [];\r\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\r\n      self._onload = o.onload ? [{fn: o.onload}] : [];\r\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\r\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\r\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\r\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\r\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\r\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\r\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\r\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\r\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\r\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\r\n      self._onresume = [];\r\n\r\n      // Web Audio or HTML5 Audio?\r\n      self._webAudio = Howler.usingWebAudio && !self._html5;\r\n\r\n      // Automatically try to enable audio.\r\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\r\n        Howler._unlockAudio();\r\n      }\r\n\r\n      // Keep track of this Howl group in the global controller.\r\n      Howler._howls.push(self);\r\n\r\n      // If they selected autoplay, add a play event to the load queue.\r\n      if (self._autoplay) {\r\n        self._queue.push({\r\n          event: 'play',\r\n          action: function() {\r\n            self.play();\r\n          }\r\n        });\r\n      }\r\n\r\n      // Load the source file unless otherwise specified.\r\n      if (self._preload && self._preload !== 'none') {\r\n        self.load();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Load the audio file.\r\n     * @return {Howler}\r\n     */\r\n    load: function() {\r\n      var self = this;\r\n      var url = null;\r\n\r\n      // If no audio is available, quit immediately.\r\n      if (Howler.noAudio) {\r\n        self._emit('loaderror', null, 'No audio support.');\r\n        return;\r\n      }\r\n\r\n      // Make sure our source is in an array.\r\n      if (typeof self._src === 'string') {\r\n        self._src = [self._src];\r\n      }\r\n\r\n      // Loop through the sources and pick the first one that is compatible.\r\n      for (var i=0; i<self._src.length; i++) {\r\n        var ext, str;\r\n\r\n        if (self._format && self._format[i]) {\r\n          // If an extension was specified, use that instead.\r\n          ext = self._format[i];\r\n        } else {\r\n          // Make sure the source is a string.\r\n          str = self._src[i];\r\n          if (typeof str !== 'string') {\r\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\r\n            continue;\r\n          }\r\n\r\n          // Extract the file extension from the URL or base64 data URI.\r\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\r\n          if (!ext) {\r\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\r\n          }\r\n\r\n          if (ext) {\r\n            ext = ext[1].toLowerCase();\r\n          }\r\n        }\r\n\r\n        // Log a warning if no extension was found.\r\n        if (!ext) {\r\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\r\n        }\r\n\r\n        // Check if this extension is available.\r\n        if (ext && Howler.codecs(ext)) {\r\n          url = self._src[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!url) {\r\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\r\n        return;\r\n      }\r\n\r\n      self._src = url;\r\n      self._state = 'loading';\r\n\r\n      // If the hosting page is HTTPS and the source isn't,\r\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\r\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\r\n        self._html5 = true;\r\n        self._webAudio = false;\r\n      }\r\n\r\n      // Create a new sound object and add it to the pool.\r\n      new Sound(self);\r\n\r\n      // Load and decode the audio data for playback.\r\n      if (self._webAudio) {\r\n        loadBuffer(self);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Play a sound or resume previous playback.\r\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\r\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\r\n     * @return {Number}          Sound ID.\r\n     */\r\n    play: function(sprite, internal) {\r\n      var self = this;\r\n      var id = null;\r\n\r\n      // Determine if a sprite, sound id or nothing was passed\r\n      if (typeof sprite === 'number') {\r\n        id = sprite;\r\n        sprite = null;\r\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\r\n        // If the passed sprite doesn't exist, do nothing.\r\n        return null;\r\n      } else if (typeof sprite === 'undefined') {\r\n        // Use the default sound sprite (plays the full audio length).\r\n        sprite = '__default';\r\n\r\n        // Check if there is a single paused sound that isn't ended.\r\n        // If there is, play that sound. If not, continue as usual.\r\n        if (!self._playLock) {\r\n          var num = 0;\r\n          for (var i=0; i<self._sounds.length; i++) {\r\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\r\n              num++;\r\n              id = self._sounds[i]._id;\r\n            }\r\n          }\r\n\r\n          if (num === 1) {\r\n            sprite = null;\r\n          } else {\r\n            id = null;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Get the selected node, or get one from the pool.\r\n      var sound = id ? self._soundById(id) : self._inactiveSound();\r\n\r\n      // If the sound doesn't exist, do nothing.\r\n      if (!sound) {\r\n        return null;\r\n      }\r\n\r\n      // Select the sprite definition.\r\n      if (id && !sprite) {\r\n        sprite = sound._sprite || '__default';\r\n      }\r\n\r\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\r\n      // We also need to wait to make sure we don't run into race conditions with\r\n      // the order of function calls.\r\n      if (self._state !== 'loaded') {\r\n        // Set the sprite value on this sound.\r\n        sound._sprite = sprite;\r\n\r\n        // Mark this sound as not ended in case another sound is played before this one loads.\r\n        sound._ended = false;\r\n\r\n        // Add the sound to the queue to be played on load.\r\n        var soundId = sound._id;\r\n        self._queue.push({\r\n          event: 'play',\r\n          action: function() {\r\n            self.play(soundId);\r\n          }\r\n        });\r\n\r\n        return soundId;\r\n      }\r\n\r\n      // Don't play the sound if an id was passed and it is already playing.\r\n      if (id && !sound._paused) {\r\n        // Trigger the play event, in order to keep iterating through queue.\r\n        if (!internal) {\r\n          self._loadQueue('play');\r\n        }\r\n\r\n        return sound._id;\r\n      }\r\n\r\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\r\n      if (self._webAudio) {\r\n        Howler._autoResume();\r\n      }\r\n\r\n      // Determine how long to play for and where to start playing.\r\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\r\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\r\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\r\n      var start = self._sprite[sprite][0] / 1000;\r\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\r\n      sound._sprite = sprite;\r\n\r\n      // Mark the sound as ended instantly so that this async playback\r\n      // doesn't get grabbed by another call to play while this one waits to start.\r\n      sound._ended = false;\r\n\r\n      // Update the parameters of the sound.\r\n      var setParams = function() {\r\n        sound._paused = false;\r\n        sound._seek = seek;\r\n        sound._start = start;\r\n        sound._stop = stop;\r\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\r\n      };\r\n\r\n      // End the sound instantly if seek is at the end.\r\n      if (seek >= stop) {\r\n        self._ended(sound);\r\n        return;\r\n      }\r\n\r\n      // Begin the actual playback.\r\n      var node = sound._node;\r\n      if (self._webAudio) {\r\n        // Fire this when the sound is ready to play to begin Web Audio playback.\r\n        var playWebAudio = function() {\r\n          self._playLock = false;\r\n          setParams();\r\n          self._refreshBuffer(sound);\r\n\r\n          // Setup the playback params.\r\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\r\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\r\n          sound._playStart = Howler.ctx.currentTime;\r\n\r\n          // Play the sound using the supported method.\r\n          if (typeof node.bufferSource.start === 'undefined') {\r\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\r\n          } else {\r\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\r\n          }\r\n\r\n          // Start a new timer if none is present.\r\n          if (timeout !== Infinity) {\r\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\r\n          }\r\n\r\n          if (!internal) {\r\n            setTimeout(function() {\r\n              self._emit('play', sound._id);\r\n              self._loadQueue();\r\n            }, 0);\r\n          }\r\n        };\r\n\r\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\r\n          playWebAudio();\r\n        } else {\r\n          self._playLock = true;\r\n\r\n          // Wait for the audio context to resume before playing.\r\n          self.once('resume', playWebAudio);\r\n\r\n          // Cancel the end timer.\r\n          self._clearTimer(sound._id);\r\n        }\r\n      } else {\r\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\r\n        var playHtml5 = function() {\r\n          node.currentTime = seek;\r\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\r\n          node.volume = sound._volume * Howler.volume();\r\n          node.playbackRate = sound._rate;\r\n\r\n          // Some browsers will throw an error if this is called without user interaction.\r\n          try {\r\n            var play = node.play();\r\n\r\n            // Support older browsers that don't support promises, and thus don't have this issue.\r\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\r\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\r\n              self._playLock = true;\r\n\r\n              // Set param values immediately.\r\n              setParams();\r\n\r\n              // Releases the lock and executes queued actions.\r\n              play\r\n                .then(function() {\r\n                  self._playLock = false;\r\n                  node._unlocked = true;\r\n                  if (!internal) {\r\n                    self._emit('play', sound._id);\r\n                    self._loadQueue();\r\n                  }\r\n                })\r\n                .catch(function() {\r\n                  self._playLock = false;\r\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\r\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\r\n\r\n                  // Reset the ended and paused values.\r\n                  sound._ended = true;\r\n                  sound._paused = true;\r\n                });\r\n            } else if (!internal) {\r\n              self._playLock = false;\r\n              setParams();\r\n              self._emit('play', sound._id);\r\n              self._loadQueue();\r\n            }\r\n\r\n            // Setting rate before playing won't work in IE, so we set it again here.\r\n            node.playbackRate = sound._rate;\r\n\r\n            // If the node is still paused, then we can assume there was a playback issue.\r\n            if (node.paused) {\r\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\r\n                'on mobile devices and Chrome where playback was not within a user interaction.');\r\n              return;\r\n            }\r\n\r\n            // Setup the end timer on sprites or listen for the ended event.\r\n            if (sprite !== '__default' || sound._loop) {\r\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\r\n            } else {\r\n              self._endTimers[sound._id] = function() {\r\n                // Fire ended on this audio node.\r\n                self._ended(sound);\r\n\r\n                // Clear this listener.\r\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\r\n              };\r\n              node.addEventListener('ended', self._endTimers[sound._id], false);\r\n            }\r\n          } catch (err) {\r\n            self._emit('playerror', sound._id, err);\r\n          }\r\n        };\r\n\r\n        // If this is streaming audio, make sure the src is set and load again.\r\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\r\n          node.src = self._src;\r\n          node.load();\r\n        }\r\n\r\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\r\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\r\n        if (node.readyState >= 3 || loadedNoReadyState) {\r\n          playHtml5();\r\n        } else {\r\n          self._playLock = true;\r\n\r\n          var listener = function() {\r\n            // Begin playback.\r\n            playHtml5();\r\n\r\n            // Clear this listener.\r\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\r\n          };\r\n          node.addEventListener(Howler._canPlayEvent, listener, false);\r\n\r\n          // Cancel the end timer.\r\n          self._clearTimer(sound._id);\r\n        }\r\n      }\r\n\r\n      return sound._id;\r\n    },\r\n\r\n    /**\r\n     * Pause playback and save current position.\r\n     * @param  {Number} id The sound ID (empty to pause all in group).\r\n     * @return {Howl}\r\n     */\r\n    pause: function(id) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'pause',\r\n          action: function() {\r\n            self.pause(id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be paused.\r\n      var ids = self._getSoundIds(id);\r\n\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Clear the end timer.\r\n        self._clearTimer(ids[i]);\r\n\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        if (sound && !sound._paused) {\r\n          // Reset the seek position.\r\n          sound._seek = self.seek(ids[i]);\r\n          sound._rateSeek = 0;\r\n          sound._paused = true;\r\n\r\n          // Stop currently running fades.\r\n          self._stopFade(ids[i]);\r\n\r\n          if (sound._node) {\r\n            if (self._webAudio) {\r\n              // Make sure the sound has been created.\r\n              if (!sound._node.bufferSource) {\r\n                continue;\r\n              }\r\n\r\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\r\n                sound._node.bufferSource.noteOff(0);\r\n              } else {\r\n                sound._node.bufferSource.stop(0);\r\n              }\r\n\r\n              // Clean up the buffer source.\r\n              self._cleanBuffer(sound._node);\r\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\r\n              sound._node.pause();\r\n            }\r\n          }\r\n        }\r\n\r\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\r\n        if (!arguments[1]) {\r\n          self._emit('pause', sound ? sound._id : null);\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Stop playback and reset to start.\r\n     * @param  {Number} id The sound ID (empty to stop all in group).\r\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\r\n     * @return {Howl}\r\n     */\r\n    stop: function(id, internal) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'stop',\r\n          action: function() {\r\n            self.stop(id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be stopped.\r\n      var ids = self._getSoundIds(id);\r\n\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Clear the end timer.\r\n        self._clearTimer(ids[i]);\r\n\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        if (sound) {\r\n          // Reset the seek position.\r\n          sound._seek = sound._start || 0;\r\n          sound._rateSeek = 0;\r\n          sound._paused = true;\r\n          sound._ended = true;\r\n\r\n          // Stop currently running fades.\r\n          self._stopFade(ids[i]);\r\n\r\n          if (sound._node) {\r\n            if (self._webAudio) {\r\n              // Make sure the sound's AudioBufferSourceNode has been created.\r\n              if (sound._node.bufferSource) {\r\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\r\n                  sound._node.bufferSource.noteOff(0);\r\n                } else {\r\n                  sound._node.bufferSource.stop(0);\r\n                }\r\n\r\n                // Clean up the buffer source.\r\n                self._cleanBuffer(sound._node);\r\n              }\r\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\r\n              sound._node.currentTime = sound._start || 0;\r\n              sound._node.pause();\r\n\r\n              // If this is a live stream, stop download once the audio is stopped.\r\n              if (sound._node.duration === Infinity) {\r\n                self._clearSound(sound._node);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (!internal) {\r\n            self._emit('stop', sound._id);\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Mute/unmute a single sound or all sounds in this Howl group.\r\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\r\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\r\n     * @return {Howl}\r\n     */\r\n    mute: function(muted, id) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\r\n      if (self._state !== 'loaded'|| self._playLock) {\r\n        self._queue.push({\r\n          event: 'mute',\r\n          action: function() {\r\n            self.mute(muted, id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // If applying mute/unmute to all sounds, update the group's value.\r\n      if (typeof id === 'undefined') {\r\n        if (typeof muted === 'boolean') {\r\n          self._muted = muted;\r\n        } else {\r\n          return self._muted;\r\n        }\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be muted.\r\n      var ids = self._getSoundIds(id);\r\n\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        if (sound) {\r\n          sound._muted = muted;\r\n\r\n          // Cancel active fade and set the volume to the end value.\r\n          if (sound._interval) {\r\n            self._stopFade(sound._id);\r\n          }\r\n\r\n          if (self._webAudio && sound._node) {\r\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\r\n          } else if (sound._node) {\r\n            sound._node.muted = Howler._muted ? true : muted;\r\n          }\r\n\r\n          self._emit('mute', sound._id);\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\r\n     *   volume() -> Returns the group's volume value.\r\n     *   volume(id) -> Returns the sound id's current volume.\r\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\r\n     *   volume(vol, id) -> Sets the volume of passed sound id.\r\n     * @return {Howl/Number} Returns self or current volume.\r\n     */\r\n    volume: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var vol, id;\r\n\r\n      // Determine the values based on arguments.\r\n      if (args.length === 0) {\r\n        // Return the value of the groups' volume.\r\n        return self._volume;\r\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\r\n        // First check if this is an ID, and if not, assume it is a new volume.\r\n        var ids = self._getSoundIds();\r\n        var index = ids.indexOf(args[0]);\r\n        if (index >= 0) {\r\n          id = parseInt(args[0], 10);\r\n        } else {\r\n          vol = parseFloat(args[0]);\r\n        }\r\n      } else if (args.length >= 2) {\r\n        vol = parseFloat(args[0]);\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // Update the volume or return the current volume.\r\n      var sound;\r\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\r\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\r\n        if (self._state !== 'loaded'|| self._playLock) {\r\n          self._queue.push({\r\n            event: 'volume',\r\n            action: function() {\r\n              self.volume.apply(self, args);\r\n            }\r\n          });\r\n\r\n          return self;\r\n        }\r\n\r\n        // Set the group volume.\r\n        if (typeof id === 'undefined') {\r\n          self._volume = vol;\r\n        }\r\n\r\n        // Update one or all volumes.\r\n        id = self._getSoundIds(id);\r\n        for (var i=0; i<id.length; i++) {\r\n          // Get the sound.\r\n          sound = self._soundById(id[i]);\r\n\r\n          if (sound) {\r\n            sound._volume = vol;\r\n\r\n            // Stop currently running fades.\r\n            if (!args[2]) {\r\n              self._stopFade(id[i]);\r\n            }\r\n\r\n            if (self._webAudio && sound._node && !sound._muted) {\r\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\r\n            } else if (sound._node && !sound._muted) {\r\n              sound._node.volume = vol * Howler.volume();\r\n            }\r\n\r\n            self._emit('volume', sound._id);\r\n          }\r\n        }\r\n      } else {\r\n        sound = id ? self._soundById(id) : self._sounds[0];\r\n        return sound ? sound._volume : 0;\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\r\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\r\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\r\n     * @param  {Number} len  Time in milliseconds to fade.\r\n     * @param  {Number} id   The sound id (omit to fade all sounds).\r\n     * @return {Howl}\r\n     */\r\n    fade: function(from, to, len, id) {\r\n      var self = this;\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'fade',\r\n          action: function() {\r\n            self.fade(from, to, len, id);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // Make sure the to/from/len values are numbers.\r\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\r\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\r\n      len = parseFloat(len);\r\n\r\n      // Set the volume to the start position.\r\n      self.volume(from, id);\r\n\r\n      // Fade the volume of one or all sounds.\r\n      var ids = self._getSoundIds(id);\r\n      for (var i=0; i<ids.length; i++) {\r\n        // Get the sound.\r\n        var sound = self._soundById(ids[i]);\r\n\r\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\r\n        if (sound) {\r\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\r\n          if (!id) {\r\n            self._stopFade(ids[i]);\r\n          }\r\n\r\n          // If we are using Web Audio, let the native methods do the actual fade.\r\n          if (self._webAudio && !sound._muted) {\r\n            var currentTime = Howler.ctx.currentTime;\r\n            var end = currentTime + (len / 1000);\r\n            sound._volume = from;\r\n            sound._node.gain.setValueAtTime(from, currentTime);\r\n            sound._node.gain.linearRampToValueAtTime(to, end);\r\n          }\r\n\r\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Starts the internal interval to fade a sound.\r\n     * @param  {Object} sound Reference to sound to fade.\r\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\r\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\r\n     * @param  {Number} len  Time in milliseconds to fade.\r\n     * @param  {Number} id   The sound id to fade.\r\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\r\n     */\r\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\r\n      var self = this;\r\n      var vol = from;\r\n      var diff = to - from;\r\n      var steps = Math.abs(diff / 0.01);\r\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\r\n      var lastTick = Date.now();\r\n\r\n      // Store the value being faded to.\r\n      sound._fadeTo = to;\r\n\r\n      // Update the volume value on each interval tick.\r\n      sound._interval = setInterval(function() {\r\n        // Update the volume based on the time since the last tick.\r\n        var tick = (Date.now() - lastTick) / len;\r\n        lastTick = Date.now();\r\n        vol += diff * tick;\r\n\r\n        // Make sure the volume is in the right bounds.\r\n        if (diff < 0) {\r\n          vol = Math.max(to, vol);\r\n        } else {\r\n          vol = Math.min(to, vol);\r\n        }\r\n\r\n        // Round to within 2 decimal points.\r\n        vol = Math.round(vol * 100) / 100;\r\n\r\n        // Change the volume.\r\n        if (self._webAudio) {\r\n          sound._volume = vol;\r\n        } else {\r\n          self.volume(vol, sound._id, true);\r\n        }\r\n\r\n        // Set the group's volume.\r\n        if (isGroup) {\r\n          self._volume = vol;\r\n        }\r\n\r\n        // When the fade is complete, stop it and fire event.\r\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\r\n          clearInterval(sound._interval);\r\n          sound._interval = null;\r\n          sound._fadeTo = null;\r\n          self.volume(to, sound._id);\r\n          self._emit('fade', sound._id);\r\n        }\r\n      }, stepLen);\r\n    },\r\n\r\n    /**\r\n     * Internal method that stops the currently playing fade when\r\n     * a new fade starts, volume is changed or the sound is stopped.\r\n     * @param  {Number} id The sound id.\r\n     * @return {Howl}\r\n     */\r\n    _stopFade: function(id) {\r\n      var self = this;\r\n      var sound = self._soundById(id);\r\n\r\n      if (sound && sound._interval) {\r\n        if (self._webAudio) {\r\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\r\n        }\r\n\r\n        clearInterval(sound._interval);\r\n        sound._interval = null;\r\n        self.volume(sound._fadeTo, id);\r\n        sound._fadeTo = null;\r\n        self._emit('fade', id);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\r\n     *   loop() -> Returns the group's loop value.\r\n     *   loop(id) -> Returns the sound id's loop value.\r\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\r\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\r\n     * @return {Howl/Boolean} Returns self or current loop value.\r\n     */\r\n    loop: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var loop, id, sound;\r\n\r\n      // Determine the values for loop and id.\r\n      if (args.length === 0) {\r\n        // Return the grou's loop value.\r\n        return self._loop;\r\n      } else if (args.length === 1) {\r\n        if (typeof args[0] === 'boolean') {\r\n          loop = args[0];\r\n          self._loop = loop;\r\n        } else {\r\n          // Return this sound's loop value.\r\n          sound = self._soundById(parseInt(args[0], 10));\r\n          return sound ? sound._loop : false;\r\n        }\r\n      } else if (args.length === 2) {\r\n        loop = args[0];\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // If no id is passed, get all ID's to be looped.\r\n      var ids = self._getSoundIds(id);\r\n      for (var i=0; i<ids.length; i++) {\r\n        sound = self._soundById(ids[i]);\r\n\r\n        if (sound) {\r\n          sound._loop = loop;\r\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\r\n            sound._node.bufferSource.loop = loop;\r\n            if (loop) {\r\n              sound._node.bufferSource.loopStart = sound._start || 0;\r\n              sound._node.bufferSource.loopEnd = sound._stop;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\r\n     *   rate() -> Returns the first sound node's current playback rate.\r\n     *   rate(id) -> Returns the sound id's current playback rate.\r\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\r\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\r\n     * @return {Howl/Number} Returns self or the current playback rate.\r\n     */\r\n    rate: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var rate, id;\r\n\r\n      // Determine the values based on arguments.\r\n      if (args.length === 0) {\r\n        // We will simply return the current rate of the first node.\r\n        id = self._sounds[0]._id;\r\n      } else if (args.length === 1) {\r\n        // First check if this is an ID, and if not, assume it is a new rate value.\r\n        var ids = self._getSoundIds();\r\n        var index = ids.indexOf(args[0]);\r\n        if (index >= 0) {\r\n          id = parseInt(args[0], 10);\r\n        } else {\r\n          rate = parseFloat(args[0]);\r\n        }\r\n      } else if (args.length === 2) {\r\n        rate = parseFloat(args[0]);\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // Update the playback rate or return the current value.\r\n      var sound;\r\n      if (typeof rate === 'number') {\r\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\r\n        if (self._state !== 'loaded' || self._playLock) {\r\n          self._queue.push({\r\n            event: 'rate',\r\n            action: function() {\r\n              self.rate.apply(self, args);\r\n            }\r\n          });\r\n\r\n          return self;\r\n        }\r\n\r\n        // Set the group rate.\r\n        if (typeof id === 'undefined') {\r\n          self._rate = rate;\r\n        }\r\n\r\n        // Update one or all volumes.\r\n        id = self._getSoundIds(id);\r\n        for (var i=0; i<id.length; i++) {\r\n          // Get the sound.\r\n          sound = self._soundById(id[i]);\r\n\r\n          if (sound) {\r\n            // Keep track of our position when the rate changed and update the playback\r\n            // start position so we can properly adjust the seek position for time elapsed.\r\n            if (self.playing(id[i])) {\r\n              sound._rateSeek = self.seek(id[i]);\r\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\r\n            }\r\n            sound._rate = rate;\r\n\r\n            // Change the playback rate.\r\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\r\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\r\n            } else if (sound._node) {\r\n              sound._node.playbackRate = rate;\r\n            }\r\n\r\n            // Reset the timers.\r\n            var seek = self.seek(id[i]);\r\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\r\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\r\n\r\n            // Start a new end timer if sound is already playing.\r\n            if (self._endTimers[id[i]] || !sound._paused) {\r\n              self._clearTimer(id[i]);\r\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\r\n            }\r\n\r\n            self._emit('rate', sound._id);\r\n          }\r\n        }\r\n      } else {\r\n        sound = self._soundById(id);\r\n        return sound ? sound._rate : self._rate;\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\r\n     *   seek() -> Returns the first sound node's current seek position.\r\n     *   seek(id) -> Returns the sound id's current seek position.\r\n     *   seek(seek) -> Sets the seek position of the first sound node.\r\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\r\n     * @return {Howl/Number} Returns self or the current seek position.\r\n     */\r\n    seek: function() {\r\n      var self = this;\r\n      var args = arguments;\r\n      var seek, id;\r\n\r\n      // Determine the values based on arguments.\r\n      if (args.length === 0) {\r\n        // We will simply return the current position of the first node.\r\n        id = self._sounds[0]._id;\r\n      } else if (args.length === 1) {\r\n        // First check if this is an ID, and if not, assume it is a new seek position.\r\n        var ids = self._getSoundIds();\r\n        var index = ids.indexOf(args[0]);\r\n        if (index >= 0) {\r\n          id = parseInt(args[0], 10);\r\n        } else if (self._sounds.length) {\r\n          id = self._sounds[0]._id;\r\n          seek = parseFloat(args[0]);\r\n        }\r\n      } else if (args.length === 2) {\r\n        seek = parseFloat(args[0]);\r\n        id = parseInt(args[1], 10);\r\n      }\r\n\r\n      // If there is no ID, bail out.\r\n      if (typeof id === 'undefined') {\r\n        return self;\r\n      }\r\n\r\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\r\n      if (self._state !== 'loaded' || self._playLock) {\r\n        self._queue.push({\r\n          event: 'seek',\r\n          action: function() {\r\n            self.seek.apply(self, args);\r\n          }\r\n        });\r\n\r\n        return self;\r\n      }\r\n\r\n      // Get the sound.\r\n      var sound = self._soundById(id);\r\n\r\n      if (sound) {\r\n        if (typeof seek === 'number' && seek >= 0) {\r\n          // Pause the sound and update position for restarting playback.\r\n          var playing = self.playing(id);\r\n          if (playing) {\r\n            self.pause(id, true);\r\n          }\r\n\r\n          // Move the position of the track and cancel timer.\r\n          sound._seek = seek;\r\n          sound._ended = false;\r\n          self._clearTimer(id);\r\n\r\n          // Update the seek position for HTML5 Audio.\r\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\r\n            sound._node.currentTime = seek;\r\n          }\r\n\r\n          // Seek and emit when ready.\r\n          var seekAndEmit = function() {\r\n            self._emit('seek', id);\r\n\r\n            // Restart the playback if the sound was playing.\r\n            if (playing) {\r\n              self.play(id, true);\r\n            }\r\n          };\r\n\r\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\r\n          if (playing && !self._webAudio) {\r\n            var emitSeek = function() {\r\n              if (!self._playLock) {\r\n                seekAndEmit();\r\n              } else {\r\n                setTimeout(emitSeek, 0);\r\n              }\r\n            };\r\n            setTimeout(emitSeek, 0);\r\n          } else {\r\n            seekAndEmit();\r\n          }\r\n        } else {\r\n          if (self._webAudio) {\r\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\r\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\r\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\r\n          } else {\r\n            return sound._node.currentTime;\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\r\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\r\n     * @return {Boolean} True if playing and false if not.\r\n     */\r\n    playing: function(id) {\r\n      var self = this;\r\n\r\n      // Check the passed sound ID (if any).\r\n      if (typeof id === 'number') {\r\n        var sound = self._soundById(id);\r\n        return sound ? !sound._paused : false;\r\n      }\r\n\r\n      // Otherwise, loop through all sounds and check if any are playing.\r\n      for (var i=0; i<self._sounds.length; i++) {\r\n        if (!self._sounds[i]._paused) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\r\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\r\n     * @return {Number} Audio duration in seconds.\r\n     */\r\n    duration: function(id) {\r\n      var self = this;\r\n      var duration = self._duration;\r\n\r\n      // If we pass an ID, get the sound and return the sprite length.\r\n      var sound = self._soundById(id);\r\n      if (sound) {\r\n        duration = self._sprite[sound._sprite][1] / 1000;\r\n      }\r\n\r\n      return duration;\r\n    },\r\n\r\n    /**\r\n     * Returns the current loaded state of this Howl.\r\n     * @return {String} 'unloaded', 'loading', 'loaded'\r\n     */\r\n    state: function() {\r\n      return this._state;\r\n    },\r\n\r\n    /**\r\n     * Unload and destroy the current Howl object.\r\n     * This will immediately stop all sound instances attached to this group.\r\n     */\r\n    unload: function() {\r\n      var self = this;\r\n\r\n      // Stop playing any active sounds.\r\n      var sounds = self._sounds;\r\n      for (var i=0; i<sounds.length; i++) {\r\n        // Stop the sound if it is currently playing.\r\n        if (!sounds[i]._paused) {\r\n          self.stop(sounds[i]._id);\r\n        }\r\n\r\n        // Remove the source or disconnect.\r\n        if (!self._webAudio) {\r\n          // Set the source to 0-second silence to stop any downloading (except in IE).\r\n          self._clearSound(sounds[i]._node);\r\n\r\n          // Remove any event listeners.\r\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\r\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\r\n\r\n          // Release the Audio object back to the pool.\r\n          Howler._releaseHtml5Audio(sounds[i]._node);\r\n        }\r\n\r\n        // Empty out all of the nodes.\r\n        delete sounds[i]._node;\r\n\r\n        // Make sure all timers are cleared out.\r\n        self._clearTimer(sounds[i]._id);\r\n      }\r\n\r\n      // Remove the references in the global Howler object.\r\n      var index = Howler._howls.indexOf(self);\r\n      if (index >= 0) {\r\n        Howler._howls.splice(index, 1);\r\n      }\r\n\r\n      // Delete this sound from the cache (if no other Howl is using it).\r\n      var remCache = true;\r\n      for (i=0; i<Howler._howls.length; i++) {\r\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\r\n          remCache = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cache && remCache) {\r\n        delete cache[self._src];\r\n      }\r\n\r\n      // Clear global errors.\r\n      Howler.noAudio = false;\r\n\r\n      // Clear out `self`.\r\n      self._state = 'unloaded';\r\n      self._sounds = [];\r\n      self = null;\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Listen to a custom event.\r\n     * @param  {String}   event Event name.\r\n     * @param  {Function} fn    Listener to call.\r\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\r\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\r\n     * @return {Howl}\r\n     */\r\n    on: function(event, fn, id, once) {\r\n      var self = this;\r\n      var events = self['_on' + event];\r\n\r\n      if (typeof fn === 'function') {\r\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Remove a custom event. Call without parameters to remove all events.\r\n     * @param  {String}   event Event name.\r\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\r\n     * @param  {Number}   id    (optional) Only remove events for this sound.\r\n     * @return {Howl}\r\n     */\r\n    off: function(event, fn, id) {\r\n      var self = this;\r\n      var events = self['_on' + event];\r\n      var i = 0;\r\n\r\n      // Allow passing just an event and ID.\r\n      if (typeof fn === 'number') {\r\n        id = fn;\r\n        fn = null;\r\n      }\r\n\r\n      if (fn || id) {\r\n        // Loop through event store and remove the passed function.\r\n        for (i=0; i<events.length; i++) {\r\n          var isId = (id === events[i].id);\r\n          if (fn === events[i].fn && isId || !fn && isId) {\r\n            events.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else if (event) {\r\n        // Clear out all events of this type.\r\n        self['_on' + event] = [];\r\n      } else {\r\n        // Clear out all events of every type.\r\n        var keys = Object.keys(self);\r\n        for (i=0; i<keys.length; i++) {\r\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\r\n            self[keys[i]] = [];\r\n          }\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Listen to a custom event and remove it once fired.\r\n     * @param  {String}   event Event name.\r\n     * @param  {Function} fn    Listener to call.\r\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\r\n     * @return {Howl}\r\n     */\r\n    once: function(event, fn, id) {\r\n      var self = this;\r\n\r\n      // Setup the event listener.\r\n      self.on(event, fn, id, 1);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Emit all events of a specific type and pass the sound id.\r\n     * @param  {String} event Event name.\r\n     * @param  {Number} id    Sound ID.\r\n     * @param  {Number} msg   Message to go with event.\r\n     * @return {Howl}\r\n     */\r\n    _emit: function(event, id, msg) {\r\n      var self = this;\r\n      var events = self['_on' + event];\r\n\r\n      // Loop through event store and fire all functions.\r\n      for (var i=events.length-1; i>=0; i--) {\r\n        // Only fire the listener if the correct ID is used.\r\n        if (!events[i].id || events[i].id === id || event === 'load') {\r\n          setTimeout(function(fn) {\r\n            fn.call(this, id, msg);\r\n          }.bind(self, events[i].fn), 0);\r\n\r\n          // If this event was setup with `once`, remove it.\r\n          if (events[i].once) {\r\n            self.off(event, events[i].fn, events[i].id);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Pass the event type into load queue so that it can continue stepping.\r\n      self._loadQueue(event);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Queue of actions initiated before the sound has loaded.\r\n     * These will be called in sequence, with the next only firing\r\n     * after the previous has finished executing (even if async like play).\r\n     * @return {Howl}\r\n     */\r\n    _loadQueue: function(event) {\r\n      var self = this;\r\n\r\n      if (self._queue.length > 0) {\r\n        var task = self._queue[0];\r\n\r\n        // Remove this task if a matching event was passed.\r\n        if (task.event === event) {\r\n          self._queue.shift();\r\n          self._loadQueue();\r\n        }\r\n\r\n        // Run the task if no event type is passed.\r\n        if (!event) {\r\n          task.action();\r\n        }\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Fired when playback ends at the end of the duration.\r\n     * @param  {Sound} sound The sound object to work with.\r\n     * @return {Howl}\r\n     */\r\n    _ended: function(sound) {\r\n      var self = this;\r\n      var sprite = sound._sprite;\r\n\r\n      // If we are using IE and there was network latency we may be clipping\r\n      // audio before it completes playing. Lets check the node to make sure it\r\n      // believes it has completed, before ending the playback.\r\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\r\n        setTimeout(self._ended.bind(self, sound), 100);\r\n        return self;\r\n      }\r\n\r\n      // Should this sound loop?\r\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\r\n\r\n      // Fire the ended event.\r\n      self._emit('end', sound._id);\r\n\r\n      // Restart the playback for HTML5 Audio loop.\r\n      if (!self._webAudio && loop) {\r\n        self.stop(sound._id, true).play(sound._id);\r\n      }\r\n\r\n      // Restart this timer if on a Web Audio loop.\r\n      if (self._webAudio && loop) {\r\n        self._emit('play', sound._id);\r\n        sound._seek = sound._start || 0;\r\n        sound._rateSeek = 0;\r\n        sound._playStart = Howler.ctx.currentTime;\r\n\r\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\r\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\r\n      }\r\n\r\n      // Mark the node as paused.\r\n      if (self._webAudio && !loop) {\r\n        sound._paused = true;\r\n        sound._ended = true;\r\n        sound._seek = sound._start || 0;\r\n        sound._rateSeek = 0;\r\n        self._clearTimer(sound._id);\r\n\r\n        // Clean up the buffer source.\r\n        self._cleanBuffer(sound._node);\r\n\r\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\r\n        Howler._autoSuspend();\r\n      }\r\n\r\n      // When using a sprite, end the track.\r\n      if (!self._webAudio && !loop) {\r\n        self.stop(sound._id, true);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Clear the end timer for a sound playback.\r\n     * @param  {Number} id The sound ID.\r\n     * @return {Howl}\r\n     */\r\n    _clearTimer: function(id) {\r\n      var self = this;\r\n\r\n      if (self._endTimers[id]) {\r\n        // Clear the timeout or remove the ended listener.\r\n        if (typeof self._endTimers[id] !== 'function') {\r\n          clearTimeout(self._endTimers[id]);\r\n        } else {\r\n          var sound = self._soundById(id);\r\n          if (sound && sound._node) {\r\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\r\n          }\r\n        }\r\n\r\n        delete self._endTimers[id];\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Return the sound identified by this ID, or return null.\r\n     * @param  {Number} id Sound ID\r\n     * @return {Object}    Sound object or null.\r\n     */\r\n    _soundById: function(id) {\r\n      var self = this;\r\n\r\n      // Loop through all sounds and find the one with this ID.\r\n      for (var i=0; i<self._sounds.length; i++) {\r\n        if (id === self._sounds[i]._id) {\r\n          return self._sounds[i];\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Return an inactive sound from the pool or create a new one.\r\n     * @return {Sound} Sound playback object.\r\n     */\r\n    _inactiveSound: function() {\r\n      var self = this;\r\n\r\n      self._drain();\r\n\r\n      // Find the first inactive node to recycle.\r\n      for (var i=0; i<self._sounds.length; i++) {\r\n        if (self._sounds[i]._ended) {\r\n          return self._sounds[i].reset();\r\n        }\r\n      }\r\n\r\n      // If no inactive node was found, create a new one.\r\n      return new Sound(self);\r\n    },\r\n\r\n    /**\r\n     * Drain excess inactive sounds from the pool.\r\n     */\r\n    _drain: function() {\r\n      var self = this;\r\n      var limit = self._pool;\r\n      var cnt = 0;\r\n      var i = 0;\r\n\r\n      // If there are less sounds than the max pool size, we are done.\r\n      if (self._sounds.length < limit) {\r\n        return;\r\n      }\r\n\r\n      // Count the number of inactive sounds.\r\n      for (i=0; i<self._sounds.length; i++) {\r\n        if (self._sounds[i]._ended) {\r\n          cnt++;\r\n        }\r\n      }\r\n\r\n      // Remove excess inactive sounds, going in reverse order.\r\n      for (i=self._sounds.length - 1; i>=0; i--) {\r\n        if (cnt <= limit) {\r\n          return;\r\n        }\r\n\r\n        if (self._sounds[i]._ended) {\r\n          // Disconnect the audio source when using Web Audio.\r\n          if (self._webAudio && self._sounds[i]._node) {\r\n            self._sounds[i]._node.disconnect(0);\r\n          }\r\n\r\n          // Remove sounds until we have the pool size.\r\n          self._sounds.splice(i, 1);\r\n          cnt--;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get all ID's from the sounds pool.\r\n     * @param  {Number} id Only return one ID if one is passed.\r\n     * @return {Array}    Array of IDs.\r\n     */\r\n    _getSoundIds: function(id) {\r\n      var self = this;\r\n\r\n      if (typeof id === 'undefined') {\r\n        var ids = [];\r\n        for (var i=0; i<self._sounds.length; i++) {\r\n          ids.push(self._sounds[i]._id);\r\n        }\r\n\r\n        return ids;\r\n      } else {\r\n        return [id];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Load the sound back into the buffer source.\r\n     * @param  {Sound} sound The sound object to work with.\r\n     * @return {Howl}\r\n     */\r\n    _refreshBuffer: function(sound) {\r\n      var self = this;\r\n\r\n      // Setup the buffer source for playback.\r\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\r\n      sound._node.bufferSource.buffer = cache[self._src];\r\n\r\n      // Connect to the correct node.\r\n      if (sound._panner) {\r\n        sound._node.bufferSource.connect(sound._panner);\r\n      } else {\r\n        sound._node.bufferSource.connect(sound._node);\r\n      }\r\n\r\n      // Setup looping and playback rate.\r\n      sound._node.bufferSource.loop = sound._loop;\r\n      if (sound._loop) {\r\n        sound._node.bufferSource.loopStart = sound._start || 0;\r\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\r\n      }\r\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Prevent memory leaks by cleaning up the buffer source after playback.\r\n     * @param  {Object} node Sound's audio node containing the buffer source.\r\n     * @return {Howl}\r\n     */\r\n    _cleanBuffer: function(node) {\r\n      var self = this;\r\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\r\n\r\n      if (Howler._scratchBuffer && node.bufferSource) {\r\n        node.bufferSource.onended = null;\r\n        node.bufferSource.disconnect(0);\r\n        if (isIOS) {\r\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\r\n        }\r\n      }\r\n      node.bufferSource = null;\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\r\n     * @param  {Object} node Audio node to clear.\r\n     */\r\n    _clearSound: function(node) {\r\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\r\n      if (!checkIE) {\r\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\r\n      }\r\n    }\r\n  };\r\n\r\n  /** Single Sound Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Setup the sound object, which each node attached to a Howl group is contained in.\r\n   * @param {Object} howl The Howl parent group.\r\n   */\r\n  var Sound = function(howl) {\r\n    this._parent = howl;\r\n    this.init();\r\n  };\r\n  Sound.prototype = {\r\n    /**\r\n     * Initialize a new Sound object.\r\n     * @return {Sound}\r\n     */\r\n    init: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Setup the default parameters.\r\n      self._muted = parent._muted;\r\n      self._loop = parent._loop;\r\n      self._volume = parent._volume;\r\n      self._rate = parent._rate;\r\n      self._seek = 0;\r\n      self._paused = true;\r\n      self._ended = true;\r\n      self._sprite = '__default';\r\n\r\n      // Generate a unique ID for this sound.\r\n      self._id = ++Howler._counter;\r\n\r\n      // Add itself to the parent's pool.\r\n      parent._sounds.push(self);\r\n\r\n      // Create the new node.\r\n      self.create();\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\r\n     * @return {Sound}\r\n     */\r\n    create: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\r\n\r\n      if (parent._webAudio) {\r\n        // Create the gain node for controlling volume (the source will connect to this).\r\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\r\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\r\n        self._node.paused = true;\r\n        self._node.connect(Howler.masterGain);\r\n      } else if (!Howler.noAudio) {\r\n        // Get an unlocked Audio object from the pool.\r\n        self._node = Howler._obtainHtml5Audio();\r\n\r\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\r\n        self._errorFn = self._errorListener.bind(self);\r\n        self._node.addEventListener('error', self._errorFn, false);\r\n\r\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\r\n        self._loadFn = self._loadListener.bind(self);\r\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\r\n\r\n        // Setup the new audio node.\r\n        self._node.src = parent._src;\r\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\r\n        self._node.volume = volume * Howler.volume();\r\n\r\n        // Begin loading the source.\r\n        self._node.load();\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * Reset the parameters of this sound to the original state (for recycle).\r\n     * @return {Sound}\r\n     */\r\n    reset: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Reset all of the parameters of this sound.\r\n      self._muted = parent._muted;\r\n      self._loop = parent._loop;\r\n      self._volume = parent._volume;\r\n      self._rate = parent._rate;\r\n      self._seek = 0;\r\n      self._rateSeek = 0;\r\n      self._paused = true;\r\n      self._ended = true;\r\n      self._sprite = '__default';\r\n\r\n      // Generate a new ID so that it isn't confused with the previous sound.\r\n      self._id = ++Howler._counter;\r\n\r\n      return self;\r\n    },\r\n\r\n    /**\r\n     * HTML5 Audio error listener callback.\r\n     */\r\n    _errorListener: function() {\r\n      var self = this;\r\n\r\n      // Fire an error event and pass back the code.\r\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\r\n\r\n      // Clear the event listener.\r\n      self._node.removeEventListener('error', self._errorFn, false);\r\n    },\r\n\r\n    /**\r\n     * HTML5 Audio canplaythrough listener callback.\r\n     */\r\n    _loadListener: function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Round up the duration to account for the lower precision in HTML5 Audio.\r\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\r\n\r\n      // Setup a sprite if none is defined.\r\n      if (Object.keys(parent._sprite).length === 0) {\r\n        parent._sprite = {__default: [0, parent._duration * 1000]};\r\n      }\r\n\r\n      if (parent._state !== 'loaded') {\r\n        parent._state = 'loaded';\r\n        parent._emit('load');\r\n        parent._loadQueue();\r\n      }\r\n\r\n      // Clear the event listener.\r\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\r\n    }\r\n  };\r\n\r\n  /** Helper Methods **/\r\n  /***************************************************************************/\r\n\r\n  var cache = {};\r\n\r\n  /**\r\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\r\n   * @param  {Howl} self\r\n   */\r\n  var loadBuffer = function(self) {\r\n    var url = self._src;\r\n\r\n    // Check if the buffer has already been cached and use it instead.\r\n    if (cache[url]) {\r\n      // Set the duration from the cache.\r\n      self._duration = cache[url].duration;\r\n\r\n      // Load the sound into this Howl.\r\n      loadSound(self);\r\n\r\n      return;\r\n    }\r\n\r\n    if (/^data:[^;]+;base64,/.test(url)) {\r\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\r\n      var data = atob(url.split(',')[1]);\r\n      var dataView = new Uint8Array(data.length);\r\n      for (var i=0; i<data.length; ++i) {\r\n        dataView[i] = data.charCodeAt(i);\r\n      }\r\n\r\n      decodeAudioData(dataView.buffer, self);\r\n    } else {\r\n      // Load the buffer from the URL.\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open(self._xhr.method, url, true);\r\n      xhr.withCredentials = self._xhr.withCredentials;\r\n      xhr.responseType = 'arraybuffer';\r\n\r\n      // Apply any custom headers to the request.\r\n      if (self._xhr.headers) {\r\n        Object.keys(self._xhr.headers).forEach(function(key) {\r\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\r\n        });\r\n      }\r\n\r\n      xhr.onload = function() {\r\n        // Make sure we get a successful response back.\r\n        var code = (xhr.status + '')[0];\r\n        if (code !== '0' && code !== '2' && code !== '3') {\r\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\r\n          return;\r\n        }\r\n\r\n        decodeAudioData(xhr.response, self);\r\n      };\r\n      xhr.onerror = function() {\r\n        // If there is an error, switch to HTML5 Audio.\r\n        if (self._webAudio) {\r\n          self._html5 = true;\r\n          self._webAudio = false;\r\n          self._sounds = [];\r\n          delete cache[url];\r\n          self.load();\r\n        }\r\n      };\r\n      safeXhrSend(xhr);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Send the XHR request wrapped in a try/catch.\r\n   * @param  {Object} xhr XHR to send.\r\n   */\r\n  var safeXhrSend = function(xhr) {\r\n    try {\r\n      xhr.send();\r\n    } catch (e) {\r\n      xhr.onerror();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Decode audio data from an array buffer.\r\n   * @param  {ArrayBuffer} arraybuffer The audio data.\r\n   * @param  {Howl}        self\r\n   */\r\n  var decodeAudioData = function(arraybuffer, self) {\r\n    // Fire a load error if something broke.\r\n    var error = function() {\r\n      self._emit('loaderror', null, 'Decoding audio data failed.');\r\n    };\r\n\r\n    // Load the sound on success.\r\n    var success = function(buffer) {\r\n      if (buffer && self._sounds.length > 0) {\r\n        cache[self._src] = buffer;\r\n        loadSound(self, buffer);\r\n      } else {\r\n        error();\r\n      }\r\n    };\r\n\r\n    // Decode the buffer into an audio source.\r\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\r\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\r\n    } else {\r\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\r\n   * @param  {Howl} self\r\n   * @param  {Object} buffer The decoded buffer sound source.\r\n   */\r\n  var loadSound = function(self, buffer) {\r\n    // Set the duration.\r\n    if (buffer && !self._duration) {\r\n      self._duration = buffer.duration;\r\n    }\r\n\r\n    // Setup a sprite if none is defined.\r\n    if (Object.keys(self._sprite).length === 0) {\r\n      self._sprite = {__default: [0, self._duration * 1000]};\r\n    }\r\n\r\n    // Fire the loaded event.\r\n    if (self._state !== 'loaded') {\r\n      self._state = 'loaded';\r\n      self._emit('load');\r\n      self._loadQueue();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\r\n   */\r\n  var setupAudioContext = function() {\r\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\r\n    if (!Howler.usingWebAudio) {\r\n      return;\r\n    }\r\n\r\n    // Check if we are using Web Audio and setup the AudioContext if we are.\r\n    try {\r\n      if (typeof AudioContext !== 'undefined') {\r\n        Howler.ctx = new AudioContext();\r\n      } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Howler.ctx = new webkitAudioContext();\r\n      } else {\r\n        Howler.usingWebAudio = false;\r\n      }\r\n    } catch(e) {\r\n      Howler.usingWebAudio = false;\r\n    }\r\n\r\n    // If the audio context creation still failed, set using web audio to false.\r\n    if (!Howler.ctx) {\r\n      Howler.usingWebAudio = false;\r\n    }\r\n\r\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\r\n    // If it is, disable Web Audio as it causes crashing.\r\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\r\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\r\n    if (iOS && version && version < 9) {\r\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\r\n      if (Howler._navigator && !safari) {\r\n        Howler.usingWebAudio = false;\r\n      }\r\n    }\r\n\r\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\r\n    if (Howler.usingWebAudio) {\r\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\r\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\r\n      Howler.masterGain.connect(Howler.ctx.destination);\r\n    }\r\n\r\n    // Re-run the setup on Howler.\r\n    Howler._setup();\r\n  };\r\n\r\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], function() {\r\n      return {\r\n        Howler: Howler,\r\n        Howl: Howl\r\n      };\r\n    });\r\n  }\r\n\r\n  // Add support for CommonJS libraries such as browserify.\r\n  if (typeof exports !== 'undefined') {\r\n    exports.Howler = Howler;\r\n    exports.Howl = Howl;\r\n  }\r\n\r\n  // Add to global in Node.js (for testing, etc).\r\n  if (typeof global !== 'undefined') {\r\n    global.HowlerGlobal = HowlerGlobal;\r\n    global.Howler = Howler;\r\n    global.Howl = Howl;\r\n    global.Sound = Sound;\r\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\r\n    window.HowlerGlobal = HowlerGlobal;\r\n    window.Howler = Howler;\r\n    window.Howl = Howl;\r\n    window.Sound = Sound;\r\n  }\r\n})();\r\n\r\n\r\n/*!\r\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\r\n *  \r\n *  howler.js v2.2.0\r\n *  howlerjs.com\r\n *\r\n *  (c) 2013-2020, James Simpson of GoldFire Studios\r\n *  goldfirestudios.com\r\n *\r\n *  MIT License\r\n */\r\n\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  // Setup default properties.\r\n  HowlerGlobal.prototype._pos = [0, 0, 0];\r\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\r\n\r\n  /** Global Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Helper method to update the stereo panning position of all current Howls.\r\n   * Future Howls will not use this value unless explicitly set.\r\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\r\n   * @return {Howler/Number}     Self or current stereo panning value.\r\n   */\r\n  HowlerGlobal.prototype.stereo = function(pan) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self.ctx || !self.ctx.listener) {\r\n      return self;\r\n    }\r\n\r\n    // Loop through all Howls and update their stereo panning.\r\n    for (var i=self._howls.length-1; i>=0; i--) {\r\n      self._howls[i].stereo(pan);\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\r\n   * 3D position will be relative to the listener's position.\r\n   * @param  {Number} x The x-position of the listener.\r\n   * @param  {Number} y The y-position of the listener.\r\n   * @param  {Number} z The z-position of the listener.\r\n   * @return {Howler/Array}   Self or current listener position.\r\n   */\r\n  HowlerGlobal.prototype.pos = function(x, y, z) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self.ctx || !self.ctx.listener) {\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    y = (typeof y !== 'number') ? self._pos[1] : y;\r\n    z = (typeof z !== 'number') ? self._pos[2] : z;\r\n\r\n    if (typeof x === 'number') {\r\n      self._pos = [x, y, z];\r\n\r\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\r\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\r\n      } else {\r\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\r\n      }\r\n    } else {\r\n      return self._pos;\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\r\n   * A front and up vector must be provided. The front is the direction the\r\n   * face of the listener is pointing, and up is the direction the top of the\r\n   * listener is pointing. Thus, these values are expected to be at right angles\r\n   * from each other.\r\n   * @param  {Number} x   The x-orientation of the listener.\r\n   * @param  {Number} y   The y-orientation of the listener.\r\n   * @param  {Number} z   The z-orientation of the listener.\r\n   * @param  {Number} xUp The x-orientation of the top of the listener.\r\n   * @param  {Number} yUp The y-orientation of the top of the listener.\r\n   * @param  {Number} zUp The z-orientation of the top of the listener.\r\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\r\n   */\r\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self.ctx || !self.ctx.listener) {\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    var or = self._orientation;\r\n    y = (typeof y !== 'number') ? or[1] : y;\r\n    z = (typeof z !== 'number') ? or[2] : z;\r\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\r\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\r\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\r\n\r\n    if (typeof x === 'number') {\r\n      self._orientation = [x, y, z, xUp, yUp, zUp];\r\n\r\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\r\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\r\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\r\n      } else {\r\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\r\n      }\r\n    } else {\r\n      return or;\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /** Group Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Add new properties to the core init.\r\n   * @param  {Function} _super Core init method.\r\n   * @return {Howl}\r\n   */\r\n  Howl.prototype.init = (function(_super) {\r\n    return function(o) {\r\n      var self = this;\r\n\r\n      // Setup user-defined default properties.\r\n      self._orientation = o.orientation || [1, 0, 0];\r\n      self._stereo = o.stereo || null;\r\n      self._pos = o.pos || null;\r\n      self._pannerAttr = {\r\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\r\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\r\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\r\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\r\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\r\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\r\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\r\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\r\n      };\r\n\r\n      // Setup event listeners.\r\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\r\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\r\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\r\n\r\n      // Complete initilization with howler.js core's init function.\r\n      return _super.call(this, o);\r\n    };\r\n  })(Howl.prototype.init);\r\n\r\n  /**\r\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\r\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\r\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\r\n   */\r\n  Howl.prototype.stereo = function(pan, id) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\r\n    if (self._state !== 'loaded') {\r\n      self._queue.push({\r\n        event: 'stereo',\r\n        action: function() {\r\n          self.stereo(pan, id);\r\n        }\r\n      });\r\n\r\n      return self;\r\n    }\r\n\r\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\r\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\r\n\r\n    // Setup the group's stereo panning if no ID is passed.\r\n    if (typeof id === 'undefined') {\r\n      // Return the group's stereo panning if no parameters are passed.\r\n      if (typeof pan === 'number') {\r\n        self._stereo = pan;\r\n        self._pos = [pan, 0, 0];\r\n      } else {\r\n        return self._stereo;\r\n      }\r\n    }\r\n\r\n    // Change the streo panning of one or all sounds in group.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      // Get the sound.\r\n      var sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        if (typeof pan === 'number') {\r\n          sound._stereo = pan;\r\n          sound._pos = [pan, 0, 0];\r\n\r\n          if (sound._node) {\r\n            // If we are falling back, make sure the panningModel is equalpower.\r\n            sound._pannerAttr.panningModel = 'equalpower';\r\n\r\n            // Check if there is a panner setup and create a new one if not.\r\n            if (!sound._panner || !sound._panner.pan) {\r\n              setupPanner(sound, pannerType);\r\n            }\r\n\r\n            if (pannerType === 'spatial') {\r\n              if (typeof sound._panner.positionX !== 'undefined') {\r\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\r\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\r\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\r\n              } else {\r\n                sound._panner.setPosition(pan, 0, 0);\r\n              }\r\n            } else {\r\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\r\n            }\r\n          }\r\n\r\n          self._emit('stereo', sound._id);\r\n        } else {\r\n          return sound._stereo;\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\r\n   * @param  {Number} x  The x-position of the audio source.\r\n   * @param  {Number} y  The y-position of the audio source.\r\n   * @param  {Number} z  The z-position of the audio source.\r\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\r\n   */\r\n  Howl.prototype.pos = function(x, y, z, id) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\r\n    if (self._state !== 'loaded') {\r\n      self._queue.push({\r\n        event: 'pos',\r\n        action: function() {\r\n          self.pos(x, y, z, id);\r\n        }\r\n      });\r\n\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    y = (typeof y !== 'number') ? 0 : y;\r\n    z = (typeof z !== 'number') ? -0.5 : z;\r\n\r\n    // Setup the group's spatial position if no ID is passed.\r\n    if (typeof id === 'undefined') {\r\n      // Return the group's spatial position if no parameters are passed.\r\n      if (typeof x === 'number') {\r\n        self._pos = [x, y, z];\r\n      } else {\r\n        return self._pos;\r\n      }\r\n    }\r\n\r\n    // Change the spatial position of one or all sounds in group.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      // Get the sound.\r\n      var sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        if (typeof x === 'number') {\r\n          sound._pos = [x, y, z];\r\n\r\n          if (sound._node) {\r\n            // Check if there is a panner setup and create a new one if not.\r\n            if (!sound._panner || sound._panner.pan) {\r\n              setupPanner(sound, 'spatial');\r\n            }\r\n\r\n            if (typeof sound._panner.positionX !== 'undefined') {\r\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\r\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\r\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\r\n            } else {\r\n              sound._panner.setPosition(x, y, z);\r\n            }\r\n          }\r\n\r\n          self._emit('pos', sound._id);\r\n        } else {\r\n          return sound._pos;\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\r\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\r\n   * a sound pointing away from the listener can be quiet or silent.\r\n   * @param  {Number} x  The x-orientation of the source.\r\n   * @param  {Number} y  The y-orientation of the source.\r\n   * @param  {Number} z  The z-orientation of the source.\r\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\r\n   */\r\n  Howl.prototype.orientation = function(x, y, z, id) {\r\n    var self = this;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\r\n    if (self._state !== 'loaded') {\r\n      self._queue.push({\r\n        event: 'orientation',\r\n        action: function() {\r\n          self.orientation(x, y, z, id);\r\n        }\r\n      });\r\n\r\n      return self;\r\n    }\r\n\r\n    // Set the defaults for optional 'y' & 'z'.\r\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\r\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\r\n\r\n    // Setup the group's spatial orientation if no ID is passed.\r\n    if (typeof id === 'undefined') {\r\n      // Return the group's spatial orientation if no parameters are passed.\r\n      if (typeof x === 'number') {\r\n        self._orientation = [x, y, z];\r\n      } else {\r\n        return self._orientation;\r\n      }\r\n    }\r\n\r\n    // Change the spatial orientation of one or all sounds in group.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      // Get the sound.\r\n      var sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        if (typeof x === 'number') {\r\n          sound._orientation = [x, y, z];\r\n\r\n          if (sound._node) {\r\n            // Check if there is a panner setup and create a new one if not.\r\n            if (!sound._panner) {\r\n              // Make sure we have a position to setup the node with.\r\n              if (!sound._pos) {\r\n                sound._pos = self._pos || [0, 0, -0.5];\r\n              }\r\n\r\n              setupPanner(sound, 'spatial');\r\n            }\r\n\r\n            if (typeof sound._panner.orientationX !== 'undefined') {\r\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\r\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\r\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\r\n            } else {\r\n              sound._panner.setOrientation(x, y, z);\r\n            }\r\n          }\r\n\r\n          self._emit('orientation', sound._id);\r\n        } else {\r\n          return sound._orientation;\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /**\r\n   * Get/set the panner node's attributes for a sound or group of sounds.\r\n   * This method can optionall take 0, 1 or 2 arguments.\r\n   *   pannerAttr() -> Returns the group's values.\r\n   *   pannerAttr(id) -> Returns the sound id's values.\r\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\r\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\r\n   *\r\n   *   Attributes:\r\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\r\n   *                      inside of which there will be no volume reduction.\r\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\r\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\r\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\r\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\r\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\r\n   *                     listener. Can be `linear`, `inverse` or `exponential.\r\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\r\n   *                   will not be reduced any further.\r\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\r\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\r\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\r\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\r\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\r\n   *                     with `inverse` and `exponential`.\r\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\r\n   *                     Can be `HRTF` or `equalpower`.\r\n   *\r\n   * @return {Howl/Object} Returns self or current panner attributes.\r\n   */\r\n  Howl.prototype.pannerAttr = function() {\r\n    var self = this;\r\n    var args = arguments;\r\n    var o, id, sound;\r\n\r\n    // Stop right here if not using Web Audio.\r\n    if (!self._webAudio) {\r\n      return self;\r\n    }\r\n\r\n    // Determine the values based on arguments.\r\n    if (args.length === 0) {\r\n      // Return the group's panner attribute values.\r\n      return self._pannerAttr;\r\n    } else if (args.length === 1) {\r\n      if (typeof args[0] === 'object') {\r\n        o = args[0];\r\n\r\n        // Set the grou's panner attribute values.\r\n        if (typeof id === 'undefined') {\r\n          if (!o.pannerAttr) {\r\n            o.pannerAttr = {\r\n              coneInnerAngle: o.coneInnerAngle,\r\n              coneOuterAngle: o.coneOuterAngle,\r\n              coneOuterGain: o.coneOuterGain,\r\n              distanceModel: o.distanceModel,\r\n              maxDistance: o.maxDistance,\r\n              refDistance: o.refDistance,\r\n              rolloffFactor: o.rolloffFactor,\r\n              panningModel: o.panningModel\r\n            };\r\n          }\r\n\r\n          self._pannerAttr = {\r\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\r\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\r\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\r\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\r\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\r\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\r\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\r\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\r\n          };\r\n        }\r\n      } else {\r\n        // Return this sound's panner attribute values.\r\n        sound = self._soundById(parseInt(args[0], 10));\r\n        return sound ? sound._pannerAttr : self._pannerAttr;\r\n      }\r\n    } else if (args.length === 2) {\r\n      o = args[0];\r\n      id = parseInt(args[1], 10);\r\n    }\r\n\r\n    // Update the values of the specified sounds.\r\n    var ids = self._getSoundIds(id);\r\n    for (var i=0; i<ids.length; i++) {\r\n      sound = self._soundById(ids[i]);\r\n\r\n      if (sound) {\r\n        // Merge the new values into the sound.\r\n        var pa = sound._pannerAttr;\r\n        pa = {\r\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\r\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\r\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\r\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\r\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\r\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\r\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\r\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\r\n        };\r\n\r\n        // Update the panner values or create a new panner if none exists.\r\n        var panner = sound._panner;\r\n        if (panner) {\r\n          panner.coneInnerAngle = pa.coneInnerAngle;\r\n          panner.coneOuterAngle = pa.coneOuterAngle;\r\n          panner.coneOuterGain = pa.coneOuterGain;\r\n          panner.distanceModel = pa.distanceModel;\r\n          panner.maxDistance = pa.maxDistance;\r\n          panner.refDistance = pa.refDistance;\r\n          panner.rolloffFactor = pa.rolloffFactor;\r\n          panner.panningModel = pa.panningModel;\r\n        } else {\r\n          // Make sure we have a position to setup the node with.\r\n          if (!sound._pos) {\r\n            sound._pos = self._pos || [0, 0, -0.5];\r\n          }\r\n\r\n          // Create a new panner node.\r\n          setupPanner(sound, 'spatial');\r\n        }\r\n      }\r\n    }\r\n\r\n    return self;\r\n  };\r\n\r\n  /** Single Sound Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Add new properties to the core Sound init.\r\n   * @param  {Function} _super Core Sound init method.\r\n   * @return {Sound}\r\n   */\r\n  Sound.prototype.init = (function(_super) {\r\n    return function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Setup user-defined default properties.\r\n      self._orientation = parent._orientation;\r\n      self._stereo = parent._stereo;\r\n      self._pos = parent._pos;\r\n      self._pannerAttr = parent._pannerAttr;\r\n\r\n      // Complete initilization with howler.js core Sound's init function.\r\n      _super.call(this);\r\n\r\n      // If a stereo or position was specified, set it up.\r\n      if (self._stereo) {\r\n        parent.stereo(self._stereo);\r\n      } else if (self._pos) {\r\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\r\n      }\r\n    };\r\n  })(Sound.prototype.init);\r\n\r\n  /**\r\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\r\n   * @param  {Function} _super Sound reset method.\r\n   * @return {Sound}\r\n   */\r\n  Sound.prototype.reset = (function(_super) {\r\n    return function() {\r\n      var self = this;\r\n      var parent = self._parent;\r\n\r\n      // Reset all spatial plugin properties on this sound.\r\n      self._orientation = parent._orientation;\r\n      self._stereo = parent._stereo;\r\n      self._pos = parent._pos;\r\n      self._pannerAttr = parent._pannerAttr;\r\n\r\n      // If a stereo or position was specified, set it up.\r\n      if (self._stereo) {\r\n        parent.stereo(self._stereo);\r\n      } else if (self._pos) {\r\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\r\n      } else if (self._panner) {\r\n        // Disconnect the panner.\r\n        self._panner.disconnect(0);\r\n        self._panner = undefined;\r\n        parent._refreshBuffer(self);\r\n      }\r\n\r\n      // Complete resetting of the sound.\r\n      return _super.call(this);\r\n    };\r\n  })(Sound.prototype.reset);\r\n\r\n  /** Helper Methods **/\r\n  /***************************************************************************/\r\n\r\n  /**\r\n   * Create a new panner node and save it on the sound.\r\n   * @param  {Sound} sound Specific sound to setup panning on.\r\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\r\n   */\r\n  var setupPanner = function(sound, type) {\r\n    type = type || 'spatial';\r\n\r\n    // Create the new panner node.\r\n    if (type === 'spatial') {\r\n      sound._panner = Howler.ctx.createPanner();\r\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\r\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\r\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\r\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\r\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\r\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\r\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\r\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\r\n\r\n      if (typeof sound._panner.positionX !== 'undefined') {\r\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\r\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\r\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\r\n      } else {\r\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\r\n      }\r\n\r\n      if (typeof sound._panner.orientationX !== 'undefined') {\r\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\r\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\r\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\r\n      } else {\r\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\r\n      }\r\n    } else {\r\n      sound._panner = Howler.ctx.createStereoPanner();\r\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\r\n    }\r\n\r\n    sound._panner.connect(sound._node);\r\n\r\n    // Update the connections.\r\n    if (!sound._paused) {\r\n      sound._parent.pause(sound._id, true).play(sound._id, true);\r\n    }\r\n  };\r\n})();\r\n"],"sourceRoot":""}