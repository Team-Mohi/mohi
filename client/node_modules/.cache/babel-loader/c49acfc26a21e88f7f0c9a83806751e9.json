{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\Post\\\\CommentEditor.jsx\";\nimport React, { Component } from \"react\";\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport { Modifier, EditorState, ContentState, convertToRaw } from 'draft-js';\nimport style from 'styled-components';\nimport htmlToDraft from 'html-to-draftjs';\nconst emojiPlugin = createEmojiPlugin({\n  useNativeArt: true\n});\nconst {\n  EmojiSuggestions,\n  EmojiSelect\n} = emojiPlugin;\nconst plugins = [emojiPlugin];\nconst StyleEditor = style.div`\n  width: 100%;\n  max-height: 100px;\n  overflow-y: auto;\n  border: 1px solid #ddd;\n  margin-left: 10px;\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 30px;\n`;\nconst Wrapper = style.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\nconst StyleEmoji = style.div`\n  position: absolute;\n  right: 10px;\n  border: 0;\n  z-index: 2;\n`;\nexport default class CommentEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n\n    const text = '';\n    this.state = {\n      editorState: createEditorStateWithText(text)\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.idUserReceivedReply !== this.props.idUserReceivedReply || this.state.userReceivedReply !== this.props.userReceivedReply) {\n      let userLink = \"<a href=''>\" + this.props.userReceivedReply + \"</a>\";\n      let {\n        contentBlocks,\n        entityMap\n      } = htmlToDraft(userLink);\n      let contentState = Modifier.replaceWithFragment(this.state.editorState.getCurrentContent(), this.state.editorState.getSelection(), ContentState.createFromBlockArray(contentBlocks, entityMap).getBlockMap());\n      EditorState.push(this.state.editorState, contentState, 'insert-fragment');\n      console.log(contentState);\n    }\n  }\n\n  focusCommentInput() {\n    this.commentInput.focus();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StyleEditor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      editorState: this.state.editorState,\n      onChange: this.onChange,\n      plugins: plugins,\n      placeholder: \"Vi\\u1EBFt b\\xECnh lu\\u1EADn...\",\n      ref: element => {\n        this.commentInput = element;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(EmojiSuggestions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(StyleEmoji, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EmojiSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/Post/CommentEditor.jsx"],"names":["React","Component","Editor","createEditorStateWithText","createEmojiPlugin","Modifier","EditorState","ContentState","convertToRaw","style","htmlToDraft","emojiPlugin","useNativeArt","EmojiSuggestions","EmojiSelect","plugins","StyleEditor","div","Wrapper","StyleEmoji","CommentEditor","constructor","props","onChange","editorState","setState","text","state","componentDidUpdate","idUserReceivedReply","userReceivedReply","userLink","contentBlocks","entityMap","contentState","replaceWithFragment","getCurrentContent","getSelection","createFromBlockArray","getBlockMap","push","console","log","focusCommentInput","commentInput","focus","render","element"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\r\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\r\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\r\nimport { Modifier, EditorState, ContentState, convertToRaw } from 'draft-js';\r\nimport style from 'styled-components';\r\nimport htmlToDraft from 'html-to-draftjs';\r\n\r\nconst emojiPlugin = createEmojiPlugin({\r\n  useNativeArt: true\r\n});\r\nconst { EmojiSuggestions, EmojiSelect } = emojiPlugin;\r\nconst plugins = [emojiPlugin];\r\n\r\nconst StyleEditor = style.div`\r\n  width: 100%;\r\n  max-height: 100px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  padding: 5px 10px;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst Wrapper = style.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyleEmoji = style.div`\r\n  position: absolute;\r\n  right: 10px;\r\n  border: 0;\r\n  z-index: 2;\r\n`;\r\n\r\nexport default class CommentEditor extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    const text = '';\r\n    this.state = {\r\n      editorState: createEditorStateWithText(text)\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    if(this.state.idUserReceivedReply !== this.props.idUserReceivedReply || this.state.userReceivedReply !== this.props.userReceivedReply){\r\n      let userLink = \"<a href=''>\"+ this.props.userReceivedReply +\"</a>\";\r\n      let { contentBlocks, entityMap } = htmlToDraft(userLink);\r\n      let contentState = Modifier.replaceWithFragment(\r\n         this.state.editorState.getCurrentContent(),\r\n         this.state.editorState.getSelection(),\r\n         ContentState.createFromBlockArray(contentBlocks, entityMap).getBlockMap()\r\n       )\r\n\r\n      EditorState.push(this.state.editorState, contentState, 'insert-fragment');\r\n      console.log(contentState);\r\n    }\r\n  }\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  };\r\n\r\n  focusCommentInput(){\r\n    this.commentInput.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <StyleEditor>\r\n          <Editor\r\n            editorState={this.state.editorState}\r\n            onChange={this.onChange}\r\n            plugins={plugins}\r\n            placeholder=\"Viết bình luận...\"\r\n            ref={(element) => {\r\n              this.commentInput = element;\r\n            }}\r\n          />\r\n        </StyleEditor>\r\n        <EmojiSuggestions />\r\n        <StyleEmoji>\r\n          <EmojiSelect />\r\n        </StyleEmoji>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}