{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar DraftStringKey = require(\"./DraftStringKey\");\n\nvar UnicodeUtils = require(\"fbjs/lib/UnicodeUtils\");\n\nvar strlen = UnicodeUtils.strlen;\n/**\r\n * Convert to UTF-8 character counts for storage.\r\n */\n\nfunction encodeEntityRanges(block, storageMap) {\n  var encoded = [];\n  block.findEntityRanges(function (character) {\n    return !!character.getEntity();\n  }, function (\n  /*number*/\n  start,\n  /*number*/\n  end) {\n    var text = block.getText();\n    var key = block.getEntityAt(start);\n    encoded.push({\n      offset: strlen(text.slice(0, start)),\n      length: strlen(text.slice(start, end)),\n      // Encode the key as a number for range storage.\n      key: Number(storageMap[DraftStringKey.stringify(key)])\n    });\n  });\n  return encoded;\n}\n\nmodule.exports = encodeEntityRanges;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/draft-js/lib/encodeEntityRanges.js"],"names":["DraftStringKey","require","UnicodeUtils","strlen","encodeEntityRanges","block","storageMap","encoded","findEntityRanges","character","getEntity","start","end","text","getText","key","getEntityAt","push","offset","slice","length","Number","stringify","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,uBAAD,CAA1B;;AAEA,IAAIE,MAAM,GAAGD,YAAY,CAACC,MAA1B;AACA;;;;AAIA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,OAAO,GAAG,EAAd;AACAF,EAAAA,KAAK,CAACG,gBAAN,CAAuB,UAAUC,SAAV,EAAqB;AAC1C,WAAO,CAAC,CAACA,SAAS,CAACC,SAAV,EAAT;AACD,GAFD,EAEG;AACH;AACAC,EAAAA,KAFG;AAGH;AACAC,EAAAA,GAJG,EAIE;AACH,QAAIC,IAAI,GAAGR,KAAK,CAACS,OAAN,EAAX;AACA,QAAIC,GAAG,GAAGV,KAAK,CAACW,WAAN,CAAkBL,KAAlB,CAAV;AACAJ,IAAAA,OAAO,CAACU,IAAR,CAAa;AACXC,MAAAA,MAAM,EAAEf,MAAM,CAACU,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcR,KAAd,CAAD,CADH;AAEXS,MAAAA,MAAM,EAAEjB,MAAM,CAACU,IAAI,CAACM,KAAL,CAAWR,KAAX,EAAkBC,GAAlB,CAAD,CAFH;AAGX;AACAG,MAAAA,GAAG,EAAEM,MAAM,CAACf,UAAU,CAACN,cAAc,CAACsB,SAAf,CAAyBP,GAAzB,CAAD,CAAX;AAJA,KAAb;AAMD,GAfD;AAgBA,SAAOR,OAAP;AACD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar DraftStringKey = require(\"./DraftStringKey\");\r\n\r\nvar UnicodeUtils = require(\"fbjs/lib/UnicodeUtils\");\r\n\r\nvar strlen = UnicodeUtils.strlen;\r\n/**\r\n * Convert to UTF-8 character counts for storage.\r\n */\r\n\r\nfunction encodeEntityRanges(block, storageMap) {\r\n  var encoded = [];\r\n  block.findEntityRanges(function (character) {\r\n    return !!character.getEntity();\r\n  }, function (\r\n  /*number*/\r\n  start,\r\n  /*number*/\r\n  end) {\r\n    var text = block.getText();\r\n    var key = block.getEntityAt(start);\r\n    encoded.push({\r\n      offset: strlen(text.slice(0, start)),\r\n      length: strlen(text.slice(start, end)),\r\n      // Encode the key as a number for range storage.\r\n      key: Number(storageMap[DraftStringKey.stringify(key)])\r\n    });\r\n  });\r\n  return encoded;\r\n}\r\n\r\nmodule.exports = encodeEntityRanges;"]},"metadata":{},"sourceType":"script"}