{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { fetchPosts } from './../../Actions/index.jsx';\nexport default function InfiniteScrolling(pageNumber) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [hasMore, setHasMore] = useState(false);\n  const dispatch = useDispatch();\n  let cancel;\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    getPostNewFeed();\n    return () => cancel();\n  }, [pageNumber]);\n\n  const getPostNewFeed = () => {\n    axios({\n      method: 'GET',\n      url: \"/api/auth/get-post-home\",\n      params: {\n        page: pageNumber\n      },\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      dispatch(fetchPosts(res.data.data));\n      setHasMore(res.data.last_page > res.data.current_page);\n      setLoading(false);\n    }).catch(e => {\n      if (axios.isCancel(e)) return;\n      setError(true);\n    });\n  };\n\n  return {\n    loading,\n    error,\n    hasMore\n  };\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/NewFeed/InfiniteScrolling.jsx"],"names":["React","useEffect","useState","axios","useDispatch","fetchPosts","InfiniteScrolling","pageNumber","loading","setLoading","error","setError","hasMore","setHasMore","dispatch","cancel","getPostNewFeed","method","url","params","page","cancelToken","CancelToken","c","then","res","data","last_page","current_page","catch","e","isCancel"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA,eAAe,SAASC,iBAAT,CAA2BC,UAA3B,EAAsC;AACnD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMY,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAIW,MAAJ;AAEAd,EAAAA,SAAS,CAAC,MAAM;AAEdQ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAK,IAAAA,cAAc;AAEd,WAAO,MAAMD,MAAM,EAAnB;AACD,GAPQ,EAON,CAACR,UAAD,CAPM,CAAT;;AASA,QAAMS,cAAc,GAAG,MAAM;AAE3Bb,IAAAA,KAAK,CAAC;AACJc,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE,yBAFD;AAGJC,MAAAA,MAAM,EAAE;AAACC,QAAAA,IAAI,EAAGb;AAAR,OAHJ;AAIJc,MAAAA,WAAW,EAAG,IAAIlB,KAAK,CAACmB,WAAV,CAAsBC,CAAC,IAAIR,MAAM,GAAGQ,CAApC;AAJV,KAAD,CAAL,CAMCC,IAND,CAMMC,GAAG,IAAG;AACVX,MAAAA,QAAQ,CAACT,UAAU,CAACoB,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAX,CAAR;AACAb,MAAAA,UAAU,CAACY,GAAG,CAACC,IAAJ,CAASC,SAAT,GAAqBF,GAAG,CAACC,IAAJ,CAASE,YAA/B,CAAV;AACAnB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD,EAWCoB,KAXD,CAWOC,CAAC,IAAI;AACV,UAAG3B,KAAK,CAAC4B,QAAN,CAAeD,CAAf,CAAH,EAAsB;AACtBnB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAdD;AAeD,GAjBD;;AAmBE,SAAO;AAAEH,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA;AAAlB,GAAP;AACH","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {useDispatch} from 'react-redux';\r\nimport { fetchPosts } from './../../Actions/index.jsx';\r\n\r\nexport default function InfiniteScrolling(pageNumber){\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(false)\r\n  const [hasMore, setHasMore] = useState(false)\r\n  const dispatch = useDispatch();\r\n  let cancel\r\n\r\n  useEffect(() => {\r\n\r\n    setLoading(true)\r\n    setError(false)\r\n    getPostNewFeed()\r\n\r\n    return () => cancel()\r\n  }, [pageNumber])\r\n\r\n  const getPostNewFeed = () => {\r\n\r\n    axios({\r\n      method: 'GET',\r\n      url: \"/api/auth/get-post-home\",\r\n      params: {page : pageNumber},\r\n      cancelToken : new axios.CancelToken(c => cancel = c)\r\n    })\r\n    .then(res =>{\r\n      dispatch(fetchPosts(res.data.data))\r\n      setHasMore(res.data.last_page > res.data.current_page)\r\n      setLoading(false)\r\n    })\r\n    .catch(e => {\r\n      if(axios.isCancel(e)) return\r\n      setError(true)\r\n    })\r\n  }\r\n\r\n    return { loading, error, hasMore }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}