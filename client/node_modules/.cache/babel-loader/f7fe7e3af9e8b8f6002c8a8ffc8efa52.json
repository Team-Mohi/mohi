{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\PresentialModal\\\\ModalUpLoadAvatarProfile.jsx\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Cropper from 'cropperjs';\nimport 'cropperjs/dist/cropper.css';\nimport { toggleStatusPresentialModal } from './../../Actions/index.jsx';\nimport { responseUpdateAvatar } from './../../Actions/index.jsx';\nimport { requestUpdateAvatar } from './../../Actions/index.jsx';\nimport axios from 'axios';\n\nfunction ModalUpLoadAvatarProfile({\n  presentialModal\n}) {\n  const {\n    data\n  } = useSelector(state => state.presentialModal);\n  const refCropper = useRef();\n  const dispatch = useDispatch();\n  const [imageX, setImageX] = useState();\n  const [imageY, setImageY] = useState();\n  const [imageW, setImageW] = useState();\n  const [imageH, setImageH] = useState();\n  useEffect(() => {\n    const current = refCropper.current;\n    const cropper = new Cropper(current, {\n      aspectRatio: 1,\n      zoomable: false,\n      scalable: false,\n\n      crop(event) {\n        setImageX(event.detail.x);\n        setImageY(event.detail.y);\n        setImageW(event.detail.width);\n        setImageH(event.detail.height);\n      }\n\n    });\n  }, []);\n\n  const saveAvatar = () => {\n    dispatch(requestUpdateAvatar());\n    const formData = new FormData();\n    formData.append('upload_preset', 'mohi_video');\n    formData.append('file', data);\n    upload(formData);\n  };\n\n  const upload = async formData => {\n    await axios.post('/v1_1/mohi-vn/upload', formData).then(res => {\n      axios.post('https://www.api.mohi.vn/api/auth/update-info-profile', {\n        user_avatar: res.data.public_id,\n        user_avatar_cropX: imageX,\n        user_avatar_cropY: imageY,\n        user_avatar_cropW: imageW,\n        user_avatar_cropH: imageH\n      }).then(res => {\n        dispatch(responseUpdateAvatar({\n          user_avatar: res.data.public_id,\n          user_avatar_cropX: imageX,\n          user_avatar_cropY: imageY,\n          user_avatar_cropW: imageW,\n          user_avatar_cropH: imageH\n        }));\n      }).then(dispatch(toggleStatusPresentialModal()));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-custom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-cropper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: URL.createObjectURL(data),\n    ref: refCropper,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"action-cropper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => saveAvatar(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"L\\u01B0u\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(toggleStatusPresentialModal()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"H\\u1EE7y\"))));\n}\n\nexport default ModalUpLoadAvatarProfile;","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/PresentialModal/ModalUpLoadAvatarProfile.jsx"],"names":["React","useRef","useEffect","useState","useSelector","useDispatch","Cropper","toggleStatusPresentialModal","responseUpdateAvatar","requestUpdateAvatar","axios","ModalUpLoadAvatarProfile","presentialModal","data","state","refCropper","dispatch","imageX","setImageX","imageY","setImageY","imageW","setImageW","imageH","setImageH","current","cropper","aspectRatio","zoomable","scalable","crop","event","detail","x","y","width","height","saveAvatar","formData","FormData","append","upload","post","then","res","user_avatar","public_id","user_avatar_cropX","user_avatar_cropY","user_avatar_cropW","user_avatar_cropH","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport Cropper from 'cropperjs';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport {toggleStatusPresentialModal} from './../../Actions/index.jsx';\r\nimport {responseUpdateAvatar} from './../../Actions/index.jsx';\r\nimport {requestUpdateAvatar} from './../../Actions/index.jsx';\r\nimport axios from 'axios';\r\n\r\nfunction ModalUpLoadAvatarProfile({presentialModal}){\r\n  const {data} = useSelector(state => state.presentialModal);\r\n  const refCropper = useRef();\r\n  const dispatch = useDispatch();\r\n  const [imageX, setImageX] = useState();\r\n  const [imageY, setImageY] = useState();\r\n  const [imageW, setImageW] = useState();\r\n  const [imageH, setImageH] = useState();\r\n\r\n  useEffect(() => {\r\n    const current = refCropper.current;\r\n    const cropper = new Cropper(current, {\r\n      aspectRatio: 1,\r\n      zoomable: false,\r\n      scalable: false,\r\n      crop(event) {\r\n        setImageX(event.detail.x)\r\n        setImageY(event.detail.y)\r\n        setImageW(event.detail.width)\r\n        setImageH(event.detail.height)\r\n      },\r\n    });\r\n  }, [])\r\n\r\n  const saveAvatar = () => {\r\n    dispatch(requestUpdateAvatar())\r\n\r\n    const formData = new FormData();\r\n    formData.append('upload_preset', 'mohi_video');\r\n    formData.append('file', data);\r\n    upload(formData)\r\n  }\r\n\r\n  const upload = async (formData) => {\r\n    await axios.post('/v1_1/mohi-vn/upload', formData)\r\n    .then((res) => {\r\n      axios.post('https://www.api.mohi.vn/api/auth/update-info-profile', {\r\n        user_avatar: res.data.public_id,\r\n        user_avatar_cropX: imageX,\r\n        user_avatar_cropY: imageY,\r\n        user_avatar_cropW: imageW,\r\n        user_avatar_cropH: imageH,\r\n      }).then((res) => {\r\n        dispatch(responseUpdateAvatar({\r\n          user_avatar: res.data.public_id,\r\n          user_avatar_cropX: imageX,\r\n          user_avatar_cropY: imageY,\r\n          user_avatar_cropW: imageW,\r\n          user_avatar_cropH: imageH,\r\n        }))\r\n      })\r\n      .then(dispatch(toggleStatusPresentialModal()))\r\n    })\r\n  }\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <div className=\"modal-custom\">\r\n        <div className=\"image-cropper\">\r\n          <img src={URL.createObjectURL(data)} ref={refCropper} alt=\"\" />\r\n        </div>\r\n        <div className=\"action-cropper\">\r\n          <button onClick={() => saveAvatar()}>Lưu</button>\r\n          <button onClick={() => dispatch(toggleStatusPresentialModal())}>Hủy</button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ModalUpLoadAvatarProfile;\r\n"]},"metadata":{},"sourceType":"module"}