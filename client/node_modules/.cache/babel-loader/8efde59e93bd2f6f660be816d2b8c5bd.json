{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\n/**\r\n * Usage note:\r\n * This module makes a best effort to export the same data we would internally.\r\n * At Facebook we use a server-generated module that does the parsing and\r\n * exports the data for the client to use. We can't rely on a server-side\r\n * implementation in open source so instead we make use of an open source\r\n * library to do the heavy lifting and then make some adjustments as necessary.\r\n * It's likely there will be some differences. Some we can smooth over.\r\n * Others are going to be harder.\r\n */\n'use strict';\n\nvar UAParser = require(\"ua-parser-js\");\n\nvar UNKNOWN = 'Unknown';\nvar PLATFORM_MAP = {\n  'Mac OS': 'Mac OS X'\n};\n/**\r\n * Convert from UAParser platform name to what we expect.\r\n */\n\nfunction convertPlatformName(name) {\n  return PLATFORM_MAP[name] || name;\n}\n/**\r\n * Get the version number in parts. This is very naive. We actually get major\r\n * version as a part of UAParser already, which is generally good enough, but\r\n * let's get the minor just in case.\r\n */\n\n\nfunction getBrowserVersion(version) {\n  if (!version) {\n    return {\n      major: '',\n      minor: ''\n    };\n  }\n\n  var parts = version.split('.');\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n/**\r\n * Get the UA data fom UAParser and then convert it to the format we're\r\n * expecting for our APIS.\r\n */\n\n\nvar parser = new UAParser();\nvar results = parser.getResult(); // Do some conversion first.\n\nvar browserVersionData = getBrowserVersion(results.browser.version);\nvar uaData = {\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\n  browserFullVersion: results.browser.version || UNKNOWN,\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\n  browserName: results.browser.name || UNKNOWN,\n  browserVersion: results.browser.major || UNKNOWN,\n  deviceName: results.device.model || UNKNOWN,\n  engineName: results.engine.name || UNKNOWN,\n  engineVersion: results.engine.version || UNKNOWN,\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\n  platformVersion: results.os.version || UNKNOWN,\n  platformFullVersion: results.os.version || UNKNOWN\n};\nmodule.exports = uaData;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/fbjs/lib/UserAgentData.js"],"names":["UAParser","require","UNKNOWN","PLATFORM_MAP","convertPlatformName","name","getBrowserVersion","version","major","minor","parts","split","parser","results","getResult","browserVersionData","browser","uaData","browserArchitecture","cpu","architecture","browserFullVersion","browserMinorVersion","browserName","browserVersion","deviceName","device","model","engineName","engine","engineVersion","platformArchitecture","platformName","os","platformVersion","platformFullVersion","module","exports"],"mappings":"AAAA;;;;;;;;AAQA;;;;;;;;;;AAUA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AAEA,IAAIC,OAAO,GAAG,SAAd;AACA,IAAIC,YAAY,GAAG;AACjB,YAAU;AADO,CAAnB;AAGA;;;;AAIA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,SAAOF,YAAY,CAACE,IAAD,CAAZ,IAAsBA,IAA7B;AACD;AACD;;;;;;;AAOA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO;AACLC,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;;AAED,MAAIC,KAAK,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAZ;AACA,SAAO;AACLH,IAAAA,KAAK,EAAEE,KAAK,CAAC,CAAD,CADP;AAELD,IAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD;AAFP,GAAP;AAID;AACD;;;;;;AAMA,IAAIE,MAAM,GAAG,IAAIZ,QAAJ,EAAb;AACA,IAAIa,OAAO,GAAGD,MAAM,CAACE,SAAP,EAAd,C,CAAkC;;AAElC,IAAIC,kBAAkB,GAAGT,iBAAiB,CAACO,OAAO,CAACG,OAAR,CAAgBT,OAAjB,CAA1C;AACA,IAAIU,MAAM,GAAG;AACXC,EAAAA,mBAAmB,EAAEL,OAAO,CAACM,GAAR,CAAYC,YAAZ,IAA4BlB,OADtC;AAEXmB,EAAAA,kBAAkB,EAAER,OAAO,CAACG,OAAR,CAAgBT,OAAhB,IAA2BL,OAFpC;AAGXoB,EAAAA,mBAAmB,EAAEP,kBAAkB,CAACN,KAAnB,IAA4BP,OAHtC;AAIXqB,EAAAA,WAAW,EAAEV,OAAO,CAACG,OAAR,CAAgBX,IAAhB,IAAwBH,OAJ1B;AAKXsB,EAAAA,cAAc,EAAEX,OAAO,CAACG,OAAR,CAAgBR,KAAhB,IAAyBN,OAL9B;AAMXuB,EAAAA,UAAU,EAAEZ,OAAO,CAACa,MAAR,CAAeC,KAAf,IAAwBzB,OANzB;AAOX0B,EAAAA,UAAU,EAAEf,OAAO,CAACgB,MAAR,CAAexB,IAAf,IAAuBH,OAPxB;AAQX4B,EAAAA,aAAa,EAAEjB,OAAO,CAACgB,MAAR,CAAetB,OAAf,IAA0BL,OAR9B;AASX6B,EAAAA,oBAAoB,EAAElB,OAAO,CAACM,GAAR,CAAYC,YAAZ,IAA4BlB,OATvC;AAUX8B,EAAAA,YAAY,EAAE5B,mBAAmB,CAACS,OAAO,CAACoB,EAAR,CAAW5B,IAAZ,CAAnB,IAAwCH,OAV3C;AAWXgC,EAAAA,eAAe,EAAErB,OAAO,CAACoB,EAAR,CAAW1B,OAAX,IAAsBL,OAX5B;AAYXiC,EAAAA,mBAAmB,EAAEtB,OAAO,CAACoB,EAAR,CAAW1B,OAAX,IAAsBL;AAZhC,CAAb;AAcAkC,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n/**\r\n * Usage note:\r\n * This module makes a best effort to export the same data we would internally.\r\n * At Facebook we use a server-generated module that does the parsing and\r\n * exports the data for the client to use. We can't rely on a server-side\r\n * implementation in open source so instead we make use of an open source\r\n * library to do the heavy lifting and then make some adjustments as necessary.\r\n * It's likely there will be some differences. Some we can smooth over.\r\n * Others are going to be harder.\r\n */\r\n'use strict';\r\n\r\nvar UAParser = require(\"ua-parser-js\");\r\n\r\nvar UNKNOWN = 'Unknown';\r\nvar PLATFORM_MAP = {\r\n  'Mac OS': 'Mac OS X'\r\n};\r\n/**\r\n * Convert from UAParser platform name to what we expect.\r\n */\r\n\r\nfunction convertPlatformName(name) {\r\n  return PLATFORM_MAP[name] || name;\r\n}\r\n/**\r\n * Get the version number in parts. This is very naive. We actually get major\r\n * version as a part of UAParser already, which is generally good enough, but\r\n * let's get the minor just in case.\r\n */\r\n\r\n\r\nfunction getBrowserVersion(version) {\r\n  if (!version) {\r\n    return {\r\n      major: '',\r\n      minor: ''\r\n    };\r\n  }\r\n\r\n  var parts = version.split('.');\r\n  return {\r\n    major: parts[0],\r\n    minor: parts[1]\r\n  };\r\n}\r\n/**\r\n * Get the UA data fom UAParser and then convert it to the format we're\r\n * expecting for our APIS.\r\n */\r\n\r\n\r\nvar parser = new UAParser();\r\nvar results = parser.getResult(); // Do some conversion first.\r\n\r\nvar browserVersionData = getBrowserVersion(results.browser.version);\r\nvar uaData = {\r\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\r\n  browserFullVersion: results.browser.version || UNKNOWN,\r\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\r\n  browserName: results.browser.name || UNKNOWN,\r\n  browserVersion: results.browser.major || UNKNOWN,\r\n  deviceName: results.device.model || UNKNOWN,\r\n  engineName: results.engine.name || UNKNOWN,\r\n  engineVersion: results.engine.version || UNKNOWN,\r\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\r\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\r\n  platformVersion: results.os.version || UNKNOWN,\r\n  platformFullVersion: results.os.version || UNKNOWN\r\n};\r\nmodule.exports = uaData;"]},"metadata":{},"sourceType":"script"}