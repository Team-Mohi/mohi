{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar EditorState = require(\"./EditorState\");\n\nvar UnicodeUtils = require(\"fbjs/lib/UnicodeUtils\");\n\nvar moveSelectionBackward = require(\"./moveSelectionBackward\");\n\nvar removeTextWithStrategy = require(\"./removeTextWithStrategy\");\n/**\r\n * Remove the selected range. If the cursor is collapsed, remove the preceding\r\n * character. This operation is Unicode-aware, so removing a single character\r\n * will remove a surrogate pair properly as well.\r\n */\n\n\nfunction keyCommandPlainBackspace(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var content = strategyState.getCurrentContent();\n    var key = selection.getAnchorKey();\n    var offset = selection.getAnchorOffset();\n    var charBehind = content.getBlockForKey(key).getText()[offset - 1];\n    return moveSelectionBackward(strategyState, charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1);\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  var selection = editorState.getSelection();\n  return EditorState.push(editorState, afterRemoval.set('selectionBefore', selection), selection.isCollapsed() ? 'backspace-character' : 'remove-range');\n}\n\nmodule.exports = keyCommandPlainBackspace;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/draft-js/lib/keyCommandPlainBackspace.js"],"names":["EditorState","require","UnicodeUtils","moveSelectionBackward","removeTextWithStrategy","keyCommandPlainBackspace","editorState","afterRemoval","strategyState","selection","getSelection","content","getCurrentContent","key","getAnchorKey","offset","getAnchorOffset","charBehind","getBlockForKey","getText","getUTF16Length","push","set","isCollapsed","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,uBAAD,CAA1B;;AAEA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,0BAAD,CAApC;AACA;;;;;;;AAOA,SAASI,wBAAT,CAAkCC,WAAlC,EAA+C;AAC7C,MAAIC,YAAY,GAAGH,sBAAsB,CAACE,WAAD,EAAc,UAAUE,aAAV,EAAyB;AAC9E,QAAIC,SAAS,GAAGD,aAAa,CAACE,YAAd,EAAhB;AACA,QAAIC,OAAO,GAAGH,aAAa,CAACI,iBAAd,EAAd;AACA,QAAIC,GAAG,GAAGJ,SAAS,CAACK,YAAV,EAAV;AACA,QAAIC,MAAM,GAAGN,SAAS,CAACO,eAAV,EAAb;AACA,QAAIC,UAAU,GAAGN,OAAO,CAACO,cAAR,CAAuBL,GAAvB,EAA4BM,OAA5B,GAAsCJ,MAAM,GAAG,CAA/C,CAAjB;AACA,WAAOZ,qBAAqB,CAACK,aAAD,EAAgBS,UAAU,GAAGf,YAAY,CAACkB,cAAb,CAA4BH,UAA5B,EAAwC,CAAxC,CAAH,GAAgD,CAA1E,CAA5B;AACD,GAPwC,EAOtC,UAPsC,CAAzC;;AASA,MAAIV,YAAY,KAAKD,WAAW,CAACM,iBAAZ,EAArB,EAAsD;AACpD,WAAON,WAAP;AACD;;AAED,MAAIG,SAAS,GAAGH,WAAW,CAACI,YAAZ,EAAhB;AACA,SAAOV,WAAW,CAACqB,IAAZ,CAAiBf,WAAjB,EAA8BC,YAAY,CAACe,GAAb,CAAiB,iBAAjB,EAAoCb,SAApC,CAA9B,EAA8EA,SAAS,CAACc,WAAV,KAA0B,qBAA1B,GAAkD,cAAhI,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBpB,wBAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar EditorState = require(\"./EditorState\");\r\n\r\nvar UnicodeUtils = require(\"fbjs/lib/UnicodeUtils\");\r\n\r\nvar moveSelectionBackward = require(\"./moveSelectionBackward\");\r\n\r\nvar removeTextWithStrategy = require(\"./removeTextWithStrategy\");\r\n/**\r\n * Remove the selected range. If the cursor is collapsed, remove the preceding\r\n * character. This operation is Unicode-aware, so removing a single character\r\n * will remove a surrogate pair properly as well.\r\n */\r\n\r\n\r\nfunction keyCommandPlainBackspace(editorState) {\r\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\r\n    var selection = strategyState.getSelection();\r\n    var content = strategyState.getCurrentContent();\r\n    var key = selection.getAnchorKey();\r\n    var offset = selection.getAnchorOffset();\r\n    var charBehind = content.getBlockForKey(key).getText()[offset - 1];\r\n    return moveSelectionBackward(strategyState, charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1);\r\n  }, 'backward');\r\n\r\n  if (afterRemoval === editorState.getCurrentContent()) {\r\n    return editorState;\r\n  }\r\n\r\n  var selection = editorState.getSelection();\r\n  return EditorState.push(editorState, afterRemoval.set('selectionBefore', selection), selection.isCollapsed() ? 'backspace-character' : 'remove-range');\r\n}\r\n\r\nmodule.exports = keyCommandPlainBackspace;"]},"metadata":{},"sourceType":"script"}