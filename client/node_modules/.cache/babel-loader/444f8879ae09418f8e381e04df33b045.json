{"ast":null,"code":"import { Class, Util } from 'leaflet';\nimport { cors } from '../Support';\nimport { cleanUrl, getUrlParams } from '../Util';\nimport Request from '../Request';\nexport var Task = Class.extend({\n  options: {\n    proxy: false,\n    useCors: cors\n  },\n  // Generate a method for each methodName:paramName in the setters for this task.\n  generateSetter: function (param, context) {\n    return Util.bind(function (value) {\n      this.params[param] = value;\n      return this;\n    }, context);\n  },\n  initialize: function (endpoint) {\n    // endpoint can be either a url (and options) for an ArcGIS Rest Service or an instance of EsriLeaflet.Service\n    if (endpoint.request && endpoint.options) {\n      this._service = endpoint;\n      Util.setOptions(this, endpoint.options);\n    } else {\n      Util.setOptions(this, endpoint);\n      this.options.url = cleanUrl(endpoint.url);\n    } // clone default params into this object\n\n\n    this.params = Util.extend({}, this.params || {}); // generate setter methods based on the setters object implimented a child class\n\n    if (this.setters) {\n      for (var setter in this.setters) {\n        var param = this.setters[setter];\n        this[setter] = this.generateSetter(param, this);\n      }\n    }\n  },\n  token: function (token) {\n    if (this._service) {\n      this._service.authenticate(token);\n    } else {\n      this.params.token = token;\n    }\n\n    return this;\n  },\n  // ArcGIS Server Find/Identify 10.5+\n  format: function (boolean) {\n    // use double negative to expose a more intuitive positive method name\n    this.params.returnUnformattedValues = !boolean;\n    return this;\n  },\n  request: function (callback, context) {\n    if (this.options.requestParams) {\n      Util.extend(this.params, this.options.requestParams);\n    }\n\n    if (this._service) {\n      return this._service.request(this.path, this.params, callback, context);\n    }\n\n    return this._request('request', this.path, this.params, callback, context);\n  },\n  _request: function (method, path, params, callback, context) {\n    var url = this.options.proxy ? this.options.proxy + '?' + this.options.url + path : this.options.url + path;\n\n    if ((method === 'get' || method === 'request') && !this.options.useCors) {\n      return Request.get.JSONP(url, params, callback, context);\n    }\n\n    return Request[method](url, params, callback, context);\n  }\n});\nexport function task(options) {\n  options = getUrlParams(options);\n  return new Task(options);\n}\nexport default task;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/esri-leaflet/src/Tasks/Task.js"],"names":["Class","Util","cors","cleanUrl","getUrlParams","Request","Task","extend","options","proxy","useCors","generateSetter","param","context","bind","value","params","initialize","endpoint","request","_service","setOptions","url","setters","setter","token","authenticate","format","boolean","returnUnformattedValues","callback","requestParams","path","_request","method","get","JSONP","task"],"mappings":"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","sourcesContent":["import { Class, Util } from 'leaflet';\r\nimport {cors} from '../Support';\r\nimport { cleanUrl, getUrlParams } from '../Util';\r\nimport Request from '../Request';\r\n\r\nexport var Task = Class.extend({\r\n\r\n  options: {\r\n    proxy: false,\r\n    useCors: cors\r\n  },\r\n\r\n  // Generate a method for each methodName:paramName in the setters for this task.\r\n  generateSetter: function (param, context) {\r\n    return Util.bind(function (value) {\r\n      this.params[param] = value;\r\n      return this;\r\n    }, context);\r\n  },\r\n\r\n  initialize: function (endpoint) {\r\n    // endpoint can be either a url (and options) for an ArcGIS Rest Service or an instance of EsriLeaflet.Service\r\n    if (endpoint.request && endpoint.options) {\r\n      this._service = endpoint;\r\n      Util.setOptions(this, endpoint.options);\r\n    } else {\r\n      Util.setOptions(this, endpoint);\r\n      this.options.url = cleanUrl(endpoint.url);\r\n    }\r\n\r\n    // clone default params into this object\r\n    this.params = Util.extend({}, this.params || {});\r\n\r\n    // generate setter methods based on the setters object implimented a child class\r\n    if (this.setters) {\r\n      for (var setter in this.setters) {\r\n        var param = this.setters[setter];\r\n        this[setter] = this.generateSetter(param, this);\r\n      }\r\n    }\r\n  },\r\n\r\n  token: function (token) {\r\n    if (this._service) {\r\n      this._service.authenticate(token);\r\n    } else {\r\n      this.params.token = token;\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // ArcGIS Server Find/Identify 10.5+\r\n  format: function (boolean) {\r\n    // use double negative to expose a more intuitive positive method name\r\n    this.params.returnUnformattedValues = !boolean;\r\n    return this;\r\n  },\r\n\r\n  request: function (callback, context) {\r\n    if (this.options.requestParams) {\r\n      Util.extend(this.params, this.options.requestParams);\r\n    }\r\n    if (this._service) {\r\n      return this._service.request(this.path, this.params, callback, context);\r\n    }\r\n\r\n    return this._request('request', this.path, this.params, callback, context);\r\n  },\r\n\r\n  _request: function (method, path, params, callback, context) {\r\n    var url = (this.options.proxy) ? this.options.proxy + '?' + this.options.url + path : this.options.url + path;\r\n\r\n    if ((method === 'get' || method === 'request') && !this.options.useCors) {\r\n      return Request.get.JSONP(url, params, callback, context);\r\n    }\r\n\r\n    return Request[method](url, params, callback, context);\r\n  }\r\n});\r\n\r\nexport function task (options) {\r\n  options = getUrlParams(options);\r\n  return new Task(options);\r\n}\r\n\r\nexport default task;\r\n"]},"metadata":{},"sourceType":"module"}