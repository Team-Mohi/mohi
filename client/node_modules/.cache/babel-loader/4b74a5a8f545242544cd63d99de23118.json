{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\nconst token = JSON.parse(localStorage.getItem('ustk')).access_token;\nexport const interceptorAxios = token => {\n  axios.interceptors.request.use(config => {\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    return config;\n  }, error => {\n    Promise.reject(error);\n  });\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      return new Promise(async (resolve, reject) => {\n        await axios.post(API_REFRESH_TOKEN, {\n          'token': token\n        }).then(res => {\n          if (res.status === 200) {\n            localStorage.setItem('ustk', JSON.stringify(res.data));\n            const new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\n            console.log(new_token);\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\n            originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n            resolve(axios(originalRequest));\n          }\n        });\n      });\n    }\n\n    return Promise.reject(error);\n  });\n};","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","token","JSON","parse","localStorage","getItem","access_token","interceptorAxios","interceptors","request","use","config","headers","error","Promise","reject","response","originalRequest","status","_retry","resolve","post","then","res","setItem","stringify","data","new_token","console","log","defaults","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,YAAvD;AAEA,OAAO,MAAMC,gBAAgB,GAAIN,KAAD,IAAW;AACzCF,EAAAA,KAAK,CAACS,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAM,IAAI;AACN,QAAIV,KAAJ,EAAW;AACPU,MAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,YAAYX,KAA9C;AACH;;AACD,WAAOU,MAAP;AACH,GANJ,EAOGE,KAAK,IAAI;AACLC,IAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACL,GATF;AAYAd,EAAAA,KAAK,CAACS,YAAN,CAAmBQ,QAAnB,CAA4BN,GAA5B,CAAiCM,QAAD,IAAc;AAC3C,WAAOA,QAAP;AACF,GAFD,EAGA,UAAUH,KAAV,EAAiB;AACd,UAAMI,eAAe,GAAGJ,KAAK,CAACF,MAA9B;;AACA,QAAIE,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAE1DF,MAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACA,aAAO,IAAIL,OAAJ,CAAY,OAAOM,OAAP,EAAgBL,MAAhB,KAA2B;AAC3C,cAAMhB,KAAK,CAACsB,IAAN,CAAWrB,iBAAX,EACH;AACI,mBAAUC;AADd,SADG,EAIFqB,IAJE,CAIIC,GAAD,IAAS;AACX,cAAIA,GAAG,CAACL,MAAJ,KAAe,GAAnB,EAAwB;AACpBd,YAAAA,YAAY,CAACoB,OAAb,CAAqB,MAArB,EAA6BtB,IAAI,CAACuB,SAAL,CAAeF,GAAG,CAACG,IAAnB,CAA7B;AACA,kBAAMC,SAAS,GAAGzB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,YAA3D;AACAsB,YAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA5B,YAAAA,KAAK,CAAC+B,QAAN,CAAelB,OAAf,CAAuBmB,MAAvB,CAA8B,eAA9B,IAAiD,YAAYJ,SAA7D;AACAV,YAAAA,eAAe,CAACL,OAAhB,CAAwB,eAAxB,IAA2C,YAAYe,SAAvD;AACAP,YAAAA,OAAO,CAACrB,KAAK,CAACkB,eAAD,CAAN,CAAP;AACH;AACJ,SAbE,CAAN;AAcD,OAfK,CAAP;AAgBH;;AACD,WAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,GA1BD;AA2BD,CAxCM","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\nconst token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n\r\nexport const interceptorAxios = (token) => {\r\n  axios.interceptors.request.use(\r\n     config => {\r\n         if (token) {\r\n             config.headers['Authorization'] = 'Bearer ' + token;\r\n         }\r\n         return config;\r\n     },\r\n     error => {\r\n         Promise.reject(error)\r\n   });\r\n\r\n\r\n  axios.interceptors.response.use((response) => {\r\n     return response\r\n  },\r\n  function (error) {\r\n     const originalRequest = error.config;\r\n     if (error.response.status === 401 && !originalRequest._retry) {\r\n\r\n         originalRequest._retry = true;\r\n         return new Promise(async (resolve, reject) => {\r\n            await axios.post(API_REFRESH_TOKEN,\r\n               {\r\n                   'token' : token\r\n               })\r\n               .then((res) => {\r\n                   if (res.status === 200) {\r\n                       localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                       const new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n                       console.log(new_token);\r\n                       axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\r\n                       originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                       resolve(axios(originalRequest));\r\n                   }\r\n               })\r\n          })\r\n     }\r\n     return Promise.reject(error);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}