{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\nexport const interceptorAxios = token => {\n  axios.interceptors.request.use(config => {\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    return config;\n  }, error => {\n    Promise.reject(error);\n  });\n  let isRefreshing = false;\n  let failedQueue = [];\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error);\n      } else {\n        prom.resolve(token);\n      }\n    });\n    failedQueue = [];\n  };\n\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        return new Promise(function (resolve, reject) {\n          failedQueue.push({\n            resolve,\n            reject\n          });\n        }).then(token => {\n          console.log(token);\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return axios(originalRequest);\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      }\n\n      originalRequest._retry = true;\n      isRefreshing = true;\n      return new Promise(async (resolve, reject) => {\n        await axios.post(API_REFRESH_TOKEN, {\n          'token': token\n        }).then(res => {\n          if (res.status === 200) {\n            console.log(res.data.access_token);\n            localStorage.setItem('ustk', JSON.stringify(res.data));\n            processQueue(null, res.data.access_token);\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + res.data.access_token;\n            originalRequest.headers['Authorization'] = 'Bearer ' + res.data.access_token;\n            resolve(axios(originalRequest));\n          }\n        }).then(() => {\n          isRefreshing = false;\n        });\n      });\n    }\n\n    return Promise.reject(error);\n  });\n};","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","interceptorAxios","token","interceptors","request","use","config","headers","error","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","originalRequest","status","_retry","push","then","console","log","catch","err","post","res","data","access_token","localStorage","setItem","JSON","stringify","defaults","common"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\nexport const interceptorAxios = (token) => {\r\n  axios.interceptors.request.use(\r\n     config => {\r\n         if (token) {\r\n             config.headers['Authorization'] = 'Bearer ' + token;\r\n         }\r\n         return config;\r\n     },\r\n     error => {\r\n         Promise.reject(error)\r\n   });\r\n\r\n   let isRefreshing = false;\r\n   let failedQueue = [];\r\n\r\n   const processQueue = (error, token = null) => {\r\n     failedQueue.forEach(prom => {\r\n       if (error) {\r\n         prom.reject(error);\r\n       } else {\r\n         prom.resolve(token);\r\n       }\r\n     })\r\n\r\n     failedQueue = [];\r\n   }\r\n\r\n  axios.interceptors.response.use((response) => {\r\n     return response\r\n  },\r\n  function (error) {\r\n     const originalRequest = error.config;\r\n     if (error.response.status === 401 && !originalRequest._retry) {\r\n\r\n       if (isRefreshing) {\r\n          return new Promise(function(resolve, reject) {\r\n            failedQueue.push({resolve, reject})\r\n          }).then(token => {\r\n            console.log(token);\r\n            originalRequest.headers['Authorization'] = 'Bearer ' + token;\r\n            return axios(originalRequest);\r\n          }).catch(err => {\r\n            return Promise.reject(err);\r\n          })\r\n        }\r\n\r\n         originalRequest._retry = true;\r\n         isRefreshing = true;\r\n         return new Promise(async (resolve, reject) => {\r\n           await axios.post(API_REFRESH_TOKEN,\r\n               {\r\n                   'token' : token\r\n               })\r\n               .then((res) => {\r\n                   if (res.status === 200) {\r\n                     console.log(res.data.access_token);\r\n                       localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                       processQueue(null, res.data.access_token);\r\n                       axios.defaults.headers.common['Authorization'] = 'Bearer ' + res.data.access_token;\r\n                       originalRequest.headers['Authorization'] = 'Bearer ' + res.data.access_token;\r\n                       resolve(axios(originalRequest));\r\n                   }\r\n               })\r\n               .then(() => { isRefreshing = false })\r\n          })\r\n     }\r\n     return Promise.reject(error);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}