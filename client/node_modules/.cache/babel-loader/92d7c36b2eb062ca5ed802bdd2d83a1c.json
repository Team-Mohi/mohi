{"ast":null,"code":"import { Task } from './Task';\nimport { responseToFeatureCollection } from '../Util';\nexport var Find = Task.extend({\n  setters: {\n    // method name > param name\n    'contains': 'contains',\n    'text': 'searchText',\n    'fields': 'searchFields',\n    // denote an array or single string\n    'spatialReference': 'sr',\n    'sr': 'sr',\n    'layers': 'layers',\n    'returnGeometry': 'returnGeometry',\n    'maxAllowableOffset': 'maxAllowableOffset',\n    'precision': 'geometryPrecision',\n    'dynamicLayers': 'dynamicLayers',\n    'returnZ': 'returnZ',\n    'returnM': 'returnM',\n    'gdbVersion': 'gdbVersion',\n    // skipped implementing this (for now) because the REST service implementation isnt consistent between operations\n    // 'transform': 'datumTransformations',\n    'token': 'token'\n  },\n  path: 'find',\n  params: {\n    sr: 4326,\n    contains: true,\n    returnGeometry: true,\n    returnZ: true,\n    returnM: false\n  },\n  layerDefs: function (id, where) {\n    this.params.layerDefs = this.params.layerDefs ? this.params.layerDefs + ';' : '';\n    this.params.layerDefs += [id, where].join(':');\n    return this;\n  },\n  simplify: function (map, factor) {\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\n    this.params.maxAllowableOffset = mapWidth / map.getSize().y * factor;\n    return this;\n  },\n  run: function (callback, context) {\n    return this.request(function (error, response) {\n      callback.call(context, error, response && responseToFeatureCollection(response), response);\n    }, context);\n  }\n});\nexport function find(options) {\n  return new Find(options);\n}\nexport default find;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/esri-leaflet/src/Tasks/Find.js"],"names":["Task","responseToFeatureCollection","Find","extend","setters","path","params","sr","contains","returnGeometry","returnZ","returnM","layerDefs","id","where","join","simplify","map","factor","mapWidth","Math","abs","getBounds","getWest","getEast","maxAllowableOffset","getSize","y","run","callback","context","request","error","response","call","find","options"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,2BAAT,QAA4C,SAA5C;AAEA,OAAO,IAAIC,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAY;AAC5BC,EAAAA,OAAO,EAAE;AACP;AACA,gBAAY,UAFL;AAGP,YAAQ,YAHD;AAIP,cAAU,cAJH;AAImB;AAC1B,wBAAoB,IALb;AAMP,UAAM,IANC;AAOP,cAAU,QAPH;AAQP,sBAAkB,gBARX;AASP,0BAAsB,oBATf;AAUP,iBAAa,mBAVN;AAWP,qBAAiB,eAXV;AAYP,eAAW,SAZJ;AAaP,eAAW,SAbJ;AAcP,kBAAc,YAdP;AAeP;AACA;AACA,aAAS;AAjBF,GADmB;AAqB5BC,EAAAA,IAAI,EAAE,MArBsB;AAuB5BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,EAAE,EAAE,IADE;AAENC,IAAAA,QAAQ,EAAE,IAFJ;AAGNC,IAAAA,cAAc,EAAE,IAHV;AAINC,IAAAA,OAAO,EAAE,IAJH;AAKNC,IAAAA,OAAO,EAAE;AALH,GAvBoB;AA+B5BC,EAAAA,SAAS,EAAE,UAAUC,EAAV,EAAcC,KAAd,EAAqB;AAC9B,SAAKR,MAAL,CAAYM,SAAZ,GAAyB,KAAKN,MAAL,CAAYM,SAAb,GAA0B,KAAKN,MAAL,CAAYM,SAAZ,GAAwB,GAAlD,GAAwD,EAAhF;AACA,SAAKN,MAAL,CAAYM,SAAZ,IAA0B,CAACC,EAAD,EAAKC,KAAL,CAAD,CAAcC,IAAd,CAAmB,GAAnB,CAAzB;AACA,WAAO,IAAP;AACD,GAnC2B;AAqC5BC,EAAAA,QAAQ,EAAE,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC/B,QAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASJ,GAAG,CAACK,SAAJ,GAAgBC,OAAhB,KAA4BN,GAAG,CAACK,SAAJ,GAAgBE,OAAhB,EAArC,CAAf;AACA,SAAKlB,MAAL,CAAYmB,kBAAZ,GAAkCN,QAAQ,GAAGF,GAAG,CAACS,OAAJ,GAAcC,CAA1B,GAA+BT,MAAhE;AACA,WAAO,IAAP;AACD,GAzC2B;AA2C5BU,EAAAA,GAAG,EAAE,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AAChC,WAAO,KAAKC,OAAL,CAAa,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC7CJ,MAAAA,QAAQ,CAACK,IAAT,CAAcJ,OAAd,EAAuBE,KAAvB,EAA+BC,QAAQ,IAAIhC,2BAA2B,CAACgC,QAAD,CAAtE,EAAmFA,QAAnF;AACD,KAFM,EAEJH,OAFI,CAAP;AAGD;AA/C2B,CAAZ,CAAX;AAkDP,OAAO,SAASK,IAAT,CAAeC,OAAf,EAAwB;AAC7B,SAAO,IAAIlC,IAAJ,CAASkC,OAAT,CAAP;AACD;AAED,eAAeD,IAAf","sourcesContent":["import { Task } from './Task';\r\nimport { responseToFeatureCollection } from '../Util';\r\n\r\nexport var Find = Task.extend({\r\n  setters: {\r\n    // method name > param name\r\n    'contains': 'contains',\r\n    'text': 'searchText',\r\n    'fields': 'searchFields', // denote an array or single string\r\n    'spatialReference': 'sr',\r\n    'sr': 'sr',\r\n    'layers': 'layers',\r\n    'returnGeometry': 'returnGeometry',\r\n    'maxAllowableOffset': 'maxAllowableOffset',\r\n    'precision': 'geometryPrecision',\r\n    'dynamicLayers': 'dynamicLayers',\r\n    'returnZ': 'returnZ',\r\n    'returnM': 'returnM',\r\n    'gdbVersion': 'gdbVersion',\r\n    // skipped implementing this (for now) because the REST service implementation isnt consistent between operations\r\n    // 'transform': 'datumTransformations',\r\n    'token': 'token'\r\n  },\r\n\r\n  path: 'find',\r\n\r\n  params: {\r\n    sr: 4326,\r\n    contains: true,\r\n    returnGeometry: true,\r\n    returnZ: true,\r\n    returnM: false\r\n  },\r\n\r\n  layerDefs: function (id, where) {\r\n    this.params.layerDefs = (this.params.layerDefs) ? this.params.layerDefs + ';' : '';\r\n    this.params.layerDefs += ([id, where]).join(':');\r\n    return this;\r\n  },\r\n\r\n  simplify: function (map, factor) {\r\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\r\n    this.params.maxAllowableOffset = (mapWidth / map.getSize().y) * factor;\r\n    return this;\r\n  },\r\n\r\n  run: function (callback, context) {\r\n    return this.request(function (error, response) {\r\n      callback.call(context, error, (response && responseToFeatureCollection(response)), response);\r\n    }, context);\r\n  }\r\n});\r\n\r\nexport function find (options) {\r\n  return new Find(options);\r\n}\r\n\r\nexport default find;\r\n"]},"metadata":{},"sourceType":"module"}