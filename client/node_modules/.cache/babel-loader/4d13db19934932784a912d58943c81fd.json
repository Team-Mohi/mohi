{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    var _context$layerContain;\n\n    const container = (_context$layerContain = context.layerContainer) != null ? _context$layerContain : context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      container.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/@react-leaflet/core/esm/layer.js"],"names":["useEffect","useRef","useLeafletContext","useEventHandlers","useAttribution","map","attribution","attributionRef","updateAttribution","current","attributionControl","removeAttribution","addAttribution","useLayerLifecycle","element","context","addLayer","_context$layerContain","container","layerContainer","instance","removeLayer","createLayerHook","useElement","useLayer","props","elementRef","eventHandlers"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,WAA7B,EAA0C;AAC/C,QAAMC,cAAc,GAAGN,MAAM,CAACK,WAAD,CAA7B;AACAN,EAAAA,SAAS,CAAC,SAASQ,iBAAT,GAA6B;AACrC,QAAIF,WAAW,KAAKC,cAAc,CAACE,OAA/B,IAA0CJ,GAAG,CAACK,kBAAJ,IAA0B,IAAxE,EAA8E;AAC5E,UAAIH,cAAc,CAACE,OAAf,IAA0B,IAA9B,EAAoC;AAClCJ,QAAAA,GAAG,CAACK,kBAAJ,CAAuBC,iBAAvB,CAAyCJ,cAAc,CAACE,OAAxD;AACD;;AAED,UAAIH,WAAW,IAAI,IAAnB,EAAyB;AACvBD,QAAAA,GAAG,CAACK,kBAAJ,CAAuBE,cAAvB,CAAsCN,WAAtC;AACD;AACF;;AAEDC,IAAAA,cAAc,CAACE,OAAf,GAAyBH,WAAzB;AACD,GAZQ,EAYN,CAACD,GAAD,EAAMC,WAAN,CAZM,CAAT;AAaD;AACD,OAAO,SAASO,iBAAT,CAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAClDf,EAAAA,SAAS,CAAC,SAASgB,QAAT,GAAoB;AAC5B,QAAIC,qBAAJ;;AAEA,UAAMC,SAAS,GAAG,CAACD,qBAAqB,GAAGF,OAAO,CAACI,cAAjC,KAAoD,IAApD,GAA2DF,qBAA3D,GAAmFF,OAAO,CAACV,GAA7G;AACAa,IAAAA,SAAS,CAACF,QAAV,CAAmBF,OAAO,CAACM,QAA3B;AACA,WAAO,SAASC,WAAT,GAAuB;AAC5BH,MAAAA,SAAS,CAACG,WAAV,CAAsBP,OAAO,CAACM,QAA9B;AACD,KAFD;AAGD,GARQ,EAQN,CAACL,OAAD,EAAUD,OAAV,CARM,CAAT;AASD;AACD,OAAO,SAASQ,eAAT,CAAyBC,UAAzB,EAAqC;AAC1C,SAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,UAAMV,OAAO,GAAGb,iBAAiB,EAAjC;AACA,UAAMwB,UAAU,GAAGH,UAAU,CAACE,KAAD,EAAQV,OAAR,CAA7B;AACAX,IAAAA,cAAc,CAACW,OAAO,CAACV,GAAT,EAAcoB,KAAK,CAACnB,WAApB,CAAd;AACAH,IAAAA,gBAAgB,CAACuB,UAAU,CAACjB,OAAZ,EAAqBgB,KAAK,CAACE,aAA3B,CAAhB;AACAd,IAAAA,iBAAiB,CAACa,UAAU,CAACjB,OAAZ,EAAqBM,OAArB,CAAjB;AACA,WAAOW,UAAP;AACD,GAPD;AAQD","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    var _context$layerContain;\n\n    const container = (_context$layerContain = context.layerContainer) != null ? _context$layerContain : context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      container.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(props, context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}"]},"metadata":{},"sourceType":"module"}