{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createEmojisFromStrategy;\n/* Idea from https://github.com/tommoor/emojione-picker */\n\nfunction createEmojisFromStrategy(strategy) {\n  var emojis = {}; // categorise and nest emoji\n  // sort ensures that modifiers appear unmodified keys\n\n  var keys = Object.keys(strategy);\n  keys.forEach(function (key) {\n    var value = strategy[key]; // skip unknown categories\n\n    if (value.category !== 'modifier') {\n      if (!emojis[value.category]) emojis[value.category] = {};\n      var match = key.match(/(.*?)_tone(.*?)$/);\n\n      if (match) {\n        // this check is to stop the plugin from failing in the case that the\n        // emoji strategy miscategorizes tones - which was the case here:\n        // https://github.com/Ranks/emojione/pull/330\n        var unmodifiedEmojiExists = !!emojis[value.category][match[1]];\n\n        if (unmodifiedEmojiExists) {\n          emojis[value.category][match[1]][match[2]] = value.shortname;\n        }\n      } else {\n        emojis[value.category][key] = [value.shortname];\n      }\n    }\n  });\n  return emojis;\n}","map":{"version":3,"sources":["D:/Web/DoAn/client/node_modules/draft-js-emoji-plugin/lib/utils/createEmojisFromStrategy.js"],"names":["Object","defineProperty","exports","value","default","createEmojisFromStrategy","strategy","emojis","keys","forEach","key","category","match","unmodifiedEmojiExists","shortname"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,wBAAlB;AACA;;AACA,SAASA,wBAAT,CAAkCC,QAAlC,EAA4C;AAC1C,MAAIC,MAAM,GAAG,EAAb,CAD0C,CAG1C;AACA;;AACA,MAAIC,IAAI,GAAGR,MAAM,CAACQ,IAAP,CAAYF,QAAZ,CAAX;AACAE,EAAAA,IAAI,CAACC,OAAL,CAAa,UAAUC,GAAV,EAAe;AAC1B,QAAIP,KAAK,GAAGG,QAAQ,CAACI,GAAD,CAApB,CAD0B,CAG1B;;AACA,QAAIP,KAAK,CAACQ,QAAN,KAAmB,UAAvB,EAAmC;AACjC,UAAI,CAACJ,MAAM,CAACJ,KAAK,CAACQ,QAAP,CAAX,EAA6BJ,MAAM,CAACJ,KAAK,CAACQ,QAAP,CAAN,GAAyB,EAAzB;AAC7B,UAAIC,KAAK,GAAGF,GAAG,CAACE,KAAJ,CAAU,kBAAV,CAAZ;;AAEA,UAAIA,KAAJ,EAAW;AACT;AACA;AACA;AACA,YAAIC,qBAAqB,GAAG,CAAC,CAACN,MAAM,CAACJ,KAAK,CAACQ,QAAP,CAAN,CAAuBC,KAAK,CAAC,CAAD,CAA5B,CAA9B;;AACA,YAAIC,qBAAJ,EAA2B;AACzBN,UAAAA,MAAM,CAACJ,KAAK,CAACQ,QAAP,CAAN,CAAuBC,KAAK,CAAC,CAAD,CAA5B,EAAiCA,KAAK,CAAC,CAAD,CAAtC,IAA6CT,KAAK,CAACW,SAAnD;AACD;AACF,OARD,MAQO;AACLP,QAAAA,MAAM,CAACJ,KAAK,CAACQ,QAAP,CAAN,CAAuBD,GAAvB,IAA8B,CAACP,KAAK,CAACW,SAAP,CAA9B;AACD;AACF;AACF,GApBD;AAsBA,SAAOP,MAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createEmojisFromStrategy;\n/* Idea from https://github.com/tommoor/emojione-picker */\nfunction createEmojisFromStrategy(strategy) {\n  var emojis = {};\n\n  // categorise and nest emoji\n  // sort ensures that modifiers appear unmodified keys\n  var keys = Object.keys(strategy);\n  keys.forEach(function (key) {\n    var value = strategy[key];\n\n    // skip unknown categories\n    if (value.category !== 'modifier') {\n      if (!emojis[value.category]) emojis[value.category] = {};\n      var match = key.match(/(.*?)_tone(.*?)$/);\n\n      if (match) {\n        // this check is to stop the plugin from failing in the case that the\n        // emoji strategy miscategorizes tones - which was the case here:\n        // https://github.com/Ranks/emojione/pull/330\n        var unmodifiedEmojiExists = !!emojis[value.category][match[1]];\n        if (unmodifiedEmojiExists) {\n          emojis[value.category][match[1]][match[2]] = value.shortname;\n        }\n      } else {\n        emojis[value.category][key] = [value.shortname];\n      }\n    }\n  });\n\n  return emojis;\n}"]},"metadata":{},"sourceType":"script"}