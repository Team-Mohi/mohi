{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\nvar RO_THRESH = 4294967296;\nvar TYPE_SHARED = 'shared';\n\nvar handleRollover = function (value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n\n\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += direction * MAX_TS;\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function (type) {\n  var lastDTS, referenceDTS;\n  TimestampRolloverStream.prototype.init.call(this); // The \"shared\" type is used in cases where a stream will contain muxed\n  // video and audio. We could use `undefined` here, but having a string\n  // makes debugging a little clearer.\n\n  this.type_ = type || TYPE_SHARED;\n\n  this.push = function (data) {\n    // Any \"shared\" rollover streams will accept _all_ data. Otherwise,\n    // streams will only accept data that matches their type.\n    if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n    lastDTS = data.dts;\n    this.trigger('data', data);\n  };\n\n  this.flush = function () {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.endTimeline = function () {\n    this.flush();\n    this.trigger('endedtimeline');\n  };\n\n  this.discontinuity = function () {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n  this.reset = function () {\n    this.discontinuity();\n    this.trigger('reset');\n  };\n};\n\nTimestampRolloverStream.prototype = new Stream();\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js"],"names":["Stream","require","MAX_TS","RO_THRESH","TYPE_SHARED","handleRollover","value","reference","direction","Math","abs","TimestampRolloverStream","type","lastDTS","referenceDTS","prototype","init","call","type_","push","data","undefined","dts","pts","trigger","flush","endTimeline","discontinuity","reset","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AAEA,IAAIC,MAAM,GAAG,UAAb;AAEA,IAAIC,SAAS,GAAG,UAAhB;AAEA,IAAIC,WAAW,GAAG,QAAlB;;AAEA,IAAIC,cAAc,GAAG,UAASC,KAAT,EAAgBC,SAAhB,EAA2B;AAC9C,MAAIC,SAAS,GAAG,CAAhB;;AAEA,MAAIF,KAAK,GAAGC,SAAZ,EAAuB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,SAAS,GAAG,CAAC,CAAb;AACD,GAZ6C,CAc9C;AACA;;;AACA,SAAOC,IAAI,CAACC,GAAL,CAASH,SAAS,GAAGD,KAArB,IAA8BH,SAArC,EAAgD;AAC9CG,IAAAA,KAAK,IAAKE,SAAS,GAAGN,MAAtB;AACD;;AAED,SAAOI,KAAP;AACD,CArBD;;AAuBA,IAAIK,uBAAuB,GAAG,UAASC,IAAT,EAAe;AAC3C,MAAIC,OAAJ,EAAaC,YAAb;AAEAH,EAAAA,uBAAuB,CAACI,SAAxB,CAAkCC,IAAlC,CAAuCC,IAAvC,CAA4C,IAA5C,EAH2C,CAK3C;AACA;AACA;;AACA,OAAKC,KAAL,GAAaN,IAAI,IAAIR,WAArB;;AAEA,OAAKe,IAAL,GAAY,UAASC,IAAT,EAAe;AAEzB;AACA;AACA,QAAI,KAAKF,KAAL,KAAed,WAAf,IAA8BgB,IAAI,CAACR,IAAL,KAAc,KAAKM,KAArD,EAA4D;AAC1D;AACD;;AAED,QAAIJ,YAAY,KAAKO,SAArB,EAAgC;AAC9BP,MAAAA,YAAY,GAAGM,IAAI,CAACE,GAApB;AACD;;AAEDF,IAAAA,IAAI,CAACE,GAAL,GAAWjB,cAAc,CAACe,IAAI,CAACE,GAAN,EAAWR,YAAX,CAAzB;AACAM,IAAAA,IAAI,CAACG,GAAL,GAAWlB,cAAc,CAACe,IAAI,CAACG,GAAN,EAAWT,YAAX,CAAzB;AAEAD,IAAAA,OAAO,GAAGO,IAAI,CAACE,GAAf;AAEA,SAAKE,OAAL,CAAa,MAAb,EAAqBJ,IAArB;AACD,GAlBD;;AAoBA,OAAKK,KAAL,GAAa,YAAW;AACtBX,IAAAA,YAAY,GAAGD,OAAf;AACA,SAAKW,OAAL,CAAa,MAAb;AACD,GAHD;;AAKA,OAAKE,WAAL,GAAmB,YAAW;AAC5B,SAAKD,KAAL;AACA,SAAKD,OAAL,CAAa,eAAb;AACD,GAHD;;AAKA,OAAKG,aAAL,GAAqB,YAAW;AAC9Bb,IAAAA,YAAY,GAAG,KAAK,CAApB;AACAD,IAAAA,OAAO,GAAG,KAAK,CAAf;AACD,GAHD;;AAKA,OAAKe,KAAL,GAAa,YAAW;AACtB,SAAKD,aAAL;AACA,SAAKH,OAAL,CAAa,OAAb;AACD,GAHD;AAID,CAjDD;;AAmDAb,uBAAuB,CAACI,SAAxB,GAAoC,IAAIf,MAAJ,EAApC;AAEA6B,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA,uBAAuB,EAAEA,uBADV;AAEfN,EAAAA,cAAc,EAAEA;AAFD,CAAjB","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar TYPE_SHARED = 'shared';\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  // The \"shared\" type is used in cases where a stream will contain muxed\n  // video and audio. We could use `undefined` here, but having a string\n  // makes debugging a little clearer.\n  this.type_ = type || TYPE_SHARED;\n\n  this.push = function(data) {\n\n    // Any \"shared\" rollover streams will accept _all_ data. Otherwise,\n    // streams will only accept data that matches their type.\n    if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.endTimeline = function() {\n    this.flush();\n    this.trigger('endedtimeline');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n  this.reset = function() {\n    this.discontinuity();\n    this.trigger('reset');\n  };\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n"]},"metadata":{},"sourceType":"script"}