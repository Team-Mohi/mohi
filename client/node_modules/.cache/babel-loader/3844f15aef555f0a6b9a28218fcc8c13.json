{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n'use strict';\n\nvar UserAgentData = require(\"./UserAgentData\");\n\nvar VersionRange = require(\"./VersionRange\");\n\nvar mapObject = require(\"./mapObject\");\n\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\n/**\r\n * Checks to see whether `name` and `version` satisfy `query`.\r\n *\r\n * @param {string} name Name of the browser, device, engine or platform\r\n * @param {?string} version Version of the browser, engine or platform\r\n * @param {string} query Query of form \"Name [range expression]\"\r\n * @param {?function} normalizer Optional pre-processor for range expression\r\n * @return {boolean}\r\n */\n\n\nfunction compare(name, version, query, normalizer) {\n  // check for exact match with no version\n  if (name === query) {\n    return true;\n  } // check for non-matching names\n\n\n  if (!query.startsWith(name)) {\n    return false;\n  } // full comparison with version\n\n\n  var range = query.slice(name.length);\n\n  if (version) {\n    range = normalizer ? normalizer(range) : range;\n    return VersionRange.contains(range, version);\n  }\n\n  return false;\n}\n/**\r\n * Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\r\n * platform.\r\n *\r\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\r\n *\r\n * @param {string} version\r\n * @return {string}\r\n */\n\n\nfunction normalizePlatformVersion(version) {\n  if (UserAgentData.platformName === 'Windows') {\n    return version.replace(/^\\s*NT/, '');\n  }\n\n  return version;\n}\n/**\r\n * Provides client-side access to the authoritative PHP-generated User Agent\r\n * information supplied by the server.\r\n */\n\n\nvar UserAgent = {\n  /**\r\n   * Check if the User Agent browser matches `query`.\r\n   *\r\n   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\r\n   *\r\n   * Valid browser names include:\r\n   *\r\n   * - ACCESS NetFront\r\n   * - AOL\r\n   * - Amazon Silk\r\n   * - Android\r\n   * - BlackBerry\r\n   * - BlackBerry PlayBook\r\n   * - Chrome\r\n   * - Chrome for iOS\r\n   * - Chrome frame\r\n   * - Facebook PHP SDK\r\n   * - Facebook for iOS\r\n   * - Firefox\r\n   * - IE\r\n   * - IE Mobile\r\n   * - Mobile Safari\r\n   * - Motorola Internet Browser\r\n   * - Nokia\r\n   * - Openwave Mobile Browser\r\n   * - Opera\r\n   * - Opera Mini\r\n   * - Opera Mobile\r\n   * - Safari\r\n   * - UIWebView\r\n   * - Unknown\r\n   * - webOS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\r\n   * https://fburl.com/50728104).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\n  isBrowser: function isBrowser(query) {\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\n  },\n\n  /**\r\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\n    return compare(UserAgentData.browserArchitecture, null, query);\n  },\n\n  /**\r\n   * Check if the User Agent device matches `query`.\r\n   *\r\n   * `query` should be a string like \"iPhone\" or \"iPad\".\r\n   *\r\n   * Valid device names include:\r\n   *\r\n   * - Kindle\r\n   * - Kindle Fire\r\n   * - Unknown\r\n   * - iPad\r\n   * - iPhone\r\n   * - iPod\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\r\n   * https://fburl.com/50728332).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name\"\r\n   * @return {boolean}\r\n   */\n  isDevice: function isDevice(query) {\n    return compare(UserAgentData.deviceName, null, query);\n  },\n\n  /**\r\n   * Check if the User Agent rendering engine matches `query`.\r\n   *\r\n   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\r\n   *\r\n   * Valid engine names include:\r\n   *\r\n   * - Gecko\r\n   * - Presto\r\n   * - Trident\r\n   * - WebKit\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\r\n   * class related classes in the same file (see calls to `new\r\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\n  isEngine: function isEngine(query) {\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\n  },\n\n  /**\r\n   * Check if the User Agent platform matches `query`.\r\n   *\r\n   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\r\n   *\r\n   * Valid platform names include:\r\n   *\r\n   * - Android\r\n   * - BlackBerry OS\r\n   * - Java ME\r\n   * - Linux\r\n   * - Mac OS X\r\n   * - Mac OS X Calendar\r\n   * - Mac OS X Internet Account\r\n   * - Symbian\r\n   * - SymbianOS\r\n   * - Windows\r\n   * - Windows Mobile\r\n   * - Windows Phone\r\n   * - iOS\r\n   * - iOS Facebook Integration Account\r\n   * - iOS Facebook Social Sharing UI\r\n   * - webOS\r\n   * - Chrome OS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentPlatform`\r\n   * here: https://fburl.com/50729226).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\n  isPlatform: function isPlatform(query) {\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\n  },\n\n  /**\r\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\n    return compare(UserAgentData.platformArchitecture, null, query);\n  }\n};\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/fbjs/lib/UserAgent.js"],"names":["UserAgentData","require","VersionRange","mapObject","memoizeStringOnly","compare","name","version","query","normalizer","startsWith","range","slice","length","contains","normalizePlatformVersion","platformName","replace","UserAgent","isBrowser","browserName","browserFullVersion","isBrowserArchitecture","browserArchitecture","isDevice","deviceName","isEngine","engineName","engineVersion","isPlatform","platformFullVersion","isPlatformArchitecture","platformArchitecture","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar UserAgentData = require(\"./UserAgentData\");\r\n\r\nvar VersionRange = require(\"./VersionRange\");\r\n\r\nvar mapObject = require(\"./mapObject\");\r\n\r\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\r\n/**\r\n * Checks to see whether `name` and `version` satisfy `query`.\r\n *\r\n * @param {string} name Name of the browser, device, engine or platform\r\n * @param {?string} version Version of the browser, engine or platform\r\n * @param {string} query Query of form \"Name [range expression]\"\r\n * @param {?function} normalizer Optional pre-processor for range expression\r\n * @return {boolean}\r\n */\r\n\r\n\r\nfunction compare(name, version, query, normalizer) {\r\n  // check for exact match with no version\r\n  if (name === query) {\r\n    return true;\r\n  } // check for non-matching names\r\n\r\n\r\n  if (!query.startsWith(name)) {\r\n    return false;\r\n  } // full comparison with version\r\n\r\n\r\n  var range = query.slice(name.length);\r\n\r\n  if (version) {\r\n    range = normalizer ? normalizer(range) : range;\r\n    return VersionRange.contains(range, version);\r\n  }\r\n\r\n  return false;\r\n}\r\n/**\r\n * Normalizes `version` by stripping any \"NT\" prefix, but only on the Windows\r\n * platform.\r\n *\r\n * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.\r\n *\r\n * @param {string} version\r\n * @return {string}\r\n */\r\n\r\n\r\nfunction normalizePlatformVersion(version) {\r\n  if (UserAgentData.platformName === 'Windows') {\r\n    return version.replace(/^\\s*NT/, '');\r\n  }\r\n\r\n  return version;\r\n}\r\n/**\r\n * Provides client-side access to the authoritative PHP-generated User Agent\r\n * information supplied by the server.\r\n */\r\n\r\n\r\nvar UserAgent = {\r\n  /**\r\n   * Check if the User Agent browser matches `query`.\r\n   *\r\n   * `query` should be a string like \"Chrome\" or \"Chrome > 33\".\r\n   *\r\n   * Valid browser names include:\r\n   *\r\n   * - ACCESS NetFront\r\n   * - AOL\r\n   * - Amazon Silk\r\n   * - Android\r\n   * - BlackBerry\r\n   * - BlackBerry PlayBook\r\n   * - Chrome\r\n   * - Chrome for iOS\r\n   * - Chrome frame\r\n   * - Facebook PHP SDK\r\n   * - Facebook for iOS\r\n   * - Firefox\r\n   * - IE\r\n   * - IE Mobile\r\n   * - Mobile Safari\r\n   * - Motorola Internet Browser\r\n   * - Nokia\r\n   * - Openwave Mobile Browser\r\n   * - Opera\r\n   * - Opera Mini\r\n   * - Opera Mobile\r\n   * - Safari\r\n   * - UIWebView\r\n   * - Unknown\r\n   * - webOS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `BrowserDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentBrowser` here:\r\n   * https://fburl.com/50728104).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\r\n  isBrowser: function isBrowser(query) {\r\n    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent browser uses a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\r\n  isBrowserArchitecture: function isBrowserArchitecture(query) {\r\n    return compare(UserAgentData.browserArchitecture, null, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent device matches `query`.\r\n   *\r\n   * `query` should be a string like \"iPhone\" or \"iPad\".\r\n   *\r\n   * Valid device names include:\r\n   *\r\n   * - Kindle\r\n   * - Kindle Fire\r\n   * - Unknown\r\n   * - iPad\r\n   * - iPhone\r\n   * - iPod\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `DeviceDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentDevice` here:\r\n   * https://fburl.com/50728332).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name\"\r\n   * @return {boolean}\r\n   */\r\n  isDevice: function isDevice(query) {\r\n    return compare(UserAgentData.deviceName, null, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent rendering engine matches `query`.\r\n   *\r\n   * `query` should be a string like \"WebKit\" or \"WebKit >= 537\".\r\n   *\r\n   * Valid engine names include:\r\n   *\r\n   * - Gecko\r\n   * - Presto\r\n   * - Trident\r\n   * - WebKit\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `RenderingEngineDetector`\r\n   * class related classes in the same file (see calls to `new\r\n   * UserAgentRenderingEngine` here: https://fburl.com/50728617).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\r\n  isEngine: function isEngine(query) {\r\n    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent platform matches `query`.\r\n   *\r\n   * `query` should be a string like \"Windows\" or \"iOS 5 - 6\".\r\n   *\r\n   * Valid platform names include:\r\n   *\r\n   * - Android\r\n   * - BlackBerry OS\r\n   * - Java ME\r\n   * - Linux\r\n   * - Mac OS X\r\n   * - Mac OS X Calendar\r\n   * - Mac OS X Internet Account\r\n   * - Symbian\r\n   * - SymbianOS\r\n   * - Windows\r\n   * - Windows Mobile\r\n   * - Windows Phone\r\n   * - iOS\r\n   * - iOS Facebook Integration Account\r\n   * - iOS Facebook Social Sharing UI\r\n   * - webOS\r\n   * - Chrome OS\r\n   * - etc...\r\n   *\r\n   * An authoritative list can be found in the PHP `PlatformDetector` class and\r\n   * related classes in the same file (see calls to `new UserAgentPlatform`\r\n   * here: https://fburl.com/50729226).\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"Name [range expression]\"\r\n   * @return {boolean}\r\n   */\r\n  isPlatform: function isPlatform(query) {\r\n    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);\r\n  },\r\n\r\n  /**\r\n   * Check if the User Agent platform is a 32 or 64 bit architecture.\r\n   *\r\n   * @note Function results are memoized\r\n   *\r\n   * @param {string} query Query of the form \"32\" or \"64\".\r\n   * @return {boolean}\r\n   */\r\n  isPlatformArchitecture: function isPlatformArchitecture(query) {\r\n    return compare(UserAgentData.platformArchitecture, null, query);\r\n  }\r\n};\r\nmodule.exports = mapObject(UserAgent, memoizeStringOnly);"]},"metadata":{},"sourceType":"script"}