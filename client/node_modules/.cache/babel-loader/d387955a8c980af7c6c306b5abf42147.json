{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = attachImmutableEntitiesToEmojis;\n\nvar _draftJs = require('draft-js');\n\nvar _findWithRegex = require('find-with-regex');\n\nvar _findWithRegex2 = _interopRequireDefault(_findWithRegex);\n\nvar _emojione = require('emojione');\n\nvar _emojione2 = _interopRequireDefault(_emojione);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar unicodeRegex = new RegExp(_emojione2.default.unicodeRegexp, 'g');\n/*\n * Attaches Immutable DraftJS Entities to the Emoji text.\n *\n * This is necessary as emojis consist of 2 characters (unicode). By making them\n * immutable the whole Emoji is removed when hitting backspace.\n */\n\nfunction attachImmutableEntitiesToEmojis(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var blocks = contentState.getBlockMap();\n  var newContentState = contentState;\n  blocks.forEach(function (block) {\n    var plainText = block.getText();\n\n    var addEntityToEmoji = function addEntityToEmoji(start, end) {\n      var existingEntityKey = block.getEntityAt(start);\n\n      if (existingEntityKey) {\n        // avoid manipulation in case the emoji already has an entity\n        var entity = newContentState.getEntity(existingEntityKey);\n\n        if (entity && entity.get('type') === 'emoji') {\n          return;\n        }\n      }\n\n      var selection = _draftJs.SelectionState.createEmpty(block.getKey()).set('anchorOffset', start).set('focusOffset', end);\n\n      var emojiText = plainText.substring(start, end);\n      var contentStateWithEntity = newContentState.createEntity('emoji', 'IMMUTABLE', {\n        emojiUnicode: emojiText\n      });\n      var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n      newContentState = _draftJs.Modifier.replaceText(newContentState, selection, emojiText, null, entityKey);\n    };\n\n    (0, _findWithRegex2.default)(unicodeRegex, block, addEntityToEmoji);\n  });\n\n  if (!newContentState.equals(contentState)) {\n    return _draftJs.EditorState.push(editorState, newContentState, 'convert-to-immutable-emojis');\n  }\n\n  return editorState;\n}","map":{"version":3,"sources":["D:/Web/DoAn/client/node_modules/draft-js-emoji-plugin/lib/modifiers/attachImmutableEntitiesToEmojis.js"],"names":["Object","defineProperty","exports","value","default","attachImmutableEntitiesToEmojis","_draftJs","require","_findWithRegex","_findWithRegex2","_interopRequireDefault","_emojione","_emojione2","obj","__esModule","unicodeRegex","RegExp","unicodeRegexp","editorState","contentState","getCurrentContent","blocks","getBlockMap","newContentState","forEach","block","plainText","getText","addEntityToEmoji","start","end","existingEntityKey","getEntityAt","entity","getEntity","get","selection","SelectionState","createEmpty","getKey","set","emojiText","substring","contentStateWithEntity","createEntity","emojiUnicode","entityKey","getLastCreatedEntityKey","Modifier","replaceText","equals","EditorState","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,+BAAlB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AAEA,IAAIE,eAAe,GAAGC,sBAAsB,CAACF,cAAD,CAA5C;;AAEA,IAAIG,SAAS,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAIK,UAAU,GAAGF,sBAAsB,CAACC,SAAD,CAAvC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAET,IAAAA,OAAO,EAAES;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,YAAY,GAAG,IAAIC,MAAJ,CAAWJ,UAAU,CAACR,OAAX,CAAmBa,aAA9B,EAA6C,GAA7C,CAAnB;AAEA;;;;;;;AAMA,SAASZ,+BAAT,CAAyCa,WAAzC,EAAsD;AACpD,MAAIC,YAAY,GAAGD,WAAW,CAACE,iBAAZ,EAAnB;AACA,MAAIC,MAAM,GAAGF,YAAY,CAACG,WAAb,EAAb;AACA,MAAIC,eAAe,GAAGJ,YAAtB;AAEAE,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAUC,KAAV,EAAiB;AAC9B,QAAIC,SAAS,GAAGD,KAAK,CAACE,OAAN,EAAhB;;AAEA,QAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;AAC3D,UAAIC,iBAAiB,GAAGN,KAAK,CAACO,WAAN,CAAkBH,KAAlB,CAAxB;;AACA,UAAIE,iBAAJ,EAAuB;AACrB;AACA,YAAIE,MAAM,GAAGV,eAAe,CAACW,SAAhB,CAA0BH,iBAA1B,CAAb;;AACA,YAAIE,MAAM,IAAIA,MAAM,CAACE,GAAP,CAAW,MAAX,MAAuB,OAArC,EAA8C;AAC5C;AACD;AACF;;AAED,UAAIC,SAAS,GAAG9B,QAAQ,CAAC+B,cAAT,CAAwBC,WAAxB,CAAoCb,KAAK,CAACc,MAAN,EAApC,EAAoDC,GAApD,CAAwD,cAAxD,EAAwEX,KAAxE,EAA+EW,GAA/E,CAAmF,aAAnF,EAAkGV,GAAlG,CAAhB;;AACA,UAAIW,SAAS,GAAGf,SAAS,CAACgB,SAAV,CAAoBb,KAApB,EAA2BC,GAA3B,CAAhB;AACA,UAAIa,sBAAsB,GAAGpB,eAAe,CAACqB,YAAhB,CAA6B,OAA7B,EAAsC,WAAtC,EAAmD;AAAEC,QAAAA,YAAY,EAAEJ;AAAhB,OAAnD,CAA7B;AACA,UAAIK,SAAS,GAAGH,sBAAsB,CAACI,uBAAvB,EAAhB;AAEAxB,MAAAA,eAAe,GAAGjB,QAAQ,CAAC0C,QAAT,CAAkBC,WAAlB,CAA8B1B,eAA9B,EAA+Ca,SAA/C,EAA0DK,SAA1D,EAAqE,IAArE,EAA2EK,SAA3E,CAAlB;AACD,KAhBD;;AAkBA,KAAC,GAAGrC,eAAe,CAACL,OAApB,EAA6BW,YAA7B,EAA2CU,KAA3C,EAAkDG,gBAAlD;AACD,GAtBD;;AAwBA,MAAI,CAACL,eAAe,CAAC2B,MAAhB,CAAuB/B,YAAvB,CAAL,EAA2C;AACzC,WAAOb,QAAQ,CAAC6C,WAAT,CAAqBC,IAArB,CAA0BlC,WAA1B,EAAuCK,eAAvC,EAAwD,6BAAxD,CAAP;AACD;;AAED,SAAOL,WAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = attachImmutableEntitiesToEmojis;\n\nvar _draftJs = require('draft-js');\n\nvar _findWithRegex = require('find-with-regex');\n\nvar _findWithRegex2 = _interopRequireDefault(_findWithRegex);\n\nvar _emojione = require('emojione');\n\nvar _emojione2 = _interopRequireDefault(_emojione);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar unicodeRegex = new RegExp(_emojione2.default.unicodeRegexp, 'g');\n\n/*\n * Attaches Immutable DraftJS Entities to the Emoji text.\n *\n * This is necessary as emojis consist of 2 characters (unicode). By making them\n * immutable the whole Emoji is removed when hitting backspace.\n */\nfunction attachImmutableEntitiesToEmojis(editorState) {\n  var contentState = editorState.getCurrentContent();\n  var blocks = contentState.getBlockMap();\n  var newContentState = contentState;\n\n  blocks.forEach(function (block) {\n    var plainText = block.getText();\n\n    var addEntityToEmoji = function addEntityToEmoji(start, end) {\n      var existingEntityKey = block.getEntityAt(start);\n      if (existingEntityKey) {\n        // avoid manipulation in case the emoji already has an entity\n        var entity = newContentState.getEntity(existingEntityKey);\n        if (entity && entity.get('type') === 'emoji') {\n          return;\n        }\n      }\n\n      var selection = _draftJs.SelectionState.createEmpty(block.getKey()).set('anchorOffset', start).set('focusOffset', end);\n      var emojiText = plainText.substring(start, end);\n      var contentStateWithEntity = newContentState.createEntity('emoji', 'IMMUTABLE', { emojiUnicode: emojiText });\n      var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n\n      newContentState = _draftJs.Modifier.replaceText(newContentState, selection, emojiText, null, entityKey);\n    };\n\n    (0, _findWithRegex2.default)(unicodeRegex, block, addEntityToEmoji);\n  });\n\n  if (!newContentState.equals(contentState)) {\n    return _draftJs.EditorState.push(editorState, newContentState, 'convert-to-immutable-emojis');\n  }\n\n  return editorState;\n}"]},"metadata":{},"sourceType":"script"}