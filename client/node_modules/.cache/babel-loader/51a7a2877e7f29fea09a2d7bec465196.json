{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _draftJs = require('draft-js');\n\nvar _getSearchText2 = require('../utils/getSearchText');\n\nvar _getSearchText3 = _interopRequireDefault(_getSearchText2);\n\nvar _getTypeByTrigger = require('../utils/getTypeByTrigger');\n\nvar _getTypeByTrigger2 = _interopRequireDefault(_getTypeByTrigger);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar addMention = function addMention(editorState, mention, mentionPrefix, mentionTrigger, entityMutability) {\n  var contentStateWithEntity = editorState.getCurrentContent().createEntity((0, _getTypeByTrigger2.default)(mentionTrigger), entityMutability, {\n    mention: mention\n  });\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  var currentSelectionState = editorState.getSelection();\n\n  var _getSearchText = (0, _getSearchText3.default)(editorState, currentSelectionState, mentionTrigger),\n      begin = _getSearchText.begin,\n      end = _getSearchText.end; // get selection of the @mention search text\n\n\n  var mentionTextSelection = currentSelectionState.merge({\n    anchorOffset: begin,\n    focusOffset: end\n  });\n\n  var mentionReplacedContent = _draftJs.Modifier.replaceText(editorState.getCurrentContent(), mentionTextSelection, '' + mentionPrefix + mention.name, null, // no inline style needed\n  entityKey); // If the mention is inserted at the end, a space is appended right after for\n  // a smooth writing experience.\n\n\n  var blockKey = mentionTextSelection.getAnchorKey();\n  var blockSize = editorState.getCurrentContent().getBlockForKey(blockKey).getLength();\n\n  if (blockSize === end) {\n    mentionReplacedContent = _draftJs.Modifier.insertText(mentionReplacedContent, mentionReplacedContent.getSelectionAfter(), ' ');\n  }\n\n  var newEditorState = _draftJs.EditorState.push(editorState, mentionReplacedContent, 'insert-mention');\n\n  return _draftJs.EditorState.forceSelection(newEditorState, mentionReplacedContent.getSelectionAfter());\n};\n\nexports.default = addMention;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/draft-js-mention-plugin/lib/modifiers/addMention.js"],"names":["Object","defineProperty","exports","value","_draftJs","require","_getSearchText2","_getSearchText3","_interopRequireDefault","_getTypeByTrigger","_getTypeByTrigger2","obj","__esModule","default","addMention","editorState","mention","mentionPrefix","mentionTrigger","entityMutability","contentStateWithEntity","getCurrentContent","createEntity","entityKey","getLastCreatedEntityKey","currentSelectionState","getSelection","_getSearchText","begin","end","mentionTextSelection","merge","anchorOffset","focusOffset","mentionReplacedContent","Modifier","replaceText","name","blockKey","getAnchorKey","blockSize","getBlockForKey","getLength","insertText","getSelectionAfter","newEditorState","EditorState","push","forceSelection"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAIC,eAAe,GAAGD,OAAO,CAAC,wBAAD,CAA7B;;AAEA,IAAIE,eAAe,GAAGC,sBAAsB,CAACF,eAAD,CAA5C;;AAEA,IAAIG,iBAAiB,GAAGJ,OAAO,CAAC,2BAAD,CAA/B;;AAEA,IAAIK,kBAAkB,GAAGF,sBAAsB,CAACC,iBAAD,CAA/C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAIG,UAAU,GAAG,SAASA,UAAT,CAAoBC,WAApB,EAAiCC,OAAjC,EAA0CC,aAA1C,EAAyDC,cAAzD,EAAyEC,gBAAzE,EAA2F;AAC1G,MAAIC,sBAAsB,GAAGL,WAAW,CAACM,iBAAZ,GAAgCC,YAAhC,CAA6C,CAAC,GAAGZ,kBAAkB,CAACG,OAAvB,EAAgCK,cAAhC,CAA7C,EAA8FC,gBAA9F,EAAgH;AAC3IH,IAAAA,OAAO,EAAEA;AADkI,GAAhH,CAA7B;AAGA,MAAIO,SAAS,GAAGH,sBAAsB,CAACI,uBAAvB,EAAhB;AAEA,MAAIC,qBAAqB,GAAGV,WAAW,CAACW,YAAZ,EAA5B;;AAEA,MAAIC,cAAc,GAAG,CAAC,GAAGpB,eAAe,CAACM,OAApB,EAA6BE,WAA7B,EAA0CU,qBAA1C,EAAiEP,cAAjE,CAArB;AAAA,MACIU,KAAK,GAAGD,cAAc,CAACC,KAD3B;AAAA,MAEIC,GAAG,GAAGF,cAAc,CAACE,GAFzB,CAR0G,CAY1G;;;AAGA,MAAIC,oBAAoB,GAAGL,qBAAqB,CAACM,KAAtB,CAA4B;AACrDC,IAAAA,YAAY,EAAEJ,KADuC;AAErDK,IAAAA,WAAW,EAAEJ;AAFwC,GAA5B,CAA3B;;AAKA,MAAIK,sBAAsB,GAAG9B,QAAQ,CAAC+B,QAAT,CAAkBC,WAAlB,CAA8BrB,WAAW,CAACM,iBAAZ,EAA9B,EAA+DS,oBAA/D,EAAqF,KAAKb,aAAL,GAAqBD,OAAO,CAACqB,IAAlH,EAAwH,IAAxH,EAA8H;AAC3Jd,EAAAA,SAD6B,CAA7B,CApB0G,CAuB1G;AACA;;;AACA,MAAIe,QAAQ,GAAGR,oBAAoB,CAACS,YAArB,EAAf;AACA,MAAIC,SAAS,GAAGzB,WAAW,CAACM,iBAAZ,GAAgCoB,cAAhC,CAA+CH,QAA/C,EAAyDI,SAAzD,EAAhB;;AACA,MAAIF,SAAS,KAAKX,GAAlB,EAAuB;AACrBK,IAAAA,sBAAsB,GAAG9B,QAAQ,CAAC+B,QAAT,CAAkBQ,UAAlB,CAA6BT,sBAA7B,EAAqDA,sBAAsB,CAACU,iBAAvB,EAArD,EAAiG,GAAjG,CAAzB;AACD;;AAED,MAAIC,cAAc,GAAGzC,QAAQ,CAAC0C,WAAT,CAAqBC,IAArB,CAA0BhC,WAA1B,EAAuCmB,sBAAvC,EAA+D,gBAA/D,CAArB;;AACA,SAAO9B,QAAQ,CAAC0C,WAAT,CAAqBE,cAArB,CAAoCH,cAApC,EAAoDX,sBAAsB,CAACU,iBAAvB,EAApD,CAAP;AACD,CAjCD;;AAmCA1C,OAAO,CAACW,OAAR,GAAkBC,UAAlB","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _draftJs = require('draft-js');\r\n\r\nvar _getSearchText2 = require('../utils/getSearchText');\r\n\r\nvar _getSearchText3 = _interopRequireDefault(_getSearchText2);\r\n\r\nvar _getTypeByTrigger = require('../utils/getTypeByTrigger');\r\n\r\nvar _getTypeByTrigger2 = _interopRequireDefault(_getTypeByTrigger);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nvar addMention = function addMention(editorState, mention, mentionPrefix, mentionTrigger, entityMutability) {\r\n  var contentStateWithEntity = editorState.getCurrentContent().createEntity((0, _getTypeByTrigger2.default)(mentionTrigger), entityMutability, {\r\n    mention: mention\r\n  });\r\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n\r\n  var currentSelectionState = editorState.getSelection();\r\n\r\n  var _getSearchText = (0, _getSearchText3.default)(editorState, currentSelectionState, mentionTrigger),\r\n      begin = _getSearchText.begin,\r\n      end = _getSearchText.end;\r\n\r\n  // get selection of the @mention search text\r\n\r\n\r\n  var mentionTextSelection = currentSelectionState.merge({\r\n    anchorOffset: begin,\r\n    focusOffset: end\r\n  });\r\n\r\n  var mentionReplacedContent = _draftJs.Modifier.replaceText(editorState.getCurrentContent(), mentionTextSelection, '' + mentionPrefix + mention.name, null, // no inline style needed\r\n  entityKey);\r\n\r\n  // If the mention is inserted at the end, a space is appended right after for\r\n  // a smooth writing experience.\r\n  var blockKey = mentionTextSelection.getAnchorKey();\r\n  var blockSize = editorState.getCurrentContent().getBlockForKey(blockKey).getLength();\r\n  if (blockSize === end) {\r\n    mentionReplacedContent = _draftJs.Modifier.insertText(mentionReplacedContent, mentionReplacedContent.getSelectionAfter(), ' ');\r\n  }\r\n\r\n  var newEditorState = _draftJs.EditorState.push(editorState, mentionReplacedContent, 'insert-mention');\r\n  return _draftJs.EditorState.forceSelection(newEditorState, mentionReplacedContent.getSelectionAfter());\r\n};\r\n\r\nexports.default = addMention;"]},"metadata":{},"sourceType":"script"}