{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\Post\\\\CommentReplyEditor.jsx\";\nimport React, { Component } from \"react\";\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport style from 'styled-components';\nimport { EditorState, Modifier, ContentState, convertToRaw } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport createLinkifyPlugin from 'draft-js-linkify-plugin';\nimport draftToHtml from 'draftjs-to-html';\nconst emojiPlugin = createEmojiPlugin({\n  useNativeArt: true\n});\nconst linkifyPlugin = createLinkifyPlugin();\nconst {\n  EmojiSuggestions,\n  EmojiSelect\n} = emojiPlugin;\nconst plugins = [emojiPlugin, linkifyPlugin];\nconst StyleEditor = style.div`\n  width: 100%;\n  max-height: 100px;\n  overflow-y: auto;\n  border: 1px solid #ddd;\n  margin-left: 10px;\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 30px;\n`;\nconst Wrapper = style.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\nconst StyleEmoji = style.div`\n  position: absolute;\n  right: 10px;\n  border: 0;\n  z-index: 2;\n`;\nexport default class CommentReplyEditor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      idUserReceivedReply: this.props.idUserReceivedReply,\n      userReceivedReply: this.props.userReceivedReply,\n      idUserReceivedReplyArr: []\n    };\n\n    this.onChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.idUserReceivedReply !== state.idUserReceivedReply || props.userReceivedReply !== state.userReceivedReply) {\n      if (state.idUserReceivedReplyArr.indexOf(props.idUserReceivedReply) < 0) {\n        const insertText = (userReceivedReply, idUserReceivedReply, editorState) => {\n          const contentState = editorState.getCurrentContent();\n          const currentSelection = editorState.getSelection();\n          const contentStateWithEntity = contentState.createEntity('LINK', 'MUTABLE', {\n            url: 'http://www.zombo.com'\n          });\n          const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n          const contentStateWithLink = Modifier.applyEntity(contentStateWithEntity, currentSelection, entityKey);\n          const newEditorState = EditorState.set(editorState, {\n            currentContent: contentStateWithLink\n          }); // const currentContent = editorState.getCurrentContent(),\n          //       currentSelection = editorState.getSelection();\n          //  const linkUserReceivedReply = \"<a href='\"+idUserReceivedReply+\"' ><strong>\"+ userReceivedReply +\"</strong></a>\"\n          //  let { contentBlocks, entityMap } = htmlToDraft(linkUserReceivedReply);\n          //\n          // const newContent = Modifier.replaceWithFragment(\n          //   currentContent,\n          //   currentSelection,\n          //   ContentState.createFromBlockArray(contentBlocks, entityMap).getBlockMap()\n          // );\n          //\n          // const newEditorState = EditorState.push(editorState, newContent);\n\n          return EditorState.forceSelection(newEditorState, contentStateWithLink.getSelectionAfter());\n        };\n\n        return {\n          idUserReceivedReply: props.idUserReceivedReply,\n          userReceivedReply: props.userReceivedReply,\n          editorState: insertText(props.userReceivedReply, props.idUserReceivedReply, state.editorState),\n          idUserReceivedReplyArr: [...state.idUserReceivedReplyArr, props.idUserReceivedReply]\n        };\n      }\n    } // Return null to indicate no change to state.\n\n\n    return null;\n  }\n\n  render() {\n    // console.log(convertToRaw(this.state.editorState.getCurrentContent()));\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StyleEditor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      editorState: this.state.editorState,\n      onChange: this.onChange,\n      plugins: plugins,\n      placeholder: \"Vi\\u1EBFt b\\xECnh lu\\u1EADn...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(EmojiSuggestions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(StyleEmoji, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EmojiSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/Post/CommentReplyEditor.jsx"],"names":["React","Component","Editor","createEditorStateWithText","createEmojiPlugin","style","EditorState","Modifier","ContentState","convertToRaw","htmlToDraft","createLinkifyPlugin","draftToHtml","emojiPlugin","useNativeArt","linkifyPlugin","EmojiSuggestions","EmojiSelect","plugins","StyleEditor","div","Wrapper","StyleEmoji","CommentReplyEditor","state","editorState","createEmpty","idUserReceivedReply","props","userReceivedReply","idUserReceivedReplyArr","onChange","setState","getDerivedStateFromProps","indexOf","insertText","contentState","getCurrentContent","currentSelection","getSelection","contentStateWithEntity","createEntity","url","entityKey","getLastCreatedEntityKey","contentStateWithLink","applyEntity","newEditorState","set","currentContent","forceSelection","getSelectionAfter","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\r\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\r\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\r\nimport style from 'styled-components';\r\nimport { EditorState, Modifier, ContentState, convertToRaw } from 'draft-js';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport createLinkifyPlugin from 'draft-js-linkify-plugin';\r\nimport draftToHtml from 'draftjs-to-html';\r\n\r\nconst emojiPlugin = createEmojiPlugin({\r\n  useNativeArt: true\r\n});\r\nconst linkifyPlugin = createLinkifyPlugin();\r\n\r\nconst { EmojiSuggestions, EmojiSelect } = emojiPlugin;\r\nconst plugins = [emojiPlugin, linkifyPlugin];\r\n\r\nconst StyleEditor = style.div`\r\n  width: 100%;\r\n  max-height: 100px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  padding: 5px 10px;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst Wrapper = style.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyleEmoji = style.div`\r\n  position: absolute;\r\n  right: 10px;\r\n  border: 0;\r\n  z-index: 2;\r\n`;\r\n\r\nexport default class CommentReplyEditor extends Component {\r\n    state = {\r\n      editorState: EditorState.createEmpty(),\r\n      idUserReceivedReply: this.props.idUserReceivedReply,\r\n      userReceivedReply: this.props.userReceivedReply,\r\n      idUserReceivedReplyArr: []\r\n    };\r\n\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n     if (props.idUserReceivedReply !== state.idUserReceivedReply || props.userReceivedReply !== state.userReceivedReply) {\r\n       if(state.idUserReceivedReplyArr.indexOf(props.idUserReceivedReply) < 0){\r\n       const insertText = (userReceivedReply, idUserReceivedReply, editorState) => {\r\n         const contentState = editorState.getCurrentContent();\r\n         const currentSelection = editorState.getSelection();\r\n          const contentStateWithEntity = contentState.createEntity('LINK', 'MUTABLE', {\r\n            url: 'http://www.zombo.com',\r\n          });\r\n          const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n          const contentStateWithLink = Modifier.applyEntity(\r\n            contentStateWithEntity,\r\n            currentSelection,\r\n            entityKey,\r\n          );\r\n          const newEditorState = EditorState.set(editorState, {\r\n            currentContent: contentStateWithLink,\r\n          });\r\n           // const currentContent = editorState.getCurrentContent(),\r\n           //       currentSelection = editorState.getSelection();\r\n           //  const linkUserReceivedReply = \"<a href='\"+idUserReceivedReply+\"' ><strong>\"+ userReceivedReply +\"</strong></a>\"\r\n           //  let { contentBlocks, entityMap } = htmlToDraft(linkUserReceivedReply);\r\n           //\r\n           // const newContent = Modifier.replaceWithFragment(\r\n           //   currentContent,\r\n           //   currentSelection,\r\n           //   ContentState.createFromBlockArray(contentBlocks, entityMap).getBlockMap()\r\n           // );\r\n           //\r\n           // const newEditorState = EditorState.push(editorState, newContent);\r\n           return  EditorState.forceSelection(newEditorState, contentStateWithLink.getSelectionAfter());\r\n         }\r\n         return {\r\n           idUserReceivedReply: props.idUserReceivedReply,\r\n           userReceivedReply: props.userReceivedReply,\r\n           editorState: insertText(props.userReceivedReply, props.idUserReceivedReply, state.editorState),\r\n           idUserReceivedReplyArr: [...state.idUserReceivedReplyArr, props.idUserReceivedReply]\r\n         };\r\n       }\r\n     }\r\n      // Return null to indicate no change to state.\r\n      return null;\r\n     }\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(convertToRaw(this.state.editorState.getCurrentContent()));\r\n    return (\r\n      <Wrapper>\r\n        <StyleEditor>\r\n          <Editor\r\n            editorState={this.state.editorState}\r\n            onChange={this.onChange}\r\n            plugins={plugins}\r\n            placeholder=\"Viết bình luận...\"\r\n          />\r\n        </StyleEditor>\r\n        <EmojiSuggestions />\r\n        <StyleEmoji>\r\n          <EmojiSelect />\r\n        </StyleEmoji>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}