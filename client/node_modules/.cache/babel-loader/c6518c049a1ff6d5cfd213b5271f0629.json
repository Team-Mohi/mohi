{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mode = undefined;\n\nvar _draftJs = require('draft-js');\n\nvar _getSearchText2 = require('../utils/getSearchText');\n\nvar _getSearchText3 = _interopRequireDefault(_getSearchText2);\n\nvar _emojiList = require('../utils/emojiList');\n\nvar _emojiList2 = _interopRequireDefault(_emojiList);\n\nvar _convertShortNameToUnicode = require('../utils/convertShortNameToUnicode');\n\nvar _convertShortNameToUnicode2 = _interopRequireDefault(_convertShortNameToUnicode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // This modifier can inserted emoji to current cursor position (with replace selected fragment),\n// or replaced emoji shortname like \":thumbsup:\". Behavior determined by `Mode` parameter.\n\n\nvar Mode = {\n  INSERT: 'INSERT',\n  // insert emoji to current cursor position\n  REPLACE: 'REPLACE' // replace emoji shortname\n\n};\n\nvar addEmoji = function addEmoji(editorState, emojiShortName) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Mode.INSERT;\n  var unicode = _emojiList2.default.list[emojiShortName][0];\n  var emoji = (0, _convertShortNameToUnicode2.default)(unicode);\n  var contentState = editorState.getCurrentContent();\n  var contentStateWithEntity = contentState.createEntity('emoji', 'IMMUTABLE', {\n    emojiUnicode: emoji\n  });\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  var currentSelectionState = editorState.getSelection();\n  var emojiAddedContent = void 0;\n  var emojiEndPos = 0;\n  var blockSize = 0;\n\n  switch (mode) {\n    case Mode.INSERT:\n      {\n        // in case text is selected it is removed and then the emoji is added\n        var afterRemovalContentState = _draftJs.Modifier.removeRange(contentState, currentSelectionState, 'backward'); // deciding on the position to insert emoji\n\n\n        var targetSelection = afterRemovalContentState.getSelectionAfter();\n        emojiAddedContent = _draftJs.Modifier.insertText(afterRemovalContentState, targetSelection, emoji, null, entityKey);\n        emojiEndPos = targetSelection.getAnchorOffset();\n        var blockKey = targetSelection.getAnchorKey();\n        blockSize = contentState.getBlockForKey(blockKey).getLength();\n        break;\n      }\n\n    case Mode.REPLACE:\n      {\n        var _getSearchText = (0, _getSearchText3.default)(editorState, currentSelectionState),\n            begin = _getSearchText.begin,\n            end = _getSearchText.end; // Get the selection of the :emoji: search text\n\n\n        var emojiTextSelection = currentSelectionState.merge({\n          anchorOffset: begin,\n          focusOffset: end\n        });\n        emojiAddedContent = _draftJs.Modifier.replaceText(contentState, emojiTextSelection, emoji, null, entityKey);\n        emojiEndPos = end;\n\n        var _blockKey = emojiTextSelection.getAnchorKey();\n\n        blockSize = contentState.getBlockForKey(_blockKey).getLength();\n        break;\n      }\n\n    default:\n      throw new Error('Unidentified value of \"mode\"');\n  } // If the emoji is inserted at the end, a space is appended right after for\n  // a smooth writing experience.\n\n\n  if (emojiEndPos === blockSize) {\n    emojiAddedContent = _draftJs.Modifier.insertText(emojiAddedContent, emojiAddedContent.getSelectionAfter(), ' ');\n  }\n\n  var newEditorState = _draftJs.EditorState.push(editorState, emojiAddedContent, 'insert-emoji');\n\n  return _draftJs.EditorState.forceSelection(newEditorState, emojiAddedContent.getSelectionAfter());\n};\n\nexports.default = addEmoji;\nexports.Mode = Mode;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/draft-js-emoji-plugin/lib/modifiers/addEmoji.js"],"names":["Object","defineProperty","exports","value","Mode","undefined","_draftJs","require","_getSearchText2","_getSearchText3","_interopRequireDefault","_emojiList","_emojiList2","_convertShortNameToUnicode","_convertShortNameToUnicode2","obj","__esModule","default","INSERT","REPLACE","addEmoji","editorState","emojiShortName","mode","arguments","length","unicode","list","emoji","contentState","getCurrentContent","contentStateWithEntity","createEntity","emojiUnicode","entityKey","getLastCreatedEntityKey","currentSelectionState","getSelection","emojiAddedContent","emojiEndPos","blockSize","afterRemovalContentState","Modifier","removeRange","targetSelection","getSelectionAfter","insertText","getAnchorOffset","blockKey","getAnchorKey","getBlockForKey","getLength","_getSearchText","begin","end","emojiTextSelection","merge","anchorOffset","focusOffset","replaceText","_blockKey","Error","newEditorState","EditorState","push","forceSelection"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.Mode = undefined;\r\n\r\nvar _draftJs = require('draft-js');\r\n\r\nvar _getSearchText2 = require('../utils/getSearchText');\r\n\r\nvar _getSearchText3 = _interopRequireDefault(_getSearchText2);\r\n\r\nvar _emojiList = require('../utils/emojiList');\r\n\r\nvar _emojiList2 = _interopRequireDefault(_emojiList);\r\n\r\nvar _convertShortNameToUnicode = require('../utils/convertShortNameToUnicode');\r\n\r\nvar _convertShortNameToUnicode2 = _interopRequireDefault(_convertShortNameToUnicode);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n// This modifier can inserted emoji to current cursor position (with replace selected fragment),\r\n// or replaced emoji shortname like \":thumbsup:\". Behavior determined by `Mode` parameter.\r\nvar Mode = {\r\n  INSERT: 'INSERT', // insert emoji to current cursor position\r\n  REPLACE: 'REPLACE' // replace emoji shortname\r\n};\r\n\r\nvar addEmoji = function addEmoji(editorState, emojiShortName) {\r\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Mode.INSERT;\r\n\r\n  var unicode = _emojiList2.default.list[emojiShortName][0];\r\n  var emoji = (0, _convertShortNameToUnicode2.default)(unicode);\r\n\r\n  var contentState = editorState.getCurrentContent();\r\n  var contentStateWithEntity = contentState.createEntity('emoji', 'IMMUTABLE', { emojiUnicode: emoji });\r\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\r\n  var currentSelectionState = editorState.getSelection();\r\n\r\n  var emojiAddedContent = void 0;\r\n  var emojiEndPos = 0;\r\n  var blockSize = 0;\r\n\r\n  switch (mode) {\r\n    case Mode.INSERT:\r\n      {\r\n        // in case text is selected it is removed and then the emoji is added\r\n        var afterRemovalContentState = _draftJs.Modifier.removeRange(contentState, currentSelectionState, 'backward');\r\n\r\n        // deciding on the position to insert emoji\r\n        var targetSelection = afterRemovalContentState.getSelectionAfter();\r\n\r\n        emojiAddedContent = _draftJs.Modifier.insertText(afterRemovalContentState, targetSelection, emoji, null, entityKey);\r\n\r\n        emojiEndPos = targetSelection.getAnchorOffset();\r\n        var blockKey = targetSelection.getAnchorKey();\r\n        blockSize = contentState.getBlockForKey(blockKey).getLength();\r\n\r\n        break;\r\n      }\r\n\r\n    case Mode.REPLACE:\r\n      {\r\n        var _getSearchText = (0, _getSearchText3.default)(editorState, currentSelectionState),\r\n            begin = _getSearchText.begin,\r\n            end = _getSearchText.end;\r\n\r\n        // Get the selection of the :emoji: search text\r\n\r\n\r\n        var emojiTextSelection = currentSelectionState.merge({\r\n          anchorOffset: begin,\r\n          focusOffset: end\r\n        });\r\n\r\n        emojiAddedContent = _draftJs.Modifier.replaceText(contentState, emojiTextSelection, emoji, null, entityKey);\r\n\r\n        emojiEndPos = end;\r\n        var _blockKey = emojiTextSelection.getAnchorKey();\r\n        blockSize = contentState.getBlockForKey(_blockKey).getLength();\r\n\r\n        break;\r\n      }\r\n\r\n    default:\r\n      throw new Error('Unidentified value of \"mode\"');\r\n  }\r\n\r\n  // If the emoji is inserted at the end, a space is appended right after for\r\n  // a smooth writing experience.\r\n  if (emojiEndPos === blockSize) {\r\n    emojiAddedContent = _draftJs.Modifier.insertText(emojiAddedContent, emojiAddedContent.getSelectionAfter(), ' ');\r\n  }\r\n\r\n  var newEditorState = _draftJs.EditorState.push(editorState, emojiAddedContent, 'insert-emoji');\r\n  return _draftJs.EditorState.forceSelection(newEditorState, emojiAddedContent.getSelectionAfter());\r\n};\r\n\r\nexports.default = addEmoji;\r\nexports.Mode = Mode;"]},"metadata":{},"sourceType":"script"}