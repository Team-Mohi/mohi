{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\n\nvar getStyleProperty = require(\"./getStyleProperty\");\n/**\r\n * @param {DOMNode} element [description]\r\n * @param {string} name Overflow style property name.\r\n * @return {boolean} True if the supplied ndoe is scrollable.\r\n */\n\n\nfunction _isNodeScrollable(element, name) {\n  var overflow = Style.get(element, name);\n  return overflow === 'auto' || overflow === 'scroll';\n}\n/**\r\n * Utilities for querying and mutating style properties.\r\n */\n\n\nvar Style = {\n  /**\r\n   * Gets the style property for the supplied node. This will return either the\r\n   * computed style, if available, or the declared style.\r\n   *\r\n   * @param {DOMNode} node\r\n   * @param {string} name Style property name.\r\n   * @return {?string} Style property value.\r\n   */\n  get: getStyleProperty,\n\n  /**\r\n   * Determines the nearest ancestor of a node that is scrollable.\r\n   *\r\n   * NOTE: This can be expensive if used repeatedly or on a node nested deeply.\r\n   *\r\n   * @param {?DOMNode} node Node from which to start searching.\r\n   * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.\r\n   */\n  getScrollParent: function getScrollParent(node) {\n    if (!node) {\n      return null;\n    }\n\n    var ownerDocument = node.ownerDocument;\n\n    while (node && node !== ownerDocument.body) {\n      if (_isNodeScrollable(node, 'overflow') || _isNodeScrollable(node, 'overflowY') || _isNodeScrollable(node, 'overflowX')) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n\n    return ownerDocument.defaultView || ownerDocument.parentWindow;\n  }\n};\nmodule.exports = Style;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/fbjs/lib/Style.js"],"names":["getStyleProperty","require","_isNodeScrollable","element","name","overflow","Style","get","getScrollParent","node","ownerDocument","body","parentNode","defaultView","parentWindow","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;AAQA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;AACA;;;;;;;AAOA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0C;AACxC,MAAIC,QAAQ,GAAGC,KAAK,CAACC,GAAN,CAAUJ,OAAV,EAAmBC,IAAnB,CAAf;AACA,SAAOC,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,QAA3C;AACD;AACD;;;;;AAKA,IAAIC,KAAK,GAAG;AACV;;;;;;;;AAQAC,EAAAA,GAAG,EAAEP,gBATK;;AAWV;;;;;;;;AAQAQ,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC9C,QAAI,CAACA,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,QAAIC,aAAa,GAAGD,IAAI,CAACC,aAAzB;;AAEA,WAAOD,IAAI,IAAIA,IAAI,KAAKC,aAAa,CAACC,IAAtC,EAA4C;AAC1C,UAAIT,iBAAiB,CAACO,IAAD,EAAO,UAAP,CAAjB,IAAuCP,iBAAiB,CAACO,IAAD,EAAO,WAAP,CAAxD,IAA+EP,iBAAiB,CAACO,IAAD,EAAO,WAAP,CAApG,EAAyH;AACvH,eAAOA,IAAP;AACD;;AAEDA,MAAAA,IAAI,GAAGA,IAAI,CAACG,UAAZ;AACD;;AAED,WAAOF,aAAa,CAACG,WAAd,IAA6BH,aAAa,CAACI,YAAlD;AACD;AAnCS,CAAZ;AAqCAC,MAAM,CAACC,OAAP,GAAiBV,KAAjB","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\r\nvar getStyleProperty = require(\"./getStyleProperty\");\r\n/**\r\n * @param {DOMNode} element [description]\r\n * @param {string} name Overflow style property name.\r\n * @return {boolean} True if the supplied ndoe is scrollable.\r\n */\r\n\r\n\r\nfunction _isNodeScrollable(element, name) {\r\n  var overflow = Style.get(element, name);\r\n  return overflow === 'auto' || overflow === 'scroll';\r\n}\r\n/**\r\n * Utilities for querying and mutating style properties.\r\n */\r\n\r\n\r\nvar Style = {\r\n  /**\r\n   * Gets the style property for the supplied node. This will return either the\r\n   * computed style, if available, or the declared style.\r\n   *\r\n   * @param {DOMNode} node\r\n   * @param {string} name Style property name.\r\n   * @return {?string} Style property value.\r\n   */\r\n  get: getStyleProperty,\r\n\r\n  /**\r\n   * Determines the nearest ancestor of a node that is scrollable.\r\n   *\r\n   * NOTE: This can be expensive if used repeatedly or on a node nested deeply.\r\n   *\r\n   * @param {?DOMNode} node Node from which to start searching.\r\n   * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.\r\n   */\r\n  getScrollParent: function getScrollParent(node) {\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    var ownerDocument = node.ownerDocument;\r\n\r\n    while (node && node !== ownerDocument.body) {\r\n      if (_isNodeScrollable(node, 'overflow') || _isNodeScrollable(node, 'overflowY') || _isNodeScrollable(node, 'overflowX')) {\r\n        return node;\r\n      }\r\n\r\n      node = node.parentNode;\r\n    }\r\n\r\n    return ownerDocument.defaultView || ownerDocument.parentWindow;\r\n  }\r\n};\r\nmodule.exports = Style;"]},"metadata":{},"sourceType":"script"}