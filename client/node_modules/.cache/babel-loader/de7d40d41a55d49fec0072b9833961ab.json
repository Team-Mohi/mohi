{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('ustk') ? JSON.parse(localStorage.getItem('ustk')).access_token : '';\n\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n\n  return config;\n}, error => {\n  console.log(error);\n  Promise.reject(error);\n});\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\nif (localStorage.getItem('ustk')) {\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        return new Promise(function (resolve, reject) {\n          failedQueue.push({\n            resolve,\n            reject\n          });\n        }).then(token => {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return axios(originalRequest);\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      }\n\n      originalRequest._retry = true;\n      isRefreshing = true;\n      return new Promise(function (resolve, reject) {\n        axios.post(API_REFRESH_TOKEN, {\n          'token': JSON.parse(localStorage.getItem('ustk')).access_token\n        }).then(res => {\n          if (res.status === 200) {\n            localStorage.setItem('ustk', JSON.stringify(res.data));\n            let new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\n            processQueue(null, res.data.access_token);\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\n            originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n            resolve(axios(originalRequest));\n          }\n        }).then(() => {\n          isRefreshing = false;\n        });\n      });\n    }\n\n    return Promise.reject(error);\n  });\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","interceptors","request","use","config","token","localStorage","getItem","JSON","parse","access_token","headers","error","console","log","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","originalRequest","status","_retry","push","then","catch","err","post","res","setItem","stringify","data","new_token","defaults","common"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\naxios.interceptors.request.use(\r\n   config => {\r\n      const token = localStorage.getItem('ustk') ? JSON.parse(localStorage.getItem('ustk')).access_token: '';\r\n       if (token) {\r\n           config.headers['Authorization'] = 'Bearer ' + token;\r\n       }\r\n       return config;\r\n   },\r\n   error => {\r\n     console.log(error);\r\n       Promise.reject(error)\r\n });\r\n\r\n let isRefreshing = false;\r\n let failedQueue = [];\r\n\r\n const processQueue = (error, token = null) => {\r\n   failedQueue.forEach(prom => {\r\n     if (error) {\r\n       prom.reject(error);\r\n     } else {\r\n       prom.resolve(token);\r\n     }\r\n   })\r\n\r\n   failedQueue = [];\r\n }\r\n\r\nif(localStorage.getItem('ustk')){\r\naxios.interceptors.response.use((response) => {\r\n   return response\r\n},\r\nfunction (error) {\r\n   const originalRequest = error.config;\r\n   if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n\r\n     if (isRefreshing) {\r\n        return new Promise(function(resolve, reject) {\r\n          failedQueue.push({resolve, reject})\r\n        }).then(token => {\r\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\r\n          return axios(originalRequest);\r\n        }).catch(err => {\r\n          return Promise.reject(err);\r\n        })\r\n      }\r\n\r\n       originalRequest._retry = true;\r\n       isRefreshing = true;\r\n       return new Promise(function (resolve, reject) {\r\n         axios.post(API_REFRESH_TOKEN,\r\n             {\r\n                 'token' : JSON.parse(localStorage.getItem('ustk')).access_token\r\n             })\r\n             .then((res) => {\r\n                 if (res.status === 200) {\r\n                     localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                     let new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n                     processQueue(null, res.data.access_token);\r\n                     axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\r\n                     originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                     resolve(axios(originalRequest));\r\n                 }\r\n             })\r\n             .then(() => { isRefreshing = false })\r\n        })\r\n   }\r\n   return Promise.reject(error);\r\n});\r\n}\r\n"]},"metadata":{},"sourceType":"module"}