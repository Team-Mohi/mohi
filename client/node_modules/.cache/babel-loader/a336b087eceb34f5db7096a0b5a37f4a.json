{"ast":null,"code":"import * as Types from './../Constants/ActionTypes.jsx';\nconst initialState = {\n  loading: true,\n  list: []\n};\n\nvar findItem = (arr, id) => {\n  var result = {\n    index: -1,\n    item: ''\n  };\n  arr.forEach((item, i) => {\n    if (item.id === id) {\n      result.index = i;\n      result.item = item;\n    }\n  });\n  return result;\n};\n\nexport const message = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.REQUEST_MESSAGE_POPUP:\n      return { ...state\n      };\n      break;\n\n    case Types.RESPONSE_MESSAGE_POPUP:\n      return {\n        loading: !state.loading,\n        list: action.payload\n      };\n      break;\n\n    case Types.ADD_NEW_MESSAGE_OF_LIST:\n      if (action.payload.type === 'send') {\n        //find message of usereceived\n        var messReceived = findItem(state.list, action.payload.to.id);\n\n        if (messReceived.index >= 0) {\n          state.list[messReceived.index].pivot = action.payload.message[0];\n        }\n      }\n\n      if (action.payload.type === 'received') {\n        //find message of send\n        var messSend = findItem(state.list, action.payload.from.id);\n\n        if (messSend.index >= 0) {\n          state.list[messSend.index].pivot = action.payload.message[0];\n        } else {\n          let newMessOfList = action.payload.from;\n          newMessOfList['pivot'] = action.payload.message[0];\n          state.list = [newMessOfList, ...state.list];\n        }\n      }\n\n      return { ...state\n      };\n      break;\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["D:/Web/mohi/client/src/Reducers/Message.jsx"],"names":["Types","initialState","loading","list","findItem","arr","id","result","index","item","forEach","i","message","state","action","type","REQUEST_MESSAGE_POPUP","RESPONSE_MESSAGE_POPUP","payload","ADD_NEW_MESSAGE_OF_LIST","messReceived","to","pivot","messSend","from","newMessOfList"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,gCAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAC,IADW;AAEnBC,EAAAA,IAAI,EAAG;AAFY,CAArB;;AAKA,IAAIC,QAAQ,GAAG,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC1B,MAAIC,MAAM,GAAG;AACXC,IAAAA,KAAK,EAAE,CAAC,CADG;AAEXC,IAAAA,IAAI,EAAE;AAFK,GAAb;AAKAJ,EAAAA,GAAG,CAACK,OAAJ,CAAY,CAACD,IAAD,EAAOE,CAAP,KAAa;AACvB,QAAGF,IAAI,CAACH,EAAL,KAAYA,EAAf,EAAkB;AAChBC,MAAAA,MAAM,CAACC,KAAP,GAAeG,CAAf;AACAJ,MAAAA,MAAM,CAACE,IAAP,GAAcA,IAAd;AACD;AACF,GALD;AAOA,SAAOF,MAAP;AACD,CAdD;;AAgBA,OAAO,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,KAAK,CAACgB,qBAAX;AACE,aAAO,EACL,GAAGH;AADE,OAAP;AAGA;;AACF,SAAKb,KAAK,CAACiB,sBAAX;AACE,aAAO;AACLf,QAAAA,OAAO,EAAE,CAACW,KAAK,CAACX,OADX;AAELC,QAAAA,IAAI,EAAEW,MAAM,CAACI;AAFR,OAAP;AAIA;;AACF,SAAKlB,KAAK,CAACmB,uBAAX;AACE,UAAGL,MAAM,CAACI,OAAP,CAAeH,IAAf,KAAwB,MAA3B,EAAkC;AAChC;AACE,YAAIK,YAAY,GAAGhB,QAAQ,CAACS,KAAK,CAACV,IAAP,EAAaW,MAAM,CAACI,OAAP,CAAeG,EAAf,CAAkBf,EAA/B,CAA3B;;AAEA,YAAGc,YAAY,CAACZ,KAAb,IAAsB,CAAzB,EAA2B;AACzBK,UAAAA,KAAK,CAACV,IAAN,CAAWiB,YAAY,CAACZ,KAAxB,EAA+Bc,KAA/B,GAAuCR,MAAM,CAACI,OAAP,CAAeN,OAAf,CAAuB,CAAvB,CAAvC;AACD;AACJ;;AAED,UAAGE,MAAM,CAACI,OAAP,CAAeH,IAAf,KAAwB,UAA3B,EAAsC;AACpC;AACE,YAAIQ,QAAQ,GAAGnB,QAAQ,CAACS,KAAK,CAACV,IAAP,EAAaW,MAAM,CAACI,OAAP,CAAeM,IAAf,CAAoBlB,EAAjC,CAAvB;;AAEA,YAAGiB,QAAQ,CAACf,KAAT,IAAkB,CAArB,EAAuB;AACrBK,UAAAA,KAAK,CAACV,IAAN,CAAWoB,QAAQ,CAACf,KAApB,EAA2Bc,KAA3B,GAAmCR,MAAM,CAACI,OAAP,CAAeN,OAAf,CAAuB,CAAvB,CAAnC;AACD,SAFD,MAEM;AACJ,cAAIa,aAAa,GAAGX,MAAM,CAACI,OAAP,CAAeM,IAAnC;AACAC,UAAAA,aAAa,CAAC,OAAD,CAAb,GAAyBX,MAAM,CAACI,OAAP,CAAeN,OAAf,CAAuB,CAAvB,CAAzB;AACAC,UAAAA,KAAK,CAACV,IAAN,GAAa,CAACsB,aAAD,EAAgB,GAAGZ,KAAK,CAACV,IAAzB,CAAb;AACD;AACJ;;AAED,aAAO,EAAC,GAAGU;AAAJ,OAAP;AACA;;AACF;AAAS,aAAO,EAAC,GAAGA;AAAJ,OAAP;AArCX;AAuCD,CAxCM","sourcesContent":["import * as Types from './../Constants/ActionTypes.jsx';\r\n\r\nconst initialState = {\r\n  loading:true,\r\n  list : []\r\n};\r\n\r\nvar findItem = (arr, id) => {\r\n  var result = {\r\n    index: -1,\r\n    item: ''\r\n  };\r\n\r\n  arr.forEach((item, i) => {\r\n    if(item.id === id){\r\n      result.index = i;\r\n      result.item = item;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport const message = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Types.REQUEST_MESSAGE_POPUP:\r\n      return {\r\n        ...state\r\n      }\r\n      break;\r\n    case Types.RESPONSE_MESSAGE_POPUP:\r\n      return {\r\n        loading: !state.loading,\r\n        list: action.payload\r\n      }\r\n      break;\r\n    case Types.ADD_NEW_MESSAGE_OF_LIST:\r\n      if(action.payload.type === 'send'){\r\n        //find message of usereceived\r\n          var messReceived = findItem(state.list, action.payload.to.id);\r\n\r\n          if(messReceived.index >= 0){\r\n            state.list[messReceived.index].pivot = action.payload.message[0];\r\n          }\r\n      }\r\n\r\n      if(action.payload.type === 'received'){\r\n        //find message of send\r\n          var messSend = findItem(state.list, action.payload.from.id);\r\n\r\n          if(messSend.index >= 0){\r\n            state.list[messSend.index].pivot = action.payload.message[0];\r\n          }else {\r\n            let newMessOfList = action.payload.from;\r\n            newMessOfList['pivot'] = action.payload.message[0]\r\n            state.list = [newMessOfList, ...state.list]\r\n          }\r\n      }\r\n\r\n      return {...state}\r\n      break;\r\n    default: return {...state}\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}