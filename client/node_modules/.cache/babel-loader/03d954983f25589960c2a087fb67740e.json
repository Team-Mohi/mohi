{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\n'use strict';\n\nvar getDocumentScrollElement = require(\"./getDocumentScrollElement\");\n\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\n/**\r\n * Gets the scroll position of the supplied element or window.\r\n *\r\n * The return values are bounded. This means that if the scroll position is\r\n * negative or exceeds the element boundaries (which is possible using inertial\r\n * scrolling), you will get zero or the maximum scroll position, respectively.\r\n *\r\n * If you need the unbound scroll position, use `getUnboundedScrollPosition`.\r\n *\r\n * @param {DOMWindow|DOMElement} scrollable\r\n * @return {object} Map with `x` and `y` keys.\r\n */\n\n\nfunction getScrollPosition(scrollable) {\n  var documentScrollElement = getDocumentScrollElement(scrollable.ownerDocument || scrollable.document);\n\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {\n    scrollable = documentScrollElement;\n  }\n\n  var scrollPosition = getUnboundedScrollPosition(scrollable);\n  var viewport = scrollable === documentScrollElement ? scrollable.ownerDocument.documentElement : scrollable;\n  var xMax = scrollable.scrollWidth - viewport.clientWidth;\n  var yMax = scrollable.scrollHeight - viewport.clientHeight;\n  scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));\n  scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));\n  return scrollPosition;\n}\n\nmodule.exports = getScrollPosition;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/fbjs/lib/getScrollPosition.js"],"names":["getDocumentScrollElement","require","getUnboundedScrollPosition","getScrollPosition","scrollable","documentScrollElement","ownerDocument","document","Window","scrollPosition","viewport","documentElement","xMax","scrollWidth","clientWidth","yMax","scrollHeight","clientHeight","x","Math","max","min","y","module","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAtC;;AAEA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAAxC;AACA;;;;;;;;;;;;;;AAcA,SAASE,iBAAT,CAA2BC,UAA3B,EAAuC;AACrC,MAAIC,qBAAqB,GAAGL,wBAAwB,CAACI,UAAU,CAACE,aAAX,IAA4BF,UAAU,CAACG,QAAxC,CAApD;;AAEA,MAAIH,UAAU,CAACI,MAAX,IAAqBJ,UAAU,YAAYA,UAAU,CAACI,MAA1D,EAAkE;AAChEJ,IAAAA,UAAU,GAAGC,qBAAb;AACD;;AAED,MAAII,cAAc,GAAGP,0BAA0B,CAACE,UAAD,CAA/C;AACA,MAAIM,QAAQ,GAAGN,UAAU,KAAKC,qBAAf,GAAuCD,UAAU,CAACE,aAAX,CAAyBK,eAAhE,GAAkFP,UAAjG;AACA,MAAIQ,IAAI,GAAGR,UAAU,CAACS,WAAX,GAAyBH,QAAQ,CAACI,WAA7C;AACA,MAAIC,IAAI,GAAGX,UAAU,CAACY,YAAX,GAA0BN,QAAQ,CAACO,YAA9C;AACAR,EAAAA,cAAc,CAACS,CAAf,GAAmBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASZ,cAAc,CAACS,CAAxB,EAA2BN,IAA3B,CAAZ,CAAnB;AACAH,EAAAA,cAAc,CAACa,CAAf,GAAmBH,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASZ,cAAc,CAACa,CAAxB,EAA2BP,IAA3B,CAAZ,CAAnB;AACA,SAAON,cAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\r\n'use strict';\r\n\r\nvar getDocumentScrollElement = require(\"./getDocumentScrollElement\");\r\n\r\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\r\n/**\r\n * Gets the scroll position of the supplied element or window.\r\n *\r\n * The return values are bounded. This means that if the scroll position is\r\n * negative or exceeds the element boundaries (which is possible using inertial\r\n * scrolling), you will get zero or the maximum scroll position, respectively.\r\n *\r\n * If you need the unbound scroll position, use `getUnboundedScrollPosition`.\r\n *\r\n * @param {DOMWindow|DOMElement} scrollable\r\n * @return {object} Map with `x` and `y` keys.\r\n */\r\n\r\n\r\nfunction getScrollPosition(scrollable) {\r\n  var documentScrollElement = getDocumentScrollElement(scrollable.ownerDocument || scrollable.document);\r\n\r\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {\r\n    scrollable = documentScrollElement;\r\n  }\r\n\r\n  var scrollPosition = getUnboundedScrollPosition(scrollable);\r\n  var viewport = scrollable === documentScrollElement ? scrollable.ownerDocument.documentElement : scrollable;\r\n  var xMax = scrollable.scrollWidth - viewport.clientWidth;\r\n  var yMax = scrollable.scrollHeight - viewport.clientHeight;\r\n  scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));\r\n  scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));\r\n  return scrollPosition;\r\n}\r\n\r\nmodule.exports = getScrollPosition;"]},"metadata":{},"sourceType":"script"}