{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\NewFeed\\\\Newfeed.jsx\";\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { Layout } from 'antd';\nimport './NewFeed.css';\nimport { PostNewFeed } from './PostNewFeed.jsx';\nimport CreatePostContainer from './../../Containers/CreatePostContainer.jsx';\nimport Story from './Story.jsx';\nimport NewPost from './NewPost.jsx';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { skeletonPostNewFeed } from './../Skeleton/index.jsx';\nimport { setCurrentPage } from './../../Actions/index.jsx';\nimport { PUBLIC_URL } from './../../Constants/public.jsx';\n\nfunction NewFeed(props, {\n  posts\n}) {\n  const {\n    Content\n  } = Layout;\n  const dispatch = useDispatch();\n  const observer = useRef();\n  const {\n    listPosts,\n    loading,\n    error,\n    hasMore,\n    loadingAddComment\n  } = useSelector(state => state.posts);\n  const [newPost, setNewPost] = useState([]);\n  const [isNewPost, setIsNewPost] = useState(false);\n  const [errPost, setErrPost] = useState(false);\n  const lastNewFeed = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        dispatch(setCurrentPage());\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n\n  const sendReactionPost = (reaction, postId) => {\n    props.sendReactionPost(reaction, postId);\n  };\n\n  const onSubmitComment = (value, idPost) => {\n    props.onSubmitComment(value, idPost);\n  };\n\n  const loadingSendRequestSetting = (type, idPost, idUser) => {\n    props.loadingSendRequestSetting(type, idPost, idUser);\n\n    if (type === 'hidePost' || type === 'hideAllPost') {// let a = list.filter(i => i.id !== idPost)\n      // setList(a)\n    }\n  };\n\n  const NoPost = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"new-feed-empty content-hello\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, \"Mohi\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: PUBLIC_URL + `images/nopost.jpg`,\n      alt: \"B\\u1EA3ng tin kh\\xF4ng c\\xF3 b\\xE0i vi\\u1EBFt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'rgba(0,128,128)',\n        fontSize: '15px',\n        fontWeight: '600'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, \"H\\xE3y k\\u1EBFt b\\u1EA1n \\u0111\\u1EC3 nh\\u1EADn \\u0111\\u01B0\\u1EE3c nhi\\u1EC1u b\\xE0i vi\\u1EBFt h\\u01A1n t\\u1EEB b\\u1EA1n b\\xE8\")));\n  };\n\n  const successCreatePost = data => {\n    setNewPost(prevList => {\n      return [...new Set([...prevList, data])];\n    });\n    setIsNewPost(true);\n  };\n\n  const errorCreatePost = () => {\n    setErrPost(true);\n    setIsNewPost(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Content, {\n    className: \"pl-3 pr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CreatePostContainer, {\n    errorCreatePost: errorCreatePost,\n    successCreatePost: successCreatePost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), isNewPost ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, newPost.map((post, index) => {\n    return /*#__PURE__*/React.createElement(NewPost, {\n      post: post,\n      errPost: errPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    });\n  })) : null, listPosts.map((post, index) => /*#__PURE__*/React.createElement(PostNewFeed, {\n    key: index,\n    post: post,\n    ref: lastNewFeed,\n    sendReactionPost: sendReactionPost,\n    onSubmitComment: onSubmitComment,\n    loadingAddComment: loadingAddComment,\n    loadingSendRequestSetting: loadingSendRequestSetting,\n    loadingSetting: props.loadingSetting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 45\n    }\n  })), loading && skeletonPostNewFeed, !loading && !listPosts.length && /*#__PURE__*/React.createElement(NoPost, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 48\n    }\n  }), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }, \"\\u0110\\xE3 x\\u1EA3y ra l\\u1ED7i kh\\xF4ng mong mu\\u1ED1n vui l\\xF2ng t\\u1EA3i l\\u1EA1i trang\"));\n}\n\nexport default NewFeed;","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/NewFeed/Newfeed.jsx"],"names":["React","useCallback","useRef","useState","useEffect","Layout","PostNewFeed","CreatePostContainer","Story","NewPost","useSelector","useDispatch","skeletonPostNewFeed","setCurrentPage","PUBLIC_URL","NewFeed","props","posts","Content","dispatch","observer","listPosts","loading","error","hasMore","loadingAddComment","state","newPost","setNewPost","isNewPost","setIsNewPost","errPost","setErrPost","lastNewFeed","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","sendReactionPost","reaction","postId","onSubmitComment","value","idPost","loadingSendRequestSetting","type","idUser","NoPost","color","fontSize","fontWeight","successCreatePost","data","prevList","Set","errorCreatePost","map","post","index","loadingSetting","length"],"mappings":"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","sourcesContent":["import React, {useCallback, useRef, useState, useEffect} from 'react';\r\nimport { Layout } from 'antd';\r\nimport './NewFeed.css';\r\nimport {PostNewFeed} from './PostNewFeed.jsx';\r\nimport CreatePostContainer from './../../Containers/CreatePostContainer.jsx';\r\nimport Story from './Story.jsx';\r\nimport NewPost from './NewPost.jsx';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {skeletonPostNewFeed} from './../Skeleton/index.jsx';\r\nimport {setCurrentPage} from './../../Actions/index.jsx';\r\nimport {PUBLIC_URL} from './../../Constants/public.jsx';\r\n\r\nfunction NewFeed(props, { posts }) {\r\n    const { Content } = Layout;\r\n    const dispatch = useDispatch();\r\n    const observer = useRef();\r\n    const { listPosts, loading, error, hasMore, loadingAddComment } = useSelector(state => state.posts);\r\n    const [newPost, setNewPost] = useState([]);\r\n    const [isNewPost, setIsNewPost] = useState(false);\r\n    const [errPost, setErrPost] = useState(false);\r\n\r\n    const lastNewFeed = useCallback(node => {\r\n      if(loading) return\r\n        if(observer.current) observer.current.disconnect()\r\n        observer.current = new IntersectionObserver(entries => {\r\n          if(entries[0].isIntersecting && hasMore){\r\n            dispatch(setCurrentPage())\r\n          }\r\n        })\r\n      if(node) observer.current.observe(node)\r\n    }, [loading, hasMore])\r\n\r\n    const sendReactionPost = (reaction, postId) => {\r\n      props.sendReactionPost(reaction, postId)\r\n    }\r\n\r\n    const onSubmitComment = (value, idPost) => {\r\n      props.onSubmitComment(value, idPost)\r\n    }\r\n\r\n    const loadingSendRequestSetting = (type, idPost, idUser) => {\r\n      props.loadingSendRequestSetting(type, idPost, idUser)\r\n      if(type === 'hidePost' || type === 'hideAllPost'){\r\n        // let a = list.filter(i => i.id !== idPost)\r\n        // setList(a)\r\n      }\r\n    }\r\n\r\n    const NoPost = () => {\r\n        return(\r\n          <React.Fragment>\r\n            <div className=\"new-feed-empty content-hello\">\r\n              <p>Mohi</p>\r\n              <img src={PUBLIC_URL + `images/nopost.jpg`} alt=\"Bảng tin không có bài viết\" />\r\n            <div style={{color: 'rgba(0,128,128)', fontSize: '15px', fontWeight: '600'}}>Hãy kết bạn để nhận được nhiều bài viết hơn từ bạn bè</div>\r\n            </div>\r\n          </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const successCreatePost = (data) => {\r\n      setNewPost(prevList =>{\r\n        return [...new Set([...prevList, data])]\r\n      })\r\n      setIsNewPost(true)\r\n    }\r\n\r\n    const errorCreatePost = () => {\r\n      setErrPost(true)\r\n      setIsNewPost(true)\r\n    }\r\n\r\n    return (\r\n        <Content className=\"pl-3 pr-3\">\r\n            <CreatePostContainer errorCreatePost={errorCreatePost} successCreatePost={successCreatePost}/>\r\n            {isNewPost ?\r\n              <React.Fragment>\r\n                {newPost.map((post, index) => {\r\n                  return(\r\n                    <NewPost post={post} errPost={errPost}/>\r\n                  )\r\n                })}\r\n              </React.Fragment>\r\n            : null}\r\n            {listPosts.map((post, index) => <PostNewFeed  key={index} post={post} ref={lastNewFeed} sendReactionPost={sendReactionPost} onSubmitComment={onSubmitComment} loadingAddComment={loadingAddComment} loadingSendRequestSetting={loadingSendRequestSetting} loadingSetting={props.loadingSetting}/> )}\r\n            {loading && skeletonPostNewFeed}\r\n            {!loading && !listPosts.length  && <NoPost/>}\r\n            {error && <div>Đã xảy ra lỗi không mong muốn vui lòng tải lại trang</div>}\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default NewFeed;\r\n"]},"metadata":{},"sourceType":"module"}