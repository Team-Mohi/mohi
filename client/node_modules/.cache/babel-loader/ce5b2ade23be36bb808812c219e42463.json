{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\SinglePost\\\\CommentEditor.jsx\";\nimport React, { Component } from \"react\";\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport { convertToRaw, getDefaultKeyBinding, KeyBindingUtil, ContentState, EditorState } from \"draft-js\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport style from 'styled-components';\nconst {\n  hasCommandModifier\n} = KeyBindingUtil;\nconst emojiPlugin = createEmojiPlugin({\n  useNativeArt: true\n});\nconst {\n  EmojiSuggestions,\n  EmojiSelect\n} = emojiPlugin;\nconst plugins = [emojiPlugin];\nconst text = ``;\nconst StyleEditor = style.div`\n  width: 100%;\n  max-height: 100px;\n  overflow-y: auto;\n  border: 1px solid #ddd;\n  margin-left: 10px;\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 30px;\n`;\nconst Wrapper = style.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\nconst StyleEmoji = style.div`\n  position: absolute;\n  right: 10px;\n  border: 0;\n  z-index: 2;\n`;\nexport default class CommentEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: createEditorStateWithText(text)\n    };\n\n    this.onChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n\n  focusCommentInput() {\n    this.commentInput.focus();\n  }\n\n  keyBindingFn(e) {\n    if (e.keyCode === 13) {\n      return 'submit-comment';\n    }\n\n    return getDefaultKeyBinding(e);\n  }\n\n  handleKeyCommand(command) {\n    if (command === 'submit-comment') {\n      const value = this.state.editorState.getCurrentContent().getPlainText();\n      const content = this.state.editorState.getCurrentContent();\n      const isEditorEmpty = !content.hasText();\n      const lengthOfTrimmedContent = value.trim().length;\n      const isContainOnlySpaces = !isEditorEmpty && !lengthOfTrimmedContent;\n\n      if (value && !isContainOnlySpaces) {\n        this.props.onSubmitComment(value);\n        const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\n        this.setState({\n          editorState\n        });\n      }\n\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StyleEditor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      keyBindingFn: this.keyBindingFn,\n      handleKeyCommand: this.handleKeyCommand,\n      editorState: this.state.editorState,\n      onChange: this.onChange,\n      plugins: plugins,\n      placeholder: \"Vi\\u1EBFt b\\xECnh lu\\u1EADn...\",\n      ref: element => {\n        this.commentInput = element;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(EmojiSuggestions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/SinglePost/CommentEditor.jsx"],"names":["React","Component","Editor","createEditorStateWithText","createEmojiPlugin","convertToRaw","getDefaultKeyBinding","KeyBindingUtil","ContentState","EditorState","style","hasCommandModifier","emojiPlugin","useNativeArt","EmojiSuggestions","EmojiSelect","plugins","text","StyleEditor","div","Wrapper","StyleEmoji","CommentEditor","constructor","props","state","editorState","onChange","setState","handleKeyCommand","bind","focusCommentInput","commentInput","focus","keyBindingFn","e","keyCode","command","value","getCurrentContent","getPlainText","content","isEditorEmpty","hasText","lengthOfTrimmedContent","trim","length","isContainOnlySpaces","onSubmitComment","push","createFromText","render","element"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Editor, { createEditorStateWithText} from \"draft-js-plugins-editor\";\r\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\r\nimport {convertToRaw, getDefaultKeyBinding, KeyBindingUtil, ContentState, EditorState} from \"draft-js\";\r\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\r\nimport style from 'styled-components';\r\n\r\nconst {hasCommandModifier} = KeyBindingUtil;\r\nconst emojiPlugin = createEmojiPlugin({\r\n  useNativeArt: true\r\n});\r\nconst { EmojiSuggestions, EmojiSelect } = emojiPlugin;\r\nconst plugins = [emojiPlugin];\r\nconst text = ``;\r\n\r\nconst StyleEditor = style.div`\r\n  width: 100%;\r\n  max-height: 100px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  padding: 5px 10px;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst Wrapper = style.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyleEmoji = style.div`\r\n  position: absolute;\r\n  right: 10px;\r\n  border: 0;\r\n  z-index: 2;\r\n`;\r\n\r\nexport default class CommentEditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\r\n  }\r\n    state = {\r\n      editorState: createEditorStateWithText(text)\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  };\r\n\r\n  focusCommentInput(){\r\n    this.commentInput.focus();\r\n  }\r\n\r\n  keyBindingFn(e){\r\n    if (e.keyCode === 13) {\r\n      return 'submit-comment'\r\n    }\r\n\r\n    return getDefaultKeyBinding(e)\r\n  }\r\n\r\n  handleKeyCommand(command){\r\n    if (command === 'submit-comment') {\r\n      const value = this.state.editorState.getCurrentContent().getPlainText();\r\n      const content = this.state.editorState.getCurrentContent();\r\n      const isEditorEmpty = !content.hasText();\r\n      const lengthOfTrimmedContent = value.trim().length;\r\n      const isContainOnlySpaces = !isEditorEmpty && !lengthOfTrimmedContent;\r\n\r\n      if(value && !isContainOnlySpaces) {\r\n        this.props.onSubmitComment(value)\r\n        const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\r\n        this.setState({ editorState });\r\n      }\r\n      return 'handled'\r\n    }\r\n\r\n    return 'not-handled'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <StyleEditor>\r\n          <Editor\r\n            keyBindingFn={this.keyBindingFn}\r\n            handleKeyCommand={this.handleKeyCommand}\r\n            editorState={this.state.editorState}\r\n            onChange={this.onChange}\r\n            plugins={plugins}\r\n            placeholder=\"Viết bình luận...\"\r\n            ref={(element) => {\r\n              this.commentInput = element;\r\n            }}\r\n          />\r\n          <EmojiSuggestions />\r\n        </StyleEditor>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}