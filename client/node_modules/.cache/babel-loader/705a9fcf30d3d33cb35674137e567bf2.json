{"ast":null,"code":"/*! @name aes-decrypter @version 3.0.2 @license Apache-2.0 */\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport Stream from '@videojs/vhs-utils/dist/stream.js';\nimport { unpad } from 'pkcs7';\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\n\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i;\n  var x;\n  var xInv;\n  var d = [];\n  var th = [];\n  var x2;\n  var x4;\n  var x8;\n  var s;\n  var tEnc;\n  var tDec; // Compute double and third tables\n\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x; // Compute MixColumns\n\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  } // Compactify. Considerable speedup on Firefox.\n\n\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n\n  return tables;\n};\n\nvar aesTables = null;\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = /*#__PURE__*/function () {\n  function AES(key) {\n    /**\n    * The expanded S-box and inverse S-box tables. These will be computed\n    * on the client so that we don't have to send them down the wire.\n    *\n    * There are two tables, _tables[0] is for encryption and\n    * _tables[1] is for decryption.\n    *\n    * The first 4 sub-tables are the expanded S-box with MixColumns. The\n    * last (_tables[01][4]) is the S-box itself.\n    *\n    * @private\n    */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    } // then make a copy of that object for use\n\n\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i;\n    var j;\n    var tmp;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    var encKey = key.slice(0);\n    var decKey = [];\n    this._key = [encKey, decKey]; // schedule encryption keys\n\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1]; // apply sbox\n\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    } // schedule decryption keys\n\n\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {number} encrypted0 the first word to decrypt\n   * @param {number} encrypted1 the second word to decrypt\n   * @param {number} encrypted2 the third word to decrypt\n   * @param {number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n\n  var _proto = AES.prototype;\n\n  _proto.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n    var key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n    var a = encrypted0 ^ key[0];\n    var b = encrypted3 ^ key[1];\n    var c = encrypted2 ^ key[2];\n    var d = encrypted1 ^ key[3];\n    var a2;\n    var b2;\n    var c2; // key.length === 2 ?\n\n    var nInnerRounds = key.length / 4 - 2;\n    var i;\n    var kIndex = 4;\n    var table = this._tables[1]; // load up the tables\n\n    var table0 = table[0];\n    var table1 = table[1];\n    var table2 = table[2];\n    var table3 = table[3];\n    var sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;\n      b = b2;\n      c = c2;\n    } // Last round.\n\n\n    for (i = 0; i < 4; i++) {\n      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;\n      a = b;\n      b = c;\n      c = d;\n      d = a2;\n    }\n  };\n\n  return AES;\n}();\n/**\n * A wrapper around the Stream class to use setTimeout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\n\nvar AsyncStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    var _this;\n\n    _this = _Stream.call(this, Stream) || this;\n    _this.jobs = [];\n    _this.delay = 1;\n    _this.timeout_ = null;\n    return _this;\n  }\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n\n  var _proto = AsyncStream.prototype;\n\n  _proto.processJob_ = function processJob_() {\n    this.jobs.shift()();\n\n    if (this.jobs.length) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    } else {\n      this.timeout_ = null;\n    }\n  }\n  /**\n   * push a job into the stream\n   *\n   * @param {Function} job the job to push into the stream\n   */\n  ;\n\n  _proto.push = function push(job) {\n    this.jobs.push(job);\n\n    if (!this.timeout_) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    }\n  };\n\n  return AsyncStream;\n}(Stream);\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\n\n\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\n\n\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n  var decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n\n  var init0;\n  var init1;\n  var init2;\n  var init3;\n  var encrypted0;\n  var encrypted1;\n  var encrypted2;\n  var encrypted3; // iteration variable\n\n  var wordIx; // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\n\nvar Decrypter = /*#__PURE__*/function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n    this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously\n\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    } // invoke the done() callback when everything is finished\n\n\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, unpad(decrypted));\n    });\n  }\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {number} the value of step 32000\n   */\n\n\n  var _proto = Decrypter.prototype;\n  /**\n   * @private\n   */\n\n  _proto.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n    return function () {\n      var bytes = decrypt(encrypted, key, initVector);\n      decrypted.set(bytes, encrypted.byteOffset);\n    };\n  };\n\n  _createClass(Decrypter, null, [{\n    key: \"STEP\",\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n}();\n\nexport { AsyncStream, Decrypter, decrypt };","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/aes-decrypter/dist/aes-decrypter.es.js"],"names":["_createClass","_inheritsLoose","Stream","unpad","precompute","tables","encTable","decTable","sbox","sboxInv","i","x","xInv","d","th","x2","x4","x8","s","tEnc","tDec","slice","aesTables","AES","key","_tables","j","tmp","keyLen","length","rcon","Error","encKey","decKey","_key","_proto","prototype","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","offset","a","b","c","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","AsyncStream","_Stream","_this","call","jobs","delay","timeout_","processJob_","shift","setTimeout","bind","push","job","ntoh","word","encrypted","initVector","encrypted32","Int32Array","buffer","byteOffset","byteLength","decipher","Array","decrypted","Uint8Array","decrypted32","init0","init1","init2","init3","wordIx","Decrypter","done","step","STEP","asyncStream_","decryptChunk_","subarray","Uint32Array","bytes","set","get"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,oCAAzB;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAASC,KAAT,QAAsB,OAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;AAKA,IAAIC,UAAU,GAAG,SAASA,UAAT,GAAsB;AACrC,MAAIC,MAAM,GAAG,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAD,EAAuB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAvB,CAAb;AACA,MAAIC,QAAQ,GAAGD,MAAM,CAAC,CAAD,CAArB;AACA,MAAIE,QAAQ,GAAGF,MAAM,CAAC,CAAD,CAArB;AACA,MAAIG,IAAI,GAAGF,QAAQ,CAAC,CAAD,CAAnB;AACA,MAAIG,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAIG,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,CAAC,GAAG,EAAR;AACA,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ,CAhBqC,CAgB3B;;AAEV,OAAKV,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,GAAhB,EAAqBA,CAAC,EAAtB,EAA0B;AACxBI,IAAAA,EAAE,CAAC,CAACD,CAAC,CAACH,CAAD,CAAD,GAAOA,CAAC,IAAI,CAAL,GAAS,CAACA,CAAC,IAAI,CAAN,IAAW,GAA5B,IAAmCA,CAApC,CAAF,GAA2CA,CAA3C;AACD;;AAED,OAAKC,CAAC,GAAGC,IAAI,GAAG,CAAhB,EAAmB,CAACJ,IAAI,CAACG,CAAD,CAAxB,EAA6BA,CAAC,IAAII,EAAE,IAAI,CAAX,EAAcH,IAAI,GAAGE,EAAE,CAACF,IAAD,CAAF,IAAY,CAA9D,EAAiE;AAC/D;AACAM,IAAAA,CAAC,GAAGN,IAAI,GAAGA,IAAI,IAAI,CAAf,GAAmBA,IAAI,IAAI,CAA3B,GAA+BA,IAAI,IAAI,CAAvC,GAA2CA,IAAI,IAAI,CAAvD;AACAM,IAAAA,CAAC,GAAGA,CAAC,IAAI,CAAL,GAASA,CAAC,GAAG,GAAb,GAAmB,EAAvB;AACAV,IAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUO,CAAV;AACAT,IAAAA,OAAO,CAACS,CAAD,CAAP,GAAaP,CAAb,CAL+D,CAK/C;;AAEhBM,IAAAA,EAAE,GAAGJ,CAAC,CAACG,EAAE,GAAGH,CAAC,CAACE,EAAE,GAAGF,CAAC,CAACF,CAAD,CAAP,CAAP,CAAN;AACAS,IAAAA,IAAI,GAAGH,EAAE,GAAG,SAAL,GAAiBD,EAAE,GAAG,OAAtB,GAAgCD,EAAE,GAAG,KAArC,GAA6CJ,CAAC,GAAG,SAAxD;AACAQ,IAAAA,IAAI,GAAGN,CAAC,CAACK,CAAD,CAAD,GAAO,KAAP,GAAeA,CAAC,GAAG,SAA1B;;AAEA,SAAKR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtBJ,MAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYC,CAAZ,IAAiBQ,IAAI,GAAGA,IAAI,IAAI,EAAR,GAAaA,IAAI,KAAK,CAA9C;AACAZ,MAAAA,QAAQ,CAACG,CAAD,CAAR,CAAYQ,CAAZ,IAAiBE,IAAI,GAAGA,IAAI,IAAI,EAAR,GAAaA,IAAI,KAAK,CAA9C;AACD;AACF,GArCoC,CAqCnC;;;AAGF,OAAKV,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtBJ,IAAAA,QAAQ,CAACI,CAAD,CAAR,GAAcJ,QAAQ,CAACI,CAAD,CAAR,CAAYW,KAAZ,CAAkB,CAAlB,CAAd;AACAd,IAAAA,QAAQ,CAACG,CAAD,CAAR,GAAcH,QAAQ,CAACG,CAAD,CAAR,CAAYW,KAAZ,CAAkB,CAAlB,CAAd;AACD;;AAED,SAAOhB,MAAP;AACD,CA9CD;;AAgDA,IAAIiB,SAAS,GAAG,IAAhB;AACA;;;;;;;;AAQA,IAAIC,GAAG,GACP,aACA,YAAY;AACV,WAASA,GAAT,CAAaC,GAAb,EAAkB;AAChB;;;;;;;;;;;;AAYA;AACA;AACA,QAAI,CAACF,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAGlB,UAAU,EAAtB;AACD,KAjBe,CAiBd;;;AAGF,SAAKqB,OAAL,GAAe,CAAC,CAACH,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAAD,EAA0BC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAA1B,EAAmDC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAAnD,EAA4EC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAA5E,EAAqGC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAArG,CAAD,EAAgI,CAACC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAAD,EAA0BC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAA1B,EAAmDC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAAnD,EAA4EC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAA5E,EAAqGC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,EAAgBD,KAAhB,EAArG,CAAhI,CAAf;AACA,QAAIX,CAAJ;AACA,QAAIgB,CAAJ;AACA,QAAIC,GAAJ;AACA,QAAInB,IAAI,GAAG,KAAKiB,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAX;AACA,QAAIlB,QAAQ,GAAG,KAAKkB,OAAL,CAAa,CAAb,CAAf;AACA,QAAIG,MAAM,GAAGJ,GAAG,CAACK,MAAjB;AACA,QAAIC,IAAI,GAAG,CAAX;;AAEA,QAAIF,MAAM,KAAK,CAAX,IAAgBA,MAAM,KAAK,CAA3B,IAAgCA,MAAM,KAAK,CAA/C,EAAkD;AAChD,YAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAIC,MAAM,GAAGR,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAb;AACA,QAAIY,MAAM,GAAG,EAAb;AACA,SAAKC,IAAL,GAAY,CAACF,MAAD,EAASC,MAAT,CAAZ,CAnCgB,CAmCc;;AAE9B,SAAKvB,CAAC,GAAGkB,MAAT,EAAiBlB,CAAC,GAAG,IAAIkB,MAAJ,GAAa,EAAlC,EAAsClB,CAAC,EAAvC,EAA2C;AACzCiB,MAAAA,GAAG,GAAGK,MAAM,CAACtB,CAAC,GAAG,CAAL,CAAZ,CADyC,CACpB;;AAErB,UAAIA,CAAC,GAAGkB,MAAJ,KAAe,CAAf,IAAoBA,MAAM,KAAK,CAAX,IAAgBlB,CAAC,GAAGkB,MAAJ,KAAe,CAAvD,EAA0D;AACxDD,QAAAA,GAAG,GAAGnB,IAAI,CAACmB,GAAG,KAAK,EAAT,CAAJ,IAAoB,EAApB,GAAyBnB,IAAI,CAACmB,GAAG,IAAI,EAAP,GAAY,GAAb,CAAJ,IAAyB,EAAlD,GAAuDnB,IAAI,CAACmB,GAAG,IAAI,CAAP,GAAW,GAAZ,CAAJ,IAAwB,CAA/E,GAAmFnB,IAAI,CAACmB,GAAG,GAAG,GAAP,CAA7F,CADwD,CACkD;;AAE1G,YAAIjB,CAAC,GAAGkB,MAAJ,KAAe,CAAnB,EAAsB;AACpBD,UAAAA,GAAG,GAAGA,GAAG,IAAI,CAAP,GAAWA,GAAG,KAAK,EAAnB,GAAwBG,IAAI,IAAI,EAAtC;AACAA,UAAAA,IAAI,GAAGA,IAAI,IAAI,CAAR,GAAY,CAACA,IAAI,IAAI,CAAT,IAAc,GAAjC;AACD;AACF;;AAEDE,MAAAA,MAAM,CAACtB,CAAD,CAAN,GAAYsB,MAAM,CAACtB,CAAC,GAAGkB,MAAL,CAAN,GAAqBD,GAAjC;AACD,KAlDe,CAkDd;;;AAGF,SAAKD,CAAC,GAAG,CAAT,EAAYhB,CAAZ,EAAegB,CAAC,IAAIhB,CAAC,EAArB,EAAyB;AACvBiB,MAAAA,GAAG,GAAGK,MAAM,CAACN,CAAC,GAAG,CAAJ,GAAQhB,CAAR,GAAYA,CAAC,GAAG,CAAjB,CAAZ;;AAEA,UAAIA,CAAC,IAAI,CAAL,IAAUgB,CAAC,GAAG,CAAlB,EAAqB;AACnBO,QAAAA,MAAM,CAACP,CAAD,CAAN,GAAYC,GAAZ;AACD,OAFD,MAEO;AACLM,QAAAA,MAAM,CAACP,CAAD,CAAN,GAAYnB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAI,CAACmB,GAAG,KAAK,EAAT,CAAhB,IAAgCpB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAI,CAACmB,GAAG,IAAI,EAAP,GAAY,GAAb,CAAhB,CAAhC,GAAqEpB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAI,CAACmB,GAAG,IAAI,CAAP,GAAW,GAAZ,CAAhB,CAArE,GAAyGpB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAI,CAACmB,GAAG,GAAG,GAAP,CAAhB,CAArH;AACD;AACF;AACF;AACD;;;;;;;;;;;;;;;AAeA,MAAIQ,MAAM,GAAGZ,GAAG,CAACa,SAAjB;;AAEAD,EAAAA,MAAM,CAACE,OAAP,GAAiB,SAASA,OAAT,CAAiBC,UAAjB,EAA6BC,UAA7B,EAAyCC,UAAzC,EAAqDC,UAArD,EAAiEC,GAAjE,EAAsEC,MAAtE,EAA8E;AAC7F,QAAInB,GAAG,GAAG,KAAKU,IAAL,CAAU,CAAV,CAAV,CAD6F,CACrE;;AAExB,QAAIU,CAAC,GAAGN,UAAU,GAAGd,GAAG,CAAC,CAAD,CAAxB;AACA,QAAIqB,CAAC,GAAGJ,UAAU,GAAGjB,GAAG,CAAC,CAAD,CAAxB;AACA,QAAIsB,CAAC,GAAGN,UAAU,GAAGhB,GAAG,CAAC,CAAD,CAAxB;AACA,QAAIX,CAAC,GAAG0B,UAAU,GAAGf,GAAG,CAAC,CAAD,CAAxB;AACA,QAAIuB,EAAJ;AACA,QAAIC,EAAJ;AACA,QAAIC,EAAJ,CAT6F,CASrF;;AAER,QAAIC,YAAY,GAAG1B,GAAG,CAACK,MAAJ,GAAa,CAAb,GAAiB,CAApC;AACA,QAAInB,CAAJ;AACA,QAAIyC,MAAM,GAAG,CAAb;AACA,QAAIC,KAAK,GAAG,KAAK3B,OAAL,CAAa,CAAb,CAAZ,CAd6F,CAchE;;AAE7B,QAAI4B,MAAM,GAAGD,KAAK,CAAC,CAAD,CAAlB;AACA,QAAIE,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACA,QAAIG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,QAAII,MAAM,GAAGJ,KAAK,CAAC,CAAD,CAAlB;AACA,QAAI5C,IAAI,GAAG4C,KAAK,CAAC,CAAD,CAAhB,CApB6F,CAoBxE;;AAErB,SAAK1C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwC,YAAhB,EAA8BxC,CAAC,EAA/B,EAAmC;AACjCqC,MAAAA,EAAE,GAAGM,MAAM,CAACT,CAAC,KAAK,EAAP,CAAN,GAAmBU,MAAM,CAACT,CAAC,IAAI,EAAL,GAAU,GAAX,CAAzB,GAA2CU,MAAM,CAACT,CAAC,IAAI,CAAL,GAAS,GAAV,CAAjD,GAAkEU,MAAM,CAAC3C,CAAC,GAAG,GAAL,CAAxE,GAAoFW,GAAG,CAAC2B,MAAD,CAA5F;AACAH,MAAAA,EAAE,GAAGK,MAAM,CAACR,CAAC,KAAK,EAAP,CAAN,GAAmBS,MAAM,CAACR,CAAC,IAAI,EAAL,GAAU,GAAX,CAAzB,GAA2CS,MAAM,CAAC1C,CAAC,IAAI,CAAL,GAAS,GAAV,CAAjD,GAAkE2C,MAAM,CAACZ,CAAC,GAAG,GAAL,CAAxE,GAAoFpB,GAAG,CAAC2B,MAAM,GAAG,CAAV,CAA5F;AACAF,MAAAA,EAAE,GAAGI,MAAM,CAACP,CAAC,KAAK,EAAP,CAAN,GAAmBQ,MAAM,CAACzC,CAAC,IAAI,EAAL,GAAU,GAAX,CAAzB,GAA2C0C,MAAM,CAACX,CAAC,IAAI,CAAL,GAAS,GAAV,CAAjD,GAAkEY,MAAM,CAACX,CAAC,GAAG,GAAL,CAAxE,GAAoFrB,GAAG,CAAC2B,MAAM,GAAG,CAAV,CAA5F;AACAtC,MAAAA,CAAC,GAAGwC,MAAM,CAACxC,CAAC,KAAK,EAAP,CAAN,GAAmByC,MAAM,CAACV,CAAC,IAAI,EAAL,GAAU,GAAX,CAAzB,GAA2CW,MAAM,CAACV,CAAC,IAAI,CAAL,GAAS,GAAV,CAAjD,GAAkEW,MAAM,CAACV,CAAC,GAAG,GAAL,CAAxE,GAAoFtB,GAAG,CAAC2B,MAAM,GAAG,CAAV,CAA3F;AACAA,MAAAA,MAAM,IAAI,CAAV;AACAP,MAAAA,CAAC,GAAGG,EAAJ;AACAF,MAAAA,CAAC,GAAGG,EAAJ;AACAF,MAAAA,CAAC,GAAGG,EAAJ;AACD,KA/B4F,CA+B3F;;;AAGF,SAAKvC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtBgC,MAAAA,GAAG,CAAC,CAAC,IAAI,CAAChC,CAAN,IAAWiC,MAAZ,CAAH,GAAyBnC,IAAI,CAACoC,CAAC,KAAK,EAAP,CAAJ,IAAkB,EAAlB,GAAuBpC,IAAI,CAACqC,CAAC,IAAI,EAAL,GAAU,GAAX,CAAJ,IAAuB,EAA9C,GAAmDrC,IAAI,CAACsC,CAAC,IAAI,CAAL,GAAS,GAAV,CAAJ,IAAsB,CAAzE,GAA6EtC,IAAI,CAACK,CAAC,GAAG,GAAL,CAAjF,GAA6FW,GAAG,CAAC2B,MAAM,EAAP,CAAzH;AACAJ,MAAAA,EAAE,GAAGH,CAAL;AACAA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAGjC,CAAJ;AACAA,MAAAA,CAAC,GAAGkC,EAAJ;AACD;AACF,GA1CD;;AA4CA,SAAOxB,GAAP;AACD,CA9HD,EAFA;AAkIA;;;;;;;;;AAQA,IAAIkC,WAAW,GACf,aACA,UAAUC,OAAV,EAAmB;AACjBzD,EAAAA,cAAc,CAACwD,WAAD,EAAcC,OAAd,CAAd;;AAEA,WAASD,WAAT,GAAuB;AACrB,QAAIE,KAAJ;;AAEAA,IAAAA,KAAK,GAAGD,OAAO,CAACE,IAAR,CAAa,IAAb,EAAmB1D,MAAnB,KAA8B,IAAtC;AACAyD,IAAAA,KAAK,CAACE,IAAN,GAAa,EAAb;AACAF,IAAAA,KAAK,CAACG,KAAN,GAAc,CAAd;AACAH,IAAAA,KAAK,CAACI,QAAN,GAAiB,IAAjB;AACA,WAAOJ,KAAP;AACD;AACD;;;;;;;AAOA,MAAIxB,MAAM,GAAGsB,WAAW,CAACrB,SAAzB;;AAEAD,EAAAA,MAAM,CAAC6B,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,SAAKH,IAAL,CAAUI,KAAV;;AAEA,QAAI,KAAKJ,IAAL,CAAUhC,MAAd,EAAsB;AACpB,WAAKkC,QAAL,GAAgBG,UAAU,CAAC,KAAKF,WAAL,CAAiBG,IAAjB,CAAsB,IAAtB,CAAD,EAA8B,KAAKL,KAAnC,CAA1B;AACD,KAFD,MAEO;AACL,WAAKC,QAAL,GAAgB,IAAhB;AACD;AACF;AACD;;;;;AATA;;AAgBA5B,EAAAA,MAAM,CAACiC,IAAP,GAAc,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAC/B,SAAKR,IAAL,CAAUO,IAAV,CAAeC,GAAf;;AAEA,QAAI,CAAC,KAAKN,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgBG,UAAU,CAAC,KAAKF,WAAL,CAAiBG,IAAjB,CAAsB,IAAtB,CAAD,EAA8B,KAAKL,KAAnC,CAA1B;AACD;AACF,GAND;;AAQA,SAAOL,WAAP;AACD,CA9CD,CA8CEvD,MA9CF,CAFA;AAkDA;;;;;;AAKA,IAAIoE,IAAI,GAAG,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAC7B,SAAOA,IAAI,IAAI,EAAR,GAAa,CAACA,IAAI,GAAG,MAAR,KAAmB,CAAhC,GAAoC,CAACA,IAAI,GAAG,QAAR,KAAqB,CAAzD,GAA6DA,IAAI,KAAK,EAA7E;AACD,CAFD;AAGA;;;;;;;;;;;;;;;AAeA,IAAIlC,OAAO,GAAG,SAASA,OAAT,CAAiBmC,SAAjB,EAA4BhD,GAA5B,EAAiCiD,UAAjC,EAA6C;AACzD;AACA,MAAIC,WAAW,GAAG,IAAIC,UAAJ,CAAeH,SAAS,CAACI,MAAzB,EAAiCJ,SAAS,CAACK,UAA3C,EAAuDL,SAAS,CAACM,UAAV,IAAwB,CAA/E,CAAlB;AACA,MAAIC,QAAQ,GAAG,IAAIxD,GAAJ,CAAQyD,KAAK,CAAC5C,SAAN,CAAgBf,KAAhB,CAAsBuC,IAAtB,CAA2BpC,GAA3B,CAAR,CAAf,CAHyD,CAGA;;AAEzD,MAAIyD,SAAS,GAAG,IAAIC,UAAJ,CAAeV,SAAS,CAACM,UAAzB,CAAhB;AACA,MAAIK,WAAW,GAAG,IAAIR,UAAJ,CAAeM,SAAS,CAACL,MAAzB,CAAlB,CANyD,CAML;AACpD;;AAEA,MAAIQ,KAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,KAAJ;AACA,MAAIjD,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,UAAJ,CAhByD,CAgBzC;;AAEhB,MAAI+C,MAAJ,CAlByD,CAkB7C;AACZ;;AAEAJ,EAAAA,KAAK,GAAGX,UAAU,CAAC,CAAD,CAAlB;AACAY,EAAAA,KAAK,GAAGZ,UAAU,CAAC,CAAD,CAAlB;AACAa,EAAAA,KAAK,GAAGb,UAAU,CAAC,CAAD,CAAlB;AACAc,EAAAA,KAAK,GAAGd,UAAU,CAAC,CAAD,CAAlB,CAxByD,CAwBlC;AACvB;;AAEA,OAAKe,MAAM,GAAG,CAAd,EAAiBA,MAAM,GAAGd,WAAW,CAAC7C,MAAtC,EAA8C2D,MAAM,IAAI,CAAxD,EAA2D;AACzD;AACA;AACAlD,IAAAA,UAAU,GAAGgC,IAAI,CAACI,WAAW,CAACc,MAAD,CAAZ,CAAjB;AACAjD,IAAAA,UAAU,GAAG+B,IAAI,CAACI,WAAW,CAACc,MAAM,GAAG,CAAV,CAAZ,CAAjB;AACAhD,IAAAA,UAAU,GAAG8B,IAAI,CAACI,WAAW,CAACc,MAAM,GAAG,CAAV,CAAZ,CAAjB;AACA/C,IAAAA,UAAU,GAAG6B,IAAI,CAACI,WAAW,CAACc,MAAM,GAAG,CAAV,CAAZ,CAAjB,CANyD,CAMb;;AAE5CT,IAAAA,QAAQ,CAAC1C,OAAT,CAAiBC,UAAjB,EAA6BC,UAA7B,EAAyCC,UAAzC,EAAqDC,UAArD,EAAiE0C,WAAjE,EAA8EK,MAA9E,EARyD,CAQ8B;AACvF;;AAEAL,IAAAA,WAAW,CAACK,MAAD,CAAX,GAAsBlB,IAAI,CAACa,WAAW,CAACK,MAAD,CAAX,GAAsBJ,KAAvB,CAA1B;AACAD,IAAAA,WAAW,CAACK,MAAM,GAAG,CAAV,CAAX,GAA0BlB,IAAI,CAACa,WAAW,CAACK,MAAM,GAAG,CAAV,CAAX,GAA0BH,KAA3B,CAA9B;AACAF,IAAAA,WAAW,CAACK,MAAM,GAAG,CAAV,CAAX,GAA0BlB,IAAI,CAACa,WAAW,CAACK,MAAM,GAAG,CAAV,CAAX,GAA0BF,KAA3B,CAA9B;AACAH,IAAAA,WAAW,CAACK,MAAM,GAAG,CAAV,CAAX,GAA0BlB,IAAI,CAACa,WAAW,CAACK,MAAM,GAAG,CAAV,CAAX,GAA0BD,KAA3B,CAA9B,CAdyD,CAcQ;;AAEjEH,IAAAA,KAAK,GAAG9C,UAAR;AACA+C,IAAAA,KAAK,GAAG9C,UAAR;AACA+C,IAAAA,KAAK,GAAG9C,UAAR;AACA+C,IAAAA,KAAK,GAAG9C,UAAR;AACD;;AAED,SAAOwC,SAAP;AACD,CAlDD;AAmDA;;;;;;;;;;;;;AAaA,IAAIQ,SAAS,GACb,aACA,YAAY;AACV,WAASA,SAAT,CAAmBjB,SAAnB,EAA8BhD,GAA9B,EAAmCiD,UAAnC,EAA+CiB,IAA/C,EAAqD;AACnD,QAAIC,IAAI,GAAGF,SAAS,CAACG,IAArB;AACA,QAAIlB,WAAW,GAAG,IAAIC,UAAJ,CAAeH,SAAS,CAACI,MAAzB,CAAlB;AACA,QAAIK,SAAS,GAAG,IAAIC,UAAJ,CAAeV,SAAS,CAACM,UAAzB,CAAhB;AACA,QAAIpE,CAAC,GAAG,CAAR;AACA,SAAKmF,YAAL,GAAoB,IAAIpC,WAAJ,EAApB,CALmD,CAKZ;;AAEvC,SAAKoC,YAAL,CAAkBzB,IAAlB,CAAuB,KAAK0B,aAAL,CAAmBpB,WAAW,CAACqB,QAAZ,CAAqBrF,CAArB,EAAwBA,CAAC,GAAGiF,IAA5B,CAAnB,EAAsDnE,GAAtD,EAA2DiD,UAA3D,EAAuEQ,SAAvE,CAAvB;;AAEA,SAAKvE,CAAC,GAAGiF,IAAT,EAAejF,CAAC,GAAGgE,WAAW,CAAC7C,MAA/B,EAAuCnB,CAAC,IAAIiF,IAA5C,EAAkD;AAChDlB,MAAAA,UAAU,GAAG,IAAIuB,WAAJ,CAAgB,CAAC1B,IAAI,CAACI,WAAW,CAAChE,CAAC,GAAG,CAAL,CAAZ,CAAL,EAA2B4D,IAAI,CAACI,WAAW,CAAChE,CAAC,GAAG,CAAL,CAAZ,CAA/B,EAAqD4D,IAAI,CAACI,WAAW,CAAChE,CAAC,GAAG,CAAL,CAAZ,CAAzD,EAA+E4D,IAAI,CAACI,WAAW,CAAChE,CAAC,GAAG,CAAL,CAAZ,CAAnF,CAAhB,CAAb;AACA,WAAKmF,YAAL,CAAkBzB,IAAlB,CAAuB,KAAK0B,aAAL,CAAmBpB,WAAW,CAACqB,QAAZ,CAAqBrF,CAArB,EAAwBA,CAAC,GAAGiF,IAA5B,CAAnB,EAAsDnE,GAAtD,EAA2DiD,UAA3D,EAAuEQ,SAAvE,CAAvB;AACD,KAZkD,CAYjD;;;AAGF,SAAKY,YAAL,CAAkBzB,IAAlB,CAAuB,YAAY;AACjC;AACAsB,MAAAA,IAAI,CAAC,IAAD,EAAOvF,KAAK,CAAC8E,SAAD,CAAZ,CAAJ;AACD,KAHD;AAID;AACD;;;;;;;AAOA,MAAI9C,MAAM,GAAGsD,SAAS,CAACrD,SAAvB;AAEA;;;;AAGAD,EAAAA,MAAM,CAAC2D,aAAP,GAAuB,SAASA,aAAT,CAAuBtB,SAAvB,EAAkChD,GAAlC,EAAuCiD,UAAvC,EAAmDQ,SAAnD,EAA8D;AACnF,WAAO,YAAY;AACjB,UAAIgB,KAAK,GAAG5D,OAAO,CAACmC,SAAD,EAAYhD,GAAZ,EAAiBiD,UAAjB,CAAnB;AACAQ,MAAAA,SAAS,CAACiB,GAAV,CAAcD,KAAd,EAAqBzB,SAAS,CAACK,UAA/B;AACD,KAHD;AAID,GALD;;AAOA7E,EAAAA,YAAY,CAACyF,SAAD,EAAY,IAAZ,EAAkB,CAAC;AAC7BjE,IAAAA,GAAG,EAAE,MADwB;AAE7B2E,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB;AACA,aAAO,KAAP;AACD;AAL4B,GAAD,CAAlB,CAAZ;;AAQA,SAAOV,SAAP;AACD,CAjDD,EAFA;;AAqDA,SAAShC,WAAT,EAAsBgC,SAAtB,EAAiCpD,OAAjC","sourcesContent":["/*! @name aes-decrypter @version 3.0.2 @license Apache-2.0 */\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport Stream from '@videojs/vhs-utils/dist/stream.js';\nimport { unpad } from 'pkcs7';\n\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i;\n  var x;\n  var xInv;\n  var d = [];\n  var th = [];\n  var x2;\n  var x4;\n  var x8;\n  var s;\n  var tEnc;\n  var tDec; // Compute double and third tables\n\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x; // Compute MixColumns\n\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  } // Compactify. Considerable speedup on Firefox.\n\n\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n\n  return tables;\n};\n\nvar aesTables = null;\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES =\n/*#__PURE__*/\nfunction () {\n  function AES(key) {\n    /**\n    * The expanded S-box and inverse S-box tables. These will be computed\n    * on the client so that we don't have to send them down the wire.\n    *\n    * There are two tables, _tables[0] is for encryption and\n    * _tables[1] is for decryption.\n    *\n    * The first 4 sub-tables are the expanded S-box with MixColumns. The\n    * last (_tables[01][4]) is the S-box itself.\n    *\n    * @private\n    */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    } // then make a copy of that object for use\n\n\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i;\n    var j;\n    var tmp;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    var encKey = key.slice(0);\n    var decKey = [];\n    this._key = [encKey, decKey]; // schedule encryption keys\n\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1]; // apply sbox\n\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    } // schedule decryption keys\n\n\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {number} encrypted0 the first word to decrypt\n   * @param {number} encrypted1 the second word to decrypt\n   * @param {number} encrypted2 the third word to decrypt\n   * @param {number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n\n  var _proto = AES.prototype;\n\n  _proto.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n    var key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n    var a = encrypted0 ^ key[0];\n    var b = encrypted3 ^ key[1];\n    var c = encrypted2 ^ key[2];\n    var d = encrypted1 ^ key[3];\n    var a2;\n    var b2;\n    var c2; // key.length === 2 ?\n\n    var nInnerRounds = key.length / 4 - 2;\n    var i;\n    var kIndex = 4;\n    var table = this._tables[1]; // load up the tables\n\n    var table0 = table[0];\n    var table1 = table[1];\n    var table2 = table[2];\n    var table3 = table[3];\n    var sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;\n      b = b2;\n      c = c2;\n    } // Last round.\n\n\n    for (i = 0; i < 4; i++) {\n      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;\n      a = b;\n      b = c;\n      c = d;\n      d = a2;\n    }\n  };\n\n  return AES;\n}();\n\n/**\n * A wrapper around the Stream class to use setTimeout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream =\n/*#__PURE__*/\nfunction (_Stream) {\n  _inheritsLoose(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    var _this;\n\n    _this = _Stream.call(this, Stream) || this;\n    _this.jobs = [];\n    _this.delay = 1;\n    _this.timeout_ = null;\n    return _this;\n  }\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n\n  var _proto = AsyncStream.prototype;\n\n  _proto.processJob_ = function processJob_() {\n    this.jobs.shift()();\n\n    if (this.jobs.length) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    } else {\n      this.timeout_ = null;\n    }\n  }\n  /**\n   * push a job into the stream\n   *\n   * @param {Function} job the job to push into the stream\n   */\n  ;\n\n  _proto.push = function push(job) {\n    this.jobs.push(job);\n\n    if (!this.timeout_) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    }\n  };\n\n  return AsyncStream;\n}(Stream);\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\n\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\n\n\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n  var decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n\n  var init0;\n  var init1;\n  var init2;\n  var init3;\n  var encrypted0;\n  var encrypted1;\n  var encrypted2;\n  var encrypted3; // iteration variable\n\n  var wordIx; // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\n\nvar Decrypter =\n/*#__PURE__*/\nfunction () {\n  function Decrypter(encrypted, key, initVector, done) {\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n    this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously\n\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    } // invoke the done() callback when everything is finished\n\n\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, unpad(decrypted));\n    });\n  }\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {number} the value of step 32000\n   */\n\n\n  var _proto = Decrypter.prototype;\n\n  /**\n   * @private\n   */\n  _proto.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n    return function () {\n      var bytes = decrypt(encrypted, key, initVector);\n      decrypted.set(bytes, encrypted.byteOffset);\n    };\n  };\n\n  _createClass(Decrypter, null, [{\n    key: \"STEP\",\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n}();\n\nexport { AsyncStream, Decrypter, decrypt };\n"]},"metadata":{},"sourceType":"module"}