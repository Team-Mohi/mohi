{"ast":null,"code":"/**\r\n * Export.\r\n */\nmodule.exports = toNoCase;\n/**\r\n * Test whether a string is camel-case.\r\n */\n\nvar hasSpace = /\\s/;\nvar hasSeparator = /(_|-|\\.|:)/;\nvar hasCamel = /([a-z][A-Z]|[A-Z][a-z])/;\n/**\r\n * Remove any starting case from a `string`, like camel or snake, but keep\r\n * spaces and punctuation that may be important otherwise.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\n\nfunction toNoCase(string) {\n  if (hasSpace.test(string)) return string.toLowerCase();\n  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase();\n  if (hasCamel.test(string)) return uncamelize(string).toLowerCase();\n  return string.toLowerCase();\n}\n/**\r\n * Separator splitter.\r\n */\n\n\nvar separatorSplitter = /[\\W_]+(.|$)/g;\n/**\r\n * Un-separate a `string`.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\n\nfunction unseparate(string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : '';\n  });\n}\n/**\r\n * Camelcase splitter.\r\n */\n\n\nvar camelSplitter = /(.)([A-Z]+)/g;\n/**\r\n * Un-camelcase a `string`.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\n\nfunction uncamelize(string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ');\n  });\n}","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/to-no-case/index.js"],"names":["module","exports","toNoCase","hasSpace","hasSeparator","hasCamel","string","test","toLowerCase","unseparate","uncamelize","separatorSplitter","replace","m","next","camelSplitter","previous","uppers","split","join"],"mappings":"AACA;;;AAIAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;;;;AAIA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,YAAY,GAAG,YAAnB;AACA,IAAIC,QAAQ,GAAG,yBAAf;AAEA;;;;;;;;AAQA,SAASH,QAAT,CAAkBI,MAAlB,EAA0B;AACxB,MAAIH,QAAQ,CAACI,IAAT,CAAcD,MAAd,CAAJ,EAA2B,OAAOA,MAAM,CAACE,WAAP,EAAP;AAC3B,MAAIJ,YAAY,CAACG,IAAb,CAAkBD,MAAlB,CAAJ,EAA+B,OAAO,CAACG,UAAU,CAACH,MAAD,CAAV,IAAsBA,MAAvB,EAA+BE,WAA/B,EAAP;AAC/B,MAAIH,QAAQ,CAACE,IAAT,CAAcD,MAAd,CAAJ,EAA2B,OAAOI,UAAU,CAACJ,MAAD,CAAV,CAAmBE,WAAnB,EAAP;AAC3B,SAAOF,MAAM,CAACE,WAAP,EAAP;AACD;AAED;;;;;AAIA,IAAIG,iBAAiB,GAAG,cAAxB;AAEA;;;;;;;AAOA,SAASF,UAAT,CAAoBH,MAApB,EAA4B;AAC1B,SAAOA,MAAM,CAACM,OAAP,CAAeD,iBAAf,EAAkC,UAAUE,CAAV,EAAaC,IAAb,EAAmB;AAC1D,WAAOA,IAAI,GAAG,MAAMA,IAAT,GAAgB,EAA3B;AACD,GAFM,CAAP;AAGD;AAED;;;;;AAIA,IAAIC,aAAa,GAAG,cAApB;AAEA;;;;;;;AAOA,SAASL,UAAT,CAAoBJ,MAApB,EAA4B;AAC1B,SAAOA,MAAM,CAACM,OAAP,CAAeG,aAAf,EAA8B,UAAUF,CAAV,EAAaG,QAAb,EAAuBC,MAAvB,EAA+B;AAClE,WAAOD,QAAQ,GAAG,GAAX,GAAiBC,MAAM,CAACT,WAAP,GAAqBU,KAArB,CAA2B,EAA3B,EAA+BC,IAA/B,CAAoC,GAApC,CAAxB;AACD,GAFM,CAAP;AAGD","sourcesContent":["\r\n/**\r\n * Export.\r\n */\r\n\r\nmodule.exports = toNoCase\r\n\r\n/**\r\n * Test whether a string is camel-case.\r\n */\r\n\r\nvar hasSpace = /\\s/\r\nvar hasSeparator = /(_|-|\\.|:)/\r\nvar hasCamel = /([a-z][A-Z]|[A-Z][a-z])/\r\n\r\n/**\r\n * Remove any starting case from a `string`, like camel or snake, but keep\r\n * spaces and punctuation that may be important otherwise.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\r\n\r\nfunction toNoCase(string) {\r\n  if (hasSpace.test(string)) return string.toLowerCase()\r\n  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()\r\n  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()\r\n  return string.toLowerCase()\r\n}\r\n\r\n/**\r\n * Separator splitter.\r\n */\r\n\r\nvar separatorSplitter = /[\\W_]+(.|$)/g\r\n\r\n/**\r\n * Un-separate a `string`.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\r\n\r\nfunction unseparate(string) {\r\n  return string.replace(separatorSplitter, function (m, next) {\r\n    return next ? ' ' + next : ''\r\n  })\r\n}\r\n\r\n/**\r\n * Camelcase splitter.\r\n */\r\n\r\nvar camelSplitter = /(.)([A-Z]+)/g\r\n\r\n/**\r\n * Un-camelcase a `string`.\r\n *\r\n * @param {String} string\r\n * @return {String}\r\n */\r\n\r\nfunction uncamelize(string) {\r\n  return string.replace(camelSplitter, function (m, previous, uppers) {\r\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ')\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}