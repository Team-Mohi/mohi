{"ast":null,"code":"import { LeafletProvider, addClassName, removeClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { useEffect, useMemo, useRef } from 'react';\nconst DEFAULT_PANES = ['mapPane', 'markerPane', 'overlayPane', 'popupPane', 'shadowPane', 'tilePane', 'tooltipPane'];\nconst PANE_STYLES = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\n\nfunction omitPane(obj, pane) {\n  const {\n    [pane]: _p,\n    ...others\n  } = obj;\n  return others;\n}\n\nexport function Pane(props) {\n  const context = useLeafletContext();\n  const paneElementRef = useRef(null);\n  const propsRef = useRef(props);\n\n  function applyStyles(paneElement) {\n    if (props.className != null) {\n      addClassName(paneElement, props.className);\n    }\n\n    if (props.style != null) {\n      Object.keys(props.style).forEach(key => {\n        // @ts-ignore\n        paneElement.style[key] = props.style[key];\n      });\n    }\n  }\n\n  function createPane() {\n    const name = props.name;\n\n    if (DEFAULT_PANES.indexOf(name) !== -1) {\n      throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n    }\n\n    if (context.map.getPane(name) != null) {\n      throw new Error(`A pane with this name already exists: ${name}`);\n    }\n\n    const parentPane = context.pane ? context.map.getPane(context.pane) : undefined;\n    paneElementRef.current = context.map.createPane(name, parentPane);\n    applyStyles(paneElementRef.current);\n  }\n\n  function removePane(name) {\n    const pane = context.map.getPane(name);\n    pane == null ? void 0 : pane.remove == null ? void 0 : pane.remove(); // @ts-ignore map internals\n\n    if (context.map._panes != null) {\n      // @ts-ignore map internals\n      context.map._panes = omitPane(context.map._panes, name); // @ts-ignore map internals\n\n      context.map._paneRenderers = omitPane( // @ts-ignore map internals\n      context.map._paneRenderers, name);\n    }\n  }\n\n  useEffect(function handlePane() {\n    if (paneElementRef.current === null) {\n      createPane();\n    } else if (props !== propsRef.current) {\n      if (props.name === propsRef.current.name) {\n        // Remove the previous css class name from the pane if it has changed.\n        // setStyle() will take care of adding in the updated className\n        if (propsRef.current.className && props.className !== propsRef.current.className) {\n          removeClassName(paneElementRef.current, propsRef.current.className);\n        } // Update the pane's DOM node style and class\n\n\n        applyStyles(paneElementRef.current);\n      } else {\n        removePane(propsRef.current.name);\n        createPane();\n      }\n    }\n\n    return function removeCreatedPane() {\n      removePane(props.name);\n    };\n  });\n  const newContext = useMemo(() => ({ ...context,\n    pane: props.name\n  }), [context, props.name]);\n  return props.children ? /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: newContext\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: PANE_STYLES\n  }, props.children)) : null;\n}","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/react-leaflet/esm/Pane.js"],"names":["LeafletProvider","addClassName","removeClassName","useLeafletContext","React","useEffect","useMemo","useRef","DEFAULT_PANES","PANE_STYLES","position","top","right","bottom","left","omitPane","obj","pane","_p","others","Pane","props","context","paneElementRef","propsRef","applyStyles","paneElement","className","style","Object","keys","forEach","key","createPane","name","indexOf","Error","map","getPane","parentPane","undefined","current","removePane","remove","_panes","_paneRenderers","handlePane","removeCreatedPane","newContext","children","createElement","value"],"mappings":"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","sourcesContent":["import { LeafletProvider, addClassName, removeClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { useEffect, useMemo, useRef } from 'react';\nconst DEFAULT_PANES = ['mapPane', 'markerPane', 'overlayPane', 'popupPane', 'shadowPane', 'tilePane', 'tooltipPane'];\nconst PANE_STYLES = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\n\nfunction omitPane(obj, pane) {\n  const {\n    [pane]: _p,\n    ...others\n  } = obj;\n  return others;\n}\n\nexport function Pane(props) {\n  const context = useLeafletContext();\n  const paneElementRef = useRef(null);\n  const propsRef = useRef(props);\n\n  function applyStyles(paneElement) {\n    if (props.className != null) {\n      addClassName(paneElement, props.className);\n    }\n\n    if (props.style != null) {\n      Object.keys(props.style).forEach(key => {\n        // @ts-ignore\n        paneElement.style[key] = props.style[key];\n      });\n    }\n  }\n\n  function createPane() {\n    const name = props.name;\n\n    if (DEFAULT_PANES.indexOf(name) !== -1) {\n      throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n    }\n\n    if (context.map.getPane(name) != null) {\n      throw new Error(`A pane with this name already exists: ${name}`);\n    }\n\n    const parentPane = context.pane ? context.map.getPane(context.pane) : undefined;\n    paneElementRef.current = context.map.createPane(name, parentPane);\n    applyStyles(paneElementRef.current);\n  }\n\n  function removePane(name) {\n    const pane = context.map.getPane(name);\n    pane == null ? void 0 : pane.remove == null ? void 0 : pane.remove(); // @ts-ignore map internals\n\n    if (context.map._panes != null) {\n      // @ts-ignore map internals\n      context.map._panes = omitPane(context.map._panes, name); // @ts-ignore map internals\n\n      context.map._paneRenderers = omitPane( // @ts-ignore map internals\n      context.map._paneRenderers, name);\n    }\n  }\n\n  useEffect(function handlePane() {\n    if (paneElementRef.current === null) {\n      createPane();\n    } else if (props !== propsRef.current) {\n      if (props.name === propsRef.current.name) {\n        // Remove the previous css class name from the pane if it has changed.\n        // setStyle() will take care of adding in the updated className\n        if (propsRef.current.className && props.className !== propsRef.current.className) {\n          removeClassName(paneElementRef.current, propsRef.current.className);\n        } // Update the pane's DOM node style and class\n\n\n        applyStyles(paneElementRef.current);\n      } else {\n        removePane(propsRef.current.name);\n        createPane();\n      }\n    }\n\n    return function removeCreatedPane() {\n      removePane(props.name);\n    };\n  });\n  const newContext = useMemo(() => ({ ...context,\n    pane: props.name\n  }), [context, props.name]);\n  return props.children ? /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: newContext\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: PANE_STYLES\n  }, props.children)) : null;\n}"]},"metadata":{},"sourceType":"module"}