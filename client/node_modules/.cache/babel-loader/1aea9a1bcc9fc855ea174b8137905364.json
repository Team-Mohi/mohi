{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\nconst token = JSON.parse(localStorage.getItem('ustk')).access_token;\naxios.interceptors.request.use(config => {\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n});\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(response => {\n  console.log(response);\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n  console.log(error.response);\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      return new Promise(function (resolve, reject) {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(token => {\n        originalRequest.headers['Authorization'] = 'Bearer ' + token;\n        return axios(originalRequest);\n      }).catch(err => {\n        return Promise.reject(err);\n      });\n    }\n\n    originalRequest._retry = true;\n    isRefreshing = true;\n    return new Promise(function (resolve, reject) {\n      axios.post(API_REFRESH_TOKEN, {\n        'token': token\n      }).then(res => {\n        if (res.status === 200) {\n          localStorage.setItem('ustk', res.data.access_token);\n          let new_token = localStorage.getItem('ustk');\n          processQueue(null, res.data.access_token);\n          axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\n          originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n          resolve(axios(originalRequest));\n        }\n      }).then(() => {\n        isRefreshing = false;\n      });\n    });\n  }\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","token","JSON","parse","localStorage","getItem","access_token","interceptors","request","use","config","headers","error","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","console","log","originalRequest","status","_retry","push","then","catch","err","post","res","setItem","data","new_token","defaults","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AAEA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,YAAvD;AAEAP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAM,IAAI;AACN,MAAIT,KAAJ,EAAW;AACPS,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,YAAYV,KAA9C;AACH;;AACD,SAAOS,MAAP;AACH,CANJ,EAOGE,KAAK,IAAI;AACLC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACL,CATF;AAWC,IAAIG,YAAY,GAAG,KAAnB;AACA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAMC,YAAY,GAAG,CAACL,KAAD,EAAQX,KAAK,GAAG,IAAhB,KAAyB;AAC5Ce,EAAAA,WAAW,CAACE,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,QAAIP,KAAJ,EAAW;AACTO,MAAAA,IAAI,CAACL,MAAL,CAAYF,KAAZ;AACD,KAFD,MAEO;AACLO,MAAAA,IAAI,CAACC,OAAL,CAAanB,KAAb;AACD;AACF,GAND;AAQAe,EAAAA,WAAW,GAAG,EAAd;AACD,CAVD;;AAYDjB,KAAK,CAACQ,YAAN,CAAmBc,QAAnB,CAA4BZ,GAA5B,CAAiCY,QAAD,IAAc;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACC,SAAOA,QAAP;AACF,CAHD,EAIA,UAAUT,KAAV,EAAiB;AACd,QAAMY,eAAe,GAAGZ,KAAK,CAACF,MAA9B;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACS,QAAlB;;AACA,MAAIT,KAAK,CAACS,QAAN,CAAeI,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAE5D,QAAIX,YAAJ,EAAkB;AACf,aAAO,IAAIF,OAAJ,CAAY,UAASO,OAAT,EAAkBN,MAAlB,EAA0B;AAC3CE,QAAAA,WAAW,CAACW,IAAZ,CAAiB;AAACP,UAAAA,OAAD;AAAUN,UAAAA;AAAV,SAAjB;AACD,OAFM,EAEJc,IAFI,CAEC3B,KAAK,IAAI;AACfuB,QAAAA,eAAe,CAACb,OAAhB,CAAwB,eAAxB,IAA2C,YAAYV,KAAvD;AACA,eAAOF,KAAK,CAACyB,eAAD,CAAZ;AACD,OALM,EAKJK,KALI,CAKEC,GAAG,IAAI;AACd,eAAOjB,OAAO,CAACC,MAAR,CAAegB,GAAf,CAAP;AACD,OAPM,CAAP;AAQD;;AAEAN,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACAX,IAAAA,YAAY,GAAG,IAAf;AACA,WAAO,IAAIF,OAAJ,CAAY,UAAUO,OAAV,EAAmBN,MAAnB,EAA2B;AAC5Cf,MAAAA,KAAK,CAACgC,IAAN,CAAW/B,iBAAX,EACI;AACI,iBAAUC;AADd,OADJ,EAIK2B,IAJL,CAIUI,GAAG,IAAI;AACT,YAAIA,GAAG,CAACP,MAAJ,KAAe,GAAnB,EAAwB;AACpBrB,UAAAA,YAAY,CAAC6B,OAAb,CAAqB,MAArB,EAA6BD,GAAG,CAACE,IAAJ,CAAS5B,YAAtC;AACA,cAAI6B,SAAS,GAAG/B,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB;AACAY,UAAAA,YAAY,CAAC,IAAD,EAAOe,GAAG,CAACE,IAAJ,CAAS5B,YAAhB,CAAZ;AACAP,UAAAA,KAAK,CAACqC,QAAN,CAAezB,OAAf,CAAuB0B,MAAvB,CAA8B,eAA9B,IAAiD,YAAYF,SAA7D;AACAX,UAAAA,eAAe,CAACb,OAAhB,CAAwB,eAAxB,IAA2C,YAAYwB,SAAvD;AACAf,UAAAA,OAAO,CAACrB,KAAK,CAACyB,eAAD,CAAN,CAAP;AACH;AACJ,OAbL,EAcKI,IAdL,CAcU,MAAM;AAAEb,QAAAA,YAAY,GAAG,KAAf;AAAsB,OAdxC;AAeA,KAhBK,CAAP;AAiBH;;AACD,SAAOF,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,CAzCD","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\nconst token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n\r\naxios.interceptors.request.use(\r\n   config => {\r\n       if (token) {\r\n           config.headers['Authorization'] = 'Bearer ' + token;\r\n       }\r\n       return config;\r\n   },\r\n   error => {\r\n       Promise.reject(error)\r\n });\r\n\r\n let isRefreshing = false;\r\n let failedQueue = [];\r\n\r\n const processQueue = (error, token = null) => {\r\n   failedQueue.forEach(prom => {\r\n     if (error) {\r\n       prom.reject(error);\r\n     } else {\r\n       prom.resolve(token);\r\n     }\r\n   })\r\n\r\n   failedQueue = [];\r\n }\r\n\r\naxios.interceptors.response.use((response) => {\r\n  console.log(response);\r\n   return response\r\n},\r\nfunction (error) {\r\n   const originalRequest = error.config;\r\n   console.log(error.response);\r\n   if (error.response.status === 401 && !originalRequest._retry) {\r\n\r\n     if (isRefreshing) {\r\n        return new Promise(function(resolve, reject) {\r\n          failedQueue.push({resolve, reject})\r\n        }).then(token => {\r\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\r\n          return axios(originalRequest);\r\n        }).catch(err => {\r\n          return Promise.reject(err);\r\n        })\r\n      }\r\n\r\n       originalRequest._retry = true;\r\n       isRefreshing = true;\r\n       return new Promise(function (resolve, reject) {\r\n         axios.post(API_REFRESH_TOKEN,\r\n             {\r\n                 'token' : token\r\n             })\r\n             .then(res => {\r\n                 if (res.status === 200) {\r\n                     localStorage.setItem('ustk', res.data.access_token);\r\n                     let new_token = localStorage.getItem('ustk');\r\n                     processQueue(null, res.data.access_token);\r\n                     axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\r\n                     originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                     resolve(axios(originalRequest));\r\n                 }\r\n             })\r\n             .then(() => { isRefreshing = false })\r\n        })\r\n   }\r\n   return Promise.reject(error);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}