{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Parse the internal MP4 structure into an equivalent javascript\n * object.\n */\n'use strict';\n\nvar inspectMp4,\n    textifyMp4,\n    toUnsigned = require('../utils/bin').toUnsigned,\n    parseMp4Date = function (seconds) {\n  return new Date(seconds * 1000 - 2082844800000);\n},\n    parseSampleFlags = function (flags) {\n  return {\n    isLeading: (flags[0] & 0x0c) >>> 2,\n    dependsOn: flags[0] & 0x03,\n    isDependedOn: (flags[1] & 0xc0) >>> 6,\n    hasRedundancy: (flags[1] & 0x30) >>> 4,\n    paddingValue: (flags[1] & 0x0e) >>> 1,\n    isNonSyncSample: flags[1] & 0x01,\n    degradationPriority: flags[2] << 8 | flags[3]\n  };\n},\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function (buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n},\n    // Find the data for a box specified by its path\nfindBox = function (data, path) {\n  var results = [],\n      i,\n      size,\n      type,\n      end,\n      subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size = toUnsigned(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n    type = parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n\n    i = end;\n  } // we've finished searching all of data\n\n\n  return results;\n},\n    nalParse = function (avcStream) {\n  var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = [],\n      i,\n      length;\n\n  for (i = 0; i + 4 < avcStream.length; i += length) {\n    length = avcView.getUint32(i);\n    i += 4; // bail if this doesn't appear to be an H264 stream\n\n    if (length <= 0) {\n      result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n      continue;\n    }\n\n    switch (avcStream[i] & 0x1F) {\n      case 0x01:\n        result.push('slice_layer_without_partitioning_rbsp');\n        break;\n\n      case 0x05:\n        result.push('slice_layer_without_partitioning_rbsp_idr');\n        break;\n\n      case 0x06:\n        result.push('sei_rbsp');\n        break;\n\n      case 0x07:\n        result.push('seq_parameter_set_rbsp');\n        break;\n\n      case 0x08:\n        result.push('pic_parameter_set_rbsp');\n        break;\n\n      case 0x09:\n        result.push('access_unit_delimiter_rbsp');\n        break;\n\n      default:\n        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n        break;\n    }\n  }\n\n  return result;\n},\n    // registry of handlers for individual mp4 box types\nparse = {\n  // codingname, not a first-class box type. stsd entries share the\n  // same format as real boxes so the parsing infrastructure can be\n  // shared\n  avc1: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    return {\n      dataReferenceIndex: view.getUint16(6),\n      width: view.getUint16(24),\n      height: view.getUint16(26),\n      horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n      vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n      frameCount: view.getUint16(40),\n      depth: view.getUint16(74),\n      config: inspectMp4(data.subarray(78, data.byteLength))\n    };\n  },\n  avcC: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      configurationVersion: data[0],\n      avcProfileIndication: data[1],\n      profileCompatibility: data[2],\n      avcLevelIndication: data[3],\n      lengthSizeMinusOne: data[4] & 0x03,\n      sps: [],\n      pps: []\n    },\n        numOfSequenceParameterSets = data[5] & 0x1f,\n        numOfPictureParameterSets,\n        nalSize,\n        offset,\n        i; // iterate past any SPSs\n\n    offset = 6;\n\n    for (i = 0; i < numOfSequenceParameterSets; i++) {\n      nalSize = view.getUint16(offset);\n      offset += 2;\n      result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n      offset += nalSize;\n    } // iterate past any PPSs\n\n\n    numOfPictureParameterSets = data[offset];\n    offset++;\n\n    for (i = 0; i < numOfPictureParameterSets; i++) {\n      nalSize = view.getUint16(offset);\n      offset += 2;\n      result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n      offset += nalSize;\n    }\n\n    return result;\n  },\n  btrt: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    return {\n      bufferSizeDB: view.getUint32(0),\n      maxBitrate: view.getUint32(4),\n      avgBitrate: view.getUint32(8)\n    };\n  },\n  esds: function (data) {\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      esId: data[6] << 8 | data[7],\n      streamPriority: data[8] & 0x1f,\n      decoderConfig: {\n        objectProfileIndication: data[11],\n        streamType: data[12] >>> 2 & 0x3f,\n        bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n        maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n        avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n        decoderConfigDescriptor: {\n          tag: data[24],\n          length: data[25],\n          audioObjectType: data[26] >>> 3 & 0x1f,\n          samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n          channelConfiguration: data[27] >>> 3 & 0x0f\n        }\n      }\n    };\n  },\n  ftyp: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      majorBrand: parseType(data.subarray(0, 4)),\n      minorVersion: view.getUint32(4),\n      compatibleBrands: []\n    },\n        i = 8;\n\n    while (i < data.byteLength) {\n      result.compatibleBrands.push(parseType(data.subarray(i, i + 4)));\n      i += 4;\n    }\n\n    return result;\n  },\n  dinf: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  dref: function (data) {\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      dataReferences: inspectMp4(data.subarray(8))\n    };\n  },\n  hdlr: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: view.getUint8(0),\n      flags: new Uint8Array(data.subarray(1, 4)),\n      handlerType: parseType(data.subarray(8, 12)),\n      name: ''\n    },\n        i = 8; // parse out the name field\n\n    for (i = 24; i < data.byteLength; i++) {\n      if (data[i] === 0x00) {\n        // the name field is null-terminated\n        i++;\n        break;\n      }\n\n      result.name += String.fromCharCode(data[i]);\n    } // decode UTF-8 to javascript's internal representation\n    // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n\n\n    result.name = decodeURIComponent(escape(result.name));\n    return result;\n  },\n  mdat: function (data) {\n    return {\n      byteLength: data.byteLength,\n      nals: nalParse(data)\n    };\n  },\n  mdhd: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        language,\n        result = {\n      version: view.getUint8(0),\n      flags: new Uint8Array(data.subarray(1, 4)),\n      language: ''\n    };\n\n    if (result.version === 1) {\n      i += 4;\n      result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n      i += 8;\n      result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n      i += 4;\n      result.timescale = view.getUint32(i);\n      i += 8;\n      result.duration = view.getUint32(i); // truncating top 4 bytes\n    } else {\n      result.creationTime = parseMp4Date(view.getUint32(i));\n      i += 4;\n      result.modificationTime = parseMp4Date(view.getUint32(i));\n      i += 4;\n      result.timescale = view.getUint32(i);\n      i += 4;\n      result.duration = view.getUint32(i);\n    }\n\n    i += 4; // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n    // each field is the packed difference between its ASCII value and 0x60\n\n    language = view.getUint16(i);\n    result.language += String.fromCharCode((language >> 10) + 0x60);\n    result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n    result.language += String.fromCharCode((language & 0x1f) + 0x60);\n    return result;\n  },\n  mdia: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  mfhd: function (data) {\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n    };\n  },\n  minf: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  // codingname, not a first-class box type. stsd entries share the\n  // same format as real boxes so the parsing infrastructure can be\n  // shared\n  mp4a: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      // 6 bytes reserved\n      dataReferenceIndex: view.getUint16(6),\n      // 4 + 4 bytes reserved\n      channelcount: view.getUint16(16),\n      samplesize: view.getUint16(18),\n      // 2 bytes pre_defined\n      // 2 bytes reserved\n      samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n    }; // if there are more bytes to process, assume this is an ISO/IEC\n    // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n\n    if (data.byteLength > 28) {\n      result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n    }\n\n    return result;\n  },\n  moof: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  moov: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  mvex: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  mvhd: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n      version: view.getUint8(0),\n      flags: new Uint8Array(data.subarray(1, 4))\n    };\n\n    if (result.version === 1) {\n      i += 4;\n      result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n      i += 8;\n      result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n      i += 4;\n      result.timescale = view.getUint32(i);\n      i += 8;\n      result.duration = view.getUint32(i); // truncating top 4 bytes\n    } else {\n      result.creationTime = parseMp4Date(view.getUint32(i));\n      i += 4;\n      result.modificationTime = parseMp4Date(view.getUint32(i));\n      i += 4;\n      result.timescale = view.getUint32(i);\n      i += 4;\n      result.duration = view.getUint32(i);\n    }\n\n    i += 4; // convert fixed-point, base 16 back to a number\n\n    result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n    i += 4;\n    result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n    i += 2;\n    i += 2;\n    i += 2 * 4;\n    result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n    i += 9 * 4;\n    i += 6 * 4;\n    result.nextTrackId = view.getUint32(i);\n    return result;\n  },\n  pdin: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    return {\n      version: view.getUint8(0),\n      flags: new Uint8Array(data.subarray(1, 4)),\n      rate: view.getUint32(4),\n      initialDelay: view.getUint32(8)\n    };\n  },\n  sdtp: function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      samples: []\n    },\n        i;\n\n    for (i = 4; i < data.byteLength; i++) {\n      result.samples.push({\n        dependsOn: (data[i] & 0x30) >> 4,\n        isDependedOn: (data[i] & 0x0c) >> 2,\n        hasRedundancy: data[i] & 0x03\n      });\n    }\n\n    return result;\n  },\n  sidx: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      references: [],\n      referenceId: view.getUint32(4),\n      timescale: view.getUint32(8),\n      earliestPresentationTime: view.getUint32(12),\n      firstOffset: view.getUint32(16)\n    },\n        referenceCount = view.getUint16(22),\n        i;\n\n    for (i = 24; referenceCount; i += 12, referenceCount--) {\n      result.references.push({\n        referenceType: (data[i] & 0x80) >>> 7,\n        referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n        subsegmentDuration: view.getUint32(i + 4),\n        startsWithSap: !!(data[i + 8] & 0x80),\n        sapType: (data[i + 8] & 0x70) >>> 4,\n        sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n      });\n    }\n\n    return result;\n  },\n  smhd: function (data) {\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      balance: data[4] + data[5] / 256\n    };\n  },\n  stbl: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  stco: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      chunkOffsets: []\n    },\n        entryCount = view.getUint32(4),\n        i;\n\n    for (i = 8; entryCount; i += 4, entryCount--) {\n      result.chunkOffsets.push(view.getUint32(i));\n    }\n\n    return result;\n  },\n  stsc: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        entryCount = view.getUint32(4),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      sampleToChunks: []\n    },\n        i;\n\n    for (i = 8; entryCount; i += 12, entryCount--) {\n      result.sampleToChunks.push({\n        firstChunk: view.getUint32(i),\n        samplesPerChunk: view.getUint32(i + 4),\n        sampleDescriptionIndex: view.getUint32(i + 8)\n      });\n    }\n\n    return result;\n  },\n  stsd: function (data) {\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      sampleDescriptions: inspectMp4(data.subarray(8))\n    };\n  },\n  stsz: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      sampleSize: view.getUint32(4),\n      entries: []\n    },\n        i;\n\n    for (i = 12; i < data.byteLength; i += 4) {\n      result.entries.push(view.getUint32(i));\n    }\n\n    return result;\n  },\n  stts: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      timeToSamples: []\n    },\n        entryCount = view.getUint32(4),\n        i;\n\n    for (i = 8; entryCount; i += 8, entryCount--) {\n      result.timeToSamples.push({\n        sampleCount: view.getUint32(i),\n        sampleDelta: view.getUint32(i + 4)\n      });\n    }\n\n    return result;\n  },\n  styp: function (data) {\n    return parse.ftyp(data);\n  },\n  tfdt: function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      baseMediaDecodeTime: toUnsigned(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7])\n    };\n\n    if (result.version === 1) {\n      result.baseMediaDecodeTime *= Math.pow(2, 32);\n      result.baseMediaDecodeTime += toUnsigned(data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11]);\n    }\n\n    return result;\n  },\n  tfhd: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      trackId: view.getUint32(4)\n    },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof = result.flags[0] & 0x020000,\n        i;\n    i = 8;\n\n    if (baseDataOffsetPresent) {\n      i += 4; // truncate top 4 bytes\n      // FIXME: should we read the full 64 bits?\n\n      result.baseDataOffset = view.getUint32(12);\n      i += 4;\n    }\n\n    if (sampleDescriptionIndexPresent) {\n      result.sampleDescriptionIndex = view.getUint32(i);\n      i += 4;\n    }\n\n    if (defaultSampleDurationPresent) {\n      result.defaultSampleDuration = view.getUint32(i);\n      i += 4;\n    }\n\n    if (defaultSampleSizePresent) {\n      result.defaultSampleSize = view.getUint32(i);\n      i += 4;\n    }\n\n    if (defaultSampleFlagsPresent) {\n      result.defaultSampleFlags = view.getUint32(i);\n    }\n\n    if (durationIsEmpty) {\n      result.durationIsEmpty = true;\n    }\n\n    if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n      result.baseDataOffsetIsMoof = true;\n    }\n\n    return result;\n  },\n  tkhd: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n      version: view.getUint8(0),\n      flags: new Uint8Array(data.subarray(1, 4))\n    };\n\n    if (result.version === 1) {\n      i += 4;\n      result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n      i += 8;\n      result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n      i += 4;\n      result.trackId = view.getUint32(i);\n      i += 4;\n      i += 8;\n      result.duration = view.getUint32(i); // truncating top 4 bytes\n    } else {\n      result.creationTime = parseMp4Date(view.getUint32(i));\n      i += 4;\n      result.modificationTime = parseMp4Date(view.getUint32(i));\n      i += 4;\n      result.trackId = view.getUint32(i);\n      i += 4;\n      i += 4;\n      result.duration = view.getUint32(i);\n    }\n\n    i += 4;\n    i += 2 * 4;\n    result.layer = view.getUint16(i);\n    i += 2;\n    result.alternateGroup = view.getUint16(i);\n    i += 2; // convert fixed-point, base 16 back to a number\n\n    result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n    i += 2;\n    i += 2;\n    result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n    i += 9 * 4;\n    result.width = view.getUint16(i) + view.getUint16(i + 2) / 65536;\n    i += 4;\n    result.height = view.getUint16(i) + view.getUint16(i + 2) / 65536;\n    return result;\n  },\n  traf: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  trak: function (data) {\n    return {\n      boxes: inspectMp4(data)\n    };\n  },\n  trex: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      trackId: view.getUint32(4),\n      defaultSampleDescriptionIndex: view.getUint32(8),\n      defaultSampleDuration: view.getUint32(12),\n      defaultSampleSize: view.getUint32(16),\n      sampleDependsOn: data[20] & 0x03,\n      sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n      sampleHasRedundancy: (data[21] & 0x30) >> 4,\n      samplePaddingValue: (data[21] & 0x0e) >> 1,\n      sampleIsDifferenceSample: !!(data[21] & 0x01),\n      sampleDegradationPriority: view.getUint16(22)\n    };\n  },\n  trun: function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      samples: []\n    },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n    dataOffsetPresent = result.flags[2] & 0x01,\n        // compare with 2nd byte of 0x1\n    firstSampleFlagsPresent = result.flags[2] & 0x04,\n        // compare with 2nd byte of 0x4\n    sampleDurationPresent = result.flags[1] & 0x01,\n        // compare with 2nd byte of 0x100\n    sampleSizePresent = result.flags[1] & 0x02,\n        // compare with 2nd byte of 0x200\n    sampleFlagsPresent = result.flags[1] & 0x04,\n        // compare with 2nd byte of 0x400\n    sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n        // compare with 2nd byte of 0x800\n    sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n    if (dataOffsetPresent) {\n      // 32 bit signed integer\n      result.dataOffset = view.getInt32(offset);\n      offset += 4;\n    } // Overrides the flags for the first sample only. The order of\n    // optional values will be: duration, size, compositionTimeOffset\n\n\n    if (firstSampleFlagsPresent && sampleCount) {\n      sample = {\n        flags: parseSampleFlags(data.subarray(offset, offset + 4))\n      };\n      offset += 4;\n\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleCompositionTimeOffsetPresent) {\n        // Note: this should be a signed int if version is 1\n        sample.compositionTimeOffset = view.getUint32(offset);\n        offset += 4;\n      }\n\n      result.samples.push(sample);\n      sampleCount--;\n    }\n\n    while (sampleCount--) {\n      sample = {};\n\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleFlagsPresent) {\n        sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n        offset += 4;\n      }\n\n      if (sampleCompositionTimeOffsetPresent) {\n        // Note: this should be a signed int if version is 1\n        sample.compositionTimeOffset = view.getUint32(offset);\n        offset += 4;\n      }\n\n      result.samples.push(sample);\n    }\n\n    return result;\n  },\n  'url ': function (data) {\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4))\n    };\n  },\n  vmhd: function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    return {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      graphicsmode: view.getUint16(4),\n      opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n    };\n  }\n};\n/**\n * Return a javascript array of box objects parsed from an ISO base\n * media file.\n * @param data {Uint8Array} the binary data of the media to be inspected\n * @return {array} a javascript array of potentially nested box objects\n */\n\n\ninspectMp4 = function (data) {\n  var i = 0,\n      result = [],\n      view,\n      size,\n      type,\n      end,\n      box; // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n\n  var ab = new ArrayBuffer(data.length);\n  var v = new Uint8Array(ab);\n\n  for (var z = 0; z < data.length; ++z) {\n    v[z] = data[z];\n  }\n\n  view = new DataView(ab);\n\n  while (i < data.byteLength) {\n    // parse box data\n    size = view.getUint32(i);\n    type = parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength; // parse type-specific data\n\n    box = (parse[type] || function (data) {\n      return {\n        data: data\n      };\n    })(data.subarray(i + 8, end));\n\n    box.size = size;\n    box.type = type; // store this box and move to the next\n\n    result.push(box);\n    i = end;\n  }\n\n  return result;\n};\n/**\n * Returns a textual representation of the javascript represtentation\n * of an MP4 file. You can use it as an alternative to\n * JSON.stringify() to compare inspected MP4s.\n * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n * file\n * @param depth {number} (optional) the number of ancestor boxes of\n * the elements of inspectedMp4. Assumed to be zero if unspecified.\n * @return {string} a text representation of the parsed MP4\n */\n\n\ntextifyMp4 = function (inspectedMp4, depth) {\n  var indent;\n  depth = depth || 0;\n  indent = new Array(depth * 2 + 1).join(' '); // iterate over all the boxes\n\n  return inspectedMp4.map(function (box, index) {\n    // list the box type first at the current indentation level\n    return indent + box.type + '\\n' + // the type is already included and handle child boxes separately\n    Object.keys(box).filter(function (key) {\n      return key !== 'type' && key !== 'boxes'; // output all the box properties\n    }).map(function (key) {\n      var prefix = indent + '  ' + key + ': ',\n          value = box[key]; // print out raw bytes as hexademical\n\n      if (value instanceof Uint8Array || value instanceof Uint32Array) {\n        var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\n          return ' ' + ('00' + byte.toString(16)).slice(-2);\n        }).join('').match(/.{1,24}/g);\n\n        if (!bytes) {\n          return prefix + '<>';\n        }\n\n        if (bytes.length === 1) {\n          return prefix + '<' + bytes.join('').slice(1) + '>';\n        }\n\n        return prefix + '<\\n' + bytes.map(function (line) {\n          return indent + '  ' + line;\n        }).join('\\n') + '\\n' + indent + '  >';\n      } // stringify generic objects\n\n\n      return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n        if (index === 0) {\n          return line;\n        }\n\n        return indent + '  ' + line;\n      }).join('\\n');\n    }).join('\\n') + ( // recursively textify the child boxes\n    box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n  }).join('\\n');\n};\n\nmodule.exports = {\n  inspect: inspectMp4,\n  textify: textifyMp4,\n  parseType: parseType,\n  findBox: findBox,\n  parseTraf: parse.traf,\n  parseTfdt: parse.tfdt,\n  parseHdlr: parse.hdlr,\n  parseTfhd: parse.tfhd,\n  parseTrun: parse.trun,\n  parseSidx: parse.sidx\n};","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/mux.js/lib/tools/mp4-inspector.js"],"names":["inspectMp4","textifyMp4","toUnsigned","require","parseMp4Date","seconds","Date","parseSampleFlags","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","parseType","buffer","result","String","fromCharCode","findBox","data","path","results","i","size","type","end","subresults","length","byteLength","subarray","push","slice","concat","nalParse","avcStream","avcView","DataView","byteOffset","getUint32","parse","avc1","view","dataReferenceIndex","getUint16","width","height","horizresolution","vertresolution","frameCount","depth","config","avcC","configurationVersion","avcProfileIndication","profileCompatibility","avcLevelIndication","lengthSizeMinusOne","sps","pps","numOfSequenceParameterSets","numOfPictureParameterSets","nalSize","offset","Uint8Array","btrt","bufferSizeDB","maxBitrate","avgBitrate","esds","version","esId","streamPriority","decoderConfig","objectProfileIndication","streamType","bufferSize","decoderConfigDescriptor","tag","audioObjectType","samplingFrequencyIndex","channelConfiguration","ftyp","majorBrand","minorVersion","compatibleBrands","dinf","boxes","dref","dataReferences","hdlr","getUint8","handlerType","name","decodeURIComponent","escape","mdat","nals","mdhd","language","creationTime","modificationTime","timescale","duration","mdia","mfhd","sequenceNumber","minf","mp4a","channelcount","samplesize","samplerate","streamDescriptor","moof","moov","mvex","mvhd","rate","volume","matrix","Uint32Array","nextTrackId","pdin","initialDelay","sdtp","samples","sidx","references","referenceId","earliestPresentationTime","firstOffset","referenceCount","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","smhd","balance","stbl","stco","chunkOffsets","entryCount","stsc","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptionIndex","stsd","sampleDescriptions","stsz","sampleSize","entries","stts","timeToSamples","sampleCount","sampleDelta","styp","tfdt","baseMediaDecodeTime","Math","pow","tfhd","trackId","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","baseDataOffset","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","tkhd","layer","alternateGroup","traf","trak","trex","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","trun","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","sample","dataOffset","getInt32","compositionTimeOffset","vmhd","graphicsmode","opcolor","Uint16Array","box","ab","ArrayBuffer","v","z","inspectedMp4","indent","Array","join","map","index","Object","keys","filter","key","prefix","value","bytes","prototype","call","byte","toString","match","line","JSON","stringify","split","module","exports","inspect","textify","parseTraf","parseTfdt","parseHdlr","parseTfhd","parseTrun","parseSidx"],"mappings":"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","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Parse the internal MP4 structure into an equivalent javascript\n * object.\n */\n'use strict';\n\nvar\n  inspectMp4,\n  textifyMp4,\n  toUnsigned = require('../utils/bin').toUnsigned,\n  parseMp4Date = function(seconds) {\n    return new Date(seconds * 1000 - 2082844800000);\n  },\n  parseSampleFlags = function(flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: (flags[2] << 8) | flags[3]\n    };\n  },\n  /**\n   * Returns the string representation of an ASCII encoded four byte buffer.\n   * @param buffer {Uint8Array} a four-byte buffer to translate\n   * @return {string} the corresponding string\n   */\n  parseType = function(buffer) {\n    var result = '';\n    result += String.fromCharCode(buffer[0]);\n    result += String.fromCharCode(buffer[1]);\n    result += String.fromCharCode(buffer[2]);\n    result += String.fromCharCode(buffer[3]);\n    return result;\n  },\n  // Find the data for a box specified by its path\n  findBox = function(data, path) {\n    var results = [],\n        i, size, type, end, subresults;\n\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n\n    for (i = 0; i < data.byteLength;) {\n      size  = toUnsigned(data[i]     << 24 |\n                         data[i + 1] << 16 |\n                         data[i + 2] <<  8 |\n                         data[i + 3]);\n\n      type = parseType(data.subarray(i + 4, i + 8));\n\n      end = size > 1 ? i + size : data.byteLength;\n\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push(data.subarray(i + 8, end));\n        } else {\n          // recursively search for the next box along the path\n          subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n      i = end;\n    }\n\n    // we've finished searching all of data\n    return results;\n  },\n  nalParse = function(avcStream) {\n    var\n      avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = [],\n      i,\n      length;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4;\n\n      // bail if this doesn't appear to be an H264 stream\n      if (length <= 0) {\n        result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n      case 0x01:\n        result.push('slice_layer_without_partitioning_rbsp');\n        break;\n      case 0x05:\n        result.push('slice_layer_without_partitioning_rbsp_idr');\n        break;\n      case 0x06:\n        result.push('sei_rbsp');\n        break;\n      case 0x07:\n        result.push('seq_parameter_set_rbsp');\n        break;\n      case 0x08:\n        result.push('pic_parameter_set_rbsp');\n        break;\n      case 0x09:\n        result.push('access_unit_delimiter_rbsp');\n        break;\n      default:\n        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n        break;\n      }\n    }\n    return result;\n  },\n\n  // registry of handlers for individual mp4 box types\n  parse = {\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    avc1: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        dataReferenceIndex: view.getUint16(6),\n        width: view.getUint16(24),\n        height: view.getUint16(26),\n        horizresolution: view.getUint16(28) + (view.getUint16(30) / 16),\n        vertresolution: view.getUint16(32) + (view.getUint16(34) / 16),\n        frameCount: view.getUint16(40),\n        depth: view.getUint16(74),\n        config: inspectMp4(data.subarray(78, data.byteLength))\n      };\n    },\n    avcC: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n        numOfSequenceParameterSets = data[5] & 0x1f,\n        numOfPictureParameterSets,\n        nalSize,\n        offset,\n        i;\n\n      // iterate past any SPSs\n      offset = 6;\n      for (i = 0; i < numOfSequenceParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      // iterate past any PPSs\n      numOfPictureParameterSets = data[offset];\n      offset++;\n      for (i = 0; i < numOfPictureParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      return result;\n    },\n    btrt: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        bufferSizeDB: view.getUint32(0),\n        maxBitrate: view.getUint32(4),\n        avgBitrate: view.getUint32(8)\n      };\n    },\n    esds: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        esId: (data[6] << 8) | data[7],\n        streamPriority: data[8] & 0x1f,\n        decoderConfig: {\n          objectProfileIndication: data[11],\n          streamType: (data[12] >>> 2) & 0x3f,\n          bufferSize: (data[13] << 16) | (data[14] << 8) | data[15],\n          maxBitrate: (data[16] << 24) |\n            (data[17] << 16) |\n            (data[18] <<  8) |\n            data[19],\n          avgBitrate: (data[20] << 24) |\n            (data[21] << 16) |\n            (data[22] <<  8) |\n            data[23],\n          decoderConfigDescriptor: {\n            tag: data[24],\n            length: data[25],\n            audioObjectType: (data[26] >>> 3) & 0x1f,\n            samplingFrequencyIndex: ((data[26] & 0x07) << 1) |\n              ((data[27] >>> 7) & 0x01),\n            channelConfiguration: (data[27] >>> 3) & 0x0f\n          }\n        }\n      };\n    },\n    ftyp: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          majorBrand: parseType(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n        i = 8;\n      while (i < data.byteLength) {\n        result.compatibleBrands.push(parseType(data.subarray(i, i + 4)));\n        i += 4;\n      }\n      return result;\n    },\n    dinf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    dref: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        dataReferences: inspectMp4(data.subarray(8))\n      };\n    },\n    hdlr: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType(data.subarray(8, 12)),\n          name: ''\n        },\n        i = 8;\n\n      // parse out the name field\n      for (i = 24; i < data.byteLength; i++) {\n        if (data[i] === 0x00) {\n          // the name field is null-terminated\n          i++;\n          break;\n        }\n        result.name += String.fromCharCode(data[i]);\n      }\n      // decode UTF-8 to javascript's internal representation\n      // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n      result.name = decodeURIComponent(escape(result.name));\n\n      return result;\n    },\n    mdat: function(data) {\n      return {\n        byteLength: data.byteLength,\n        nals: nalParse(data)\n      };\n    },\n    mdhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        language,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n      // each field is the packed difference between its ASCII value and 0x60\n      language = view.getUint16(i);\n      result.language += String.fromCharCode((language >> 10) + 0x60);\n      result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n      result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n      return result;\n    },\n    mdia: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mfhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sequenceNumber: (data[4] << 24) |\n          (data[5] << 16) |\n          (data[6] << 8) |\n          (data[7])\n      };\n    },\n    minf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    mp4a: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + (view.getUint16(26) / 65536)\n        };\n\n      // if there are more bytes to process, assume this is an ISO/IEC\n      // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n      if (data.byteLength > 28) {\n        result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n      }\n      return result;\n    },\n    moof: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    moov: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvex: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n\n      // convert fixed-point, base 16 back to a number\n      result.rate = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      i += 2 * 4;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      i += 6 * 4;\n      result.nextTrackId = view.getUint32(i);\n      return result;\n    },\n    pdin: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        rate: view.getUint32(4),\n        initialDelay: view.getUint32(8)\n      };\n    },\n    sdtp: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        }, i;\n\n      for (i = 4; i < data.byteLength; i++) {\n        result.samples.push({\n          dependsOn: (data[i] & 0x30) >> 4,\n          isDependedOn: (data[i] & 0x0c) >> 2,\n          hasRedundancy: data[i] & 0x03\n        });\n      }\n      return result;\n    },\n    sidx: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n            version: data[0],\n            flags: new Uint8Array(data.subarray(1, 4)),\n            references: [],\n            referenceId: view.getUint32(4),\n            timescale: view.getUint32(8),\n            earliestPresentationTime: view.getUint32(12),\n            firstOffset: view.getUint32(16)\n          },\n          referenceCount = view.getUint16(22),\n          i;\n\n      for (i = 24; referenceCount; i += 12, referenceCount--) {\n        result.references.push({\n          referenceType: (data[i] & 0x80) >>> 7,\n          referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n          subsegmentDuration: view.getUint32(i + 4),\n          startsWithSap: !!(data[i + 8] & 0x80),\n          sapType: (data[i + 8] & 0x70) >>> 4,\n          sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n        });\n      }\n\n      return result;\n    },\n    smhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        balance: data[4] + (data[5] / 256)\n      };\n    },\n    stbl: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    stco: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.chunkOffsets.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stsc: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        entryCount = view.getUint32(4),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n        i;\n      for (i = 8; entryCount; i += 12, entryCount--) {\n        result.sampleToChunks.push({\n          firstChunk: view.getUint32(i),\n          samplesPerChunk: view.getUint32(i + 4),\n          sampleDescriptionIndex: view.getUint32(i + 8)\n        });\n      }\n      return result;\n    },\n    stsd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleDescriptions: inspectMp4(data.subarray(8))\n      };\n    },\n    stsz: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n        i;\n      for (i = 12; i < data.byteLength; i += 4) {\n        result.entries.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stts: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.timeToSamples.push({\n          sampleCount: view.getUint32(i),\n          sampleDelta: view.getUint32(i + 4)\n        });\n      }\n      return result;\n    },\n    styp: function(data) {\n      return parse.ftyp(data);\n    },\n    tfdt: function(data) {\n      var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        baseMediaDecodeTime: toUnsigned(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7])\n      };\n      if (result.version === 1) {\n        result.baseMediaDecodeTime *= Math.pow(2, 32);\n        result.baseMediaDecodeTime += toUnsigned(data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11]);\n      }\n      return result;\n    },\n    tfhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof =  result.flags[0] & 0x020000,\n        i;\n\n      i = 8;\n      if (baseDataOffsetPresent) {\n        i += 4; // truncate top 4 bytes\n        // FIXME: should we read the full 64 bits?\n        result.baseDataOffset = view.getUint32(12);\n        i += 4;\n      }\n      if (sampleDescriptionIndexPresent) {\n        result.sampleDescriptionIndex = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleDurationPresent) {\n        result.defaultSampleDuration = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleSizePresent) {\n        result.defaultSampleSize = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleFlagsPresent) {\n        result.defaultSampleFlags = view.getUint32(i);\n      }\n      if (durationIsEmpty) {\n        result.durationIsEmpty = true;\n      }\n      if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n        result.baseDataOffsetIsMoof = true;\n      }\n      return result;\n    },\n    tkhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      i += 2 * 4;\n      result.layer = view.getUint16(i);\n      i += 2;\n      result.alternateGroup = view.getUint16(i);\n      i += 2;\n      // convert fixed-point, base 16 back to a number\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      result.width = view.getUint16(i) + (view.getUint16(i + 2) / 65536);\n      i += 4;\n      result.height = view.getUint16(i) + (view.getUint16(i + 2) / 65536);\n      return result;\n    },\n    traf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trak: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trex: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4),\n        defaultSampleDescriptionIndex: view.getUint32(8),\n        defaultSampleDuration: view.getUint32(12),\n        defaultSampleSize: view.getUint32(16),\n        sampleDependsOn: data[20] & 0x03,\n        sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n        sampleHasRedundancy: (data[21] & 0x30) >> 4,\n        samplePaddingValue: (data[21] & 0x0e) >> 1,\n        sampleIsDifferenceSample: !!(data[21] & 0x01),\n        sampleDegradationPriority: view.getUint16(22)\n      };\n    },\n    trun: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n      if (dataOffsetPresent) {\n        // 32 bit signed integer\n        result.dataOffset = view.getInt32(offset);\n        offset += 4;\n      }\n\n      // Overrides the flags for the first sample only. The order of\n      // optional values will be: duration, size, compositionTimeOffset\n      if (firstSampleFlagsPresent && sampleCount) {\n        sample = {\n          flags: parseSampleFlags(data.subarray(offset, offset + 4))\n        };\n        offset += 4;\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n        sampleCount--;\n      }\n\n      while (sampleCount--) {\n        sample = {};\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleFlagsPresent) {\n          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n      }\n      return result;\n    },\n    'url ': function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n    },\n    vmhd: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        graphicsmode: view.getUint16(4),\n        opcolor: new Uint16Array([view.getUint16(6),\n                                  view.getUint16(8),\n                                  view.getUint16(10)])\n      };\n    }\n  };\n\n\n/**\n * Return a javascript array of box objects parsed from an ISO base\n * media file.\n * @param data {Uint8Array} the binary data of the media to be inspected\n * @return {array} a javascript array of potentially nested box objects\n */\ninspectMp4 = function(data) {\n  var\n    i = 0,\n    result = [],\n    view,\n    size,\n    type,\n    end,\n    box;\n\n  // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n  var ab = new ArrayBuffer(data.length);\n  var v = new Uint8Array(ab);\n  for (var z = 0; z < data.length; ++z) {\n      v[z] = data[z];\n  }\n  view = new DataView(ab);\n\n  while (i < data.byteLength) {\n    // parse box data\n    size = view.getUint32(i);\n    type =  parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    // parse type-specific data\n    box = (parse[type] || function(data) {\n      return {\n        data: data\n      };\n    })(data.subarray(i + 8, end));\n    box.size = size;\n    box.type = type;\n\n    // store this box and move to the next\n    result.push(box);\n    i = end;\n  }\n  return result;\n};\n\n/**\n * Returns a textual representation of the javascript represtentation\n * of an MP4 file. You can use it as an alternative to\n * JSON.stringify() to compare inspected MP4s.\n * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n * file\n * @param depth {number} (optional) the number of ancestor boxes of\n * the elements of inspectedMp4. Assumed to be zero if unspecified.\n * @return {string} a text representation of the parsed MP4\n */\ntextifyMp4 = function(inspectedMp4, depth) {\n  var indent;\n  depth = depth || 0;\n  indent = new Array(depth * 2 + 1).join(' ');\n\n  // iterate over all the boxes\n  return inspectedMp4.map(function(box, index) {\n\n    // list the box type first at the current indentation level\n    return indent + box.type + '\\n' +\n\n      // the type is already included and handle child boxes separately\n      Object.keys(box).filter(function(key) {\n        return key !== 'type' && key !== 'boxes';\n\n      // output all the box properties\n      }).map(function(key) {\n        var prefix = indent + '  ' + key + ': ',\n            value = box[key];\n\n        // print out raw bytes as hexademical\n        if (value instanceof Uint8Array || value instanceof Uint32Array) {\n          var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength))\n              .map(function(byte) {\n                return ' ' + ('00' + byte.toString(16)).slice(-2);\n              }).join('').match(/.{1,24}/g);\n          if (!bytes) {\n            return prefix + '<>';\n          }\n          if (bytes.length === 1) {\n            return prefix + '<' + bytes.join('').slice(1) + '>';\n          }\n          return prefix + '<\\n' + bytes.map(function(line) {\n            return indent + '  ' + line;\n          }).join('\\n') + '\\n' + indent + '  >';\n        }\n\n        // stringify generic objects\n        return prefix +\n            JSON.stringify(value, null, 2)\n              .split('\\n').map(function(line, index) {\n                if (index === 0) {\n                  return line;\n                }\n                return indent + '  ' + line;\n              }).join('\\n');\n      }).join('\\n') +\n\n    // recursively textify the child boxes\n    (box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n  }).join('\\n');\n};\n\nmodule.exports = {\n  inspect: inspectMp4,\n  textify: textifyMp4,\n  parseType: parseType,\n  findBox: findBox,\n  parseTraf: parse.traf,\n  parseTfdt: parse.tfdt,\n  parseHdlr: parse.hdlr,\n  parseTfhd: parse.tfhd,\n  parseTrun: parse.trun,\n  parseSidx: parse.sidx\n};\n"]},"metadata":{},"sourceType":"script"}