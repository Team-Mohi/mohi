{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\naxios.interceptors.request.use(config => {\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n});\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      return new Promise(function (resolve, reject) {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(token => {\n        originalRequest.headers['Authorization'] = 'Bearer ' + token;\n        return axios(originalRequest);\n      }).catch(err => {\n        return Promise.reject(err);\n      });\n    }\n\n    originalRequest._retry = true;\n    isRefreshing = true;\n    return new Promise(function (resolve, reject) {\n      axios.post(API_REFRESH_TOKEN, {\n        'token': token\n      }).then(res => {\n        if (res.status === 200) {\n          localStorage.setItem('ustk', JSON.stringify(res.data));\n          processQueue(null, res.data.access_token);\n          axios.defaults.headers.common['Authorization'] = 'Bearer ' + res.data.access_token;\n          originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n          resolve(axios(originalRequest));\n        }\n      }).then(() => {\n        isRefreshing = false;\n      });\n    });\n  }\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","interceptors","request","use","config","token","headers","error","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","originalRequest","status","_retry","push","then","catch","err","post","res","localStorage","setItem","JSON","stringify","data","access_token","defaults","common","new_token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AAEED,KAAK,CAACE,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAM,IAAI;AACN,MAAIC,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkC,YAAYD,KAA9C;AACH;;AACD,SAAOD,MAAP;AACH,CANJ,EAOGG,KAAK,IAAI;AACLC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACL,CATF;AAWC,IAAIG,YAAY,GAAG,KAAnB;AACA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAMC,YAAY,GAAG,CAACL,KAAD,EAAQF,KAAK,GAAG,IAAhB,KAAyB;AAC5CM,EAAAA,WAAW,CAACE,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,QAAIP,KAAJ,EAAW;AACTO,MAAAA,IAAI,CAACL,MAAL,CAAYF,KAAZ;AACD,KAFD,MAEO;AACLO,MAAAA,IAAI,CAACC,OAAL,CAAaV,KAAb;AACD;AACF,GAND;AAQAM,EAAAA,WAAW,GAAG,EAAd;AACD,CAVD;;AAYDZ,KAAK,CAACE,YAAN,CAAmBe,QAAnB,CAA4Bb,GAA5B,CAAiCa,QAAD,IAAc;AAC3C,SAAOA,QAAP;AACF,CAFD,EAGA,UAAUT,KAAV,EAAiB;AACd,QAAMU,eAAe,GAAGV,KAAK,CAACH,MAA9B;;AACA,MAAIG,KAAK,CAACS,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAE5D,QAAIT,YAAJ,EAAkB;AACf,aAAO,IAAIF,OAAJ,CAAY,UAASO,OAAT,EAAkBN,MAAlB,EAA0B;AAC3CE,QAAAA,WAAW,CAACS,IAAZ,CAAiB;AAACL,UAAAA,OAAD;AAAUN,UAAAA;AAAV,SAAjB;AACD,OAFM,EAEJY,IAFI,CAEChB,KAAK,IAAI;AACfY,QAAAA,eAAe,CAACX,OAAhB,CAAwB,eAAxB,IAA2C,YAAYD,KAAvD;AACA,eAAON,KAAK,CAACkB,eAAD,CAAZ;AACD,OALM,EAKJK,KALI,CAKEC,GAAG,IAAI;AACd,eAAOf,OAAO,CAACC,MAAR,CAAec,GAAf,CAAP;AACD,OAPM,CAAP;AAQD;;AAEAN,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACAT,IAAAA,YAAY,GAAG,IAAf;AACA,WAAO,IAAIF,OAAJ,CAAY,UAAUO,OAAV,EAAmBN,MAAnB,EAA2B;AAC5CV,MAAAA,KAAK,CAACyB,IAAN,CAAWxB,iBAAX,EACI;AACI,iBAAUK;AADd,OADJ,EAIKgB,IAJL,CAIWI,GAAD,IAAS;AACX,YAAIA,GAAG,CAACP,MAAJ,KAAe,GAAnB,EAAwB;AACpBQ,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAnB,CAA7B;AACAlB,UAAAA,YAAY,CAAC,IAAD,EAAOa,GAAG,CAACK,IAAJ,CAASC,YAAhB,CAAZ;AACAhC,UAAAA,KAAK,CAACiC,QAAN,CAAe1B,OAAf,CAAuB2B,MAAvB,CAA8B,eAA9B,IAAiD,YAAYR,GAAG,CAACK,IAAJ,CAASC,YAAtE;AACAd,UAAAA,eAAe,CAACX,OAAhB,CAAwB,eAAxB,IAA2C,YAAY4B,SAAvD;AACAnB,UAAAA,OAAO,CAAChB,KAAK,CAACkB,eAAD,CAAN,CAAP;AACH;AACJ,OAZL,EAaKI,IAbL,CAaU,MAAM;AAAEX,QAAAA,YAAY,GAAG,KAAf;AAAsB,OAbxC;AAcA,KAfK,CAAP;AAgBH;;AACD,SAAOF,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,CAtCD","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\n  axios.interceptors.request.use(\r\n     config => {\r\n         if (token) {\r\n             config.headers['Authorization'] = 'Bearer ' + token;\r\n         }\r\n         return config;\r\n     },\r\n     error => {\r\n         Promise.reject(error)\r\n   });\r\n\r\n   let isRefreshing = false;\r\n   let failedQueue = [];\r\n\r\n   const processQueue = (error, token = null) => {\r\n     failedQueue.forEach(prom => {\r\n       if (error) {\r\n         prom.reject(error);\r\n       } else {\r\n         prom.resolve(token);\r\n       }\r\n     })\r\n\r\n     failedQueue = [];\r\n   }\r\n\r\n  axios.interceptors.response.use((response) => {\r\n     return response\r\n  },\r\n  function (error) {\r\n     const originalRequest = error.config;\r\n     if (error.response.status === 401 && !originalRequest._retry) {\r\n\r\n       if (isRefreshing) {\r\n          return new Promise(function(resolve, reject) {\r\n            failedQueue.push({resolve, reject})\r\n          }).then(token => {\r\n            originalRequest.headers['Authorization'] = 'Bearer ' + token;\r\n            return axios(originalRequest);\r\n          }).catch(err => {\r\n            return Promise.reject(err);\r\n          })\r\n        }\r\n\r\n         originalRequest._retry = true;\r\n         isRefreshing = true;\r\n         return new Promise(function (resolve, reject) {\r\n           axios.post(API_REFRESH_TOKEN,\r\n               {\r\n                   'token' : token\r\n               })\r\n               .then((res) => {\r\n                   if (res.status === 200) {\r\n                       localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                       processQueue(null, res.data.access_token);\r\n                       axios.defaults.headers.common['Authorization'] = 'Bearer ' + res.data.access_token;\r\n                       originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                       resolve(axios(originalRequest));\r\n                   }\r\n               })\r\n               .then(() => { isRefreshing = false })\r\n          })\r\n     }\r\n     return Promise.reject(error);\r\n  });\r\n"]},"metadata":{},"sourceType":"module"}