{"ast":null,"code":"import { latLng, latLngBounds, LatLng, LatLngBounds, Util, DomUtil, GeoJSON } from 'leaflet';\nimport { request, warn } from './Request';\nimport { options } from './Options';\nimport { Support } from './Support';\nimport { geojsonToArcGIS as g2a, arcgisToGeoJSON as a2g } from '@terraformer/arcgis';\nexport function geojsonToArcGIS(geojson, idAttr) {\n  return g2a(geojson, idAttr);\n}\nexport function arcgisToGeoJSON(arcgis, idAttr) {\n  return a2g(arcgis, idAttr);\n} // convert an extent (ArcGIS) to LatLngBounds (Leaflet)\n\nexport function extentToBounds(extent) {\n  // \"NaN\" coordinates from ArcGIS Server indicate a null geometry\n  if (extent.xmin !== 'NaN' && extent.ymin !== 'NaN' && extent.xmax !== 'NaN' && extent.ymax !== 'NaN') {\n    var sw = latLng(extent.ymin, extent.xmin);\n    var ne = latLng(extent.ymax, extent.xmax);\n    return latLngBounds(sw, ne);\n  } else {\n    return null;\n  }\n} // convert an LatLngBounds (Leaflet) to extent (ArcGIS)\n\nexport function boundsToExtent(bounds) {\n  bounds = latLngBounds(bounds);\n  return {\n    'xmin': bounds.getSouthWest().lng,\n    'ymin': bounds.getSouthWest().lat,\n    'xmax': bounds.getNorthEast().lng,\n    'ymax': bounds.getNorthEast().lat,\n    'spatialReference': {\n      'wkid': 4326\n    }\n  };\n}\nvar knownFieldNames = /^(OBJECTID|FID|OID|ID)$/i; // Attempts to find the ID Field from response\n\nexport function _findIdAttributeFromResponse(response) {\n  var result;\n\n  if (response.objectIdFieldName) {\n    // Find Id Field directly\n    result = response.objectIdFieldName;\n  } else if (response.fields) {\n    // Find ID Field based on field type\n    for (var j = 0; j <= response.fields.length - 1; j++) {\n      if (response.fields[j].type === 'esriFieldTypeOID') {\n        result = response.fields[j].name;\n        break;\n      }\n    }\n\n    if (!result) {\n      // If no field was marked as being the esriFieldTypeOID try well known field names\n      for (j = 0; j <= response.fields.length - 1; j++) {\n        if (response.fields[j].name.match(knownFieldNames)) {\n          result = response.fields[j].name;\n          break;\n        }\n      }\n    }\n  }\n\n  return result;\n} // This is the 'last' resort, find the Id field from the specified feature\n\nexport function _findIdAttributeFromFeature(feature) {\n  for (var key in feature.attributes) {\n    if (key.match(knownFieldNames)) {\n      return key;\n    }\n  }\n}\nexport function responseToFeatureCollection(response, idAttribute) {\n  var objectIdField;\n  var features = response.features || response.results;\n  var count = features && features.length;\n\n  if (idAttribute) {\n    objectIdField = idAttribute;\n  } else {\n    objectIdField = _findIdAttributeFromResponse(response);\n  }\n\n  var featureCollection = {\n    type: 'FeatureCollection',\n    features: []\n  };\n\n  if (count) {\n    for (var i = features.length - 1; i >= 0; i--) {\n      var feature = arcgisToGeoJSON(features[i], objectIdField || _findIdAttributeFromFeature(features[i]));\n      featureCollection.features.push(feature);\n    }\n  }\n\n  return featureCollection;\n} // trim url whitespace and add a trailing slash if needed\n\nexport function cleanUrl(url) {\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = Util.trim(url); // add a trailing slash to the url if the user omitted it\n\n  if (url[url.length - 1] !== '/') {\n    url += '/';\n  }\n\n  return url;\n}\n/* Extract url params if any and store them in requestParams attribute.\r\n   Return the options params updated */\n\nexport function getUrlParams(options) {\n  if (options.url.indexOf('?') !== -1) {\n    options.requestParams = options.requestParams || {};\n    var queryString = options.url.substring(options.url.indexOf('?') + 1);\n    options.url = options.url.split('?')[0];\n    options.requestParams = JSON.parse('{\"' + decodeURI(queryString).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\n  }\n\n  options.url = cleanUrl(options.url.split('?')[0]);\n  return options;\n}\nexport function isArcgisOnline(url) {\n  /* hosted feature services support geojson as an output format\r\n  utility.arcgis.com services are proxied from a variety of ArcGIS Server vintages, and may not */\n  return /^(?!.*utility\\.arcgis\\.com).*\\.arcgis\\.com.*FeatureServer/i.test(url);\n}\nexport function geojsonTypeToArcGIS(geoJsonType) {\n  var arcgisGeometryType;\n\n  switch (geoJsonType) {\n    case 'Point':\n      arcgisGeometryType = 'esriGeometryPoint';\n      break;\n\n    case 'MultiPoint':\n      arcgisGeometryType = 'esriGeometryMultipoint';\n      break;\n\n    case 'LineString':\n      arcgisGeometryType = 'esriGeometryPolyline';\n      break;\n\n    case 'MultiLineString':\n      arcgisGeometryType = 'esriGeometryPolyline';\n      break;\n\n    case 'Polygon':\n      arcgisGeometryType = 'esriGeometryPolygon';\n      break;\n\n    case 'MultiPolygon':\n      arcgisGeometryType = 'esriGeometryPolygon';\n      break;\n  }\n\n  return arcgisGeometryType;\n}\nexport function calcAttributionWidth(map) {\n  // either crop at 55px or user defined buffer\n  return map.getSize().x - options.attributionWidthOffset + 'px';\n}\nexport function setEsriAttribution(map) {\n  if (map.attributionControl && !map.attributionControl._esriAttributionAdded) {\n    map.attributionControl.setPrefix('<a href=\"http://leafletjs.com\" title=\"A JS library for interactive maps\">Leaflet</a> | Powered by <a href=\"https://www.esri.com\">Esri</a>');\n    var hoverAttributionStyle = document.createElement('style');\n    hoverAttributionStyle.type = 'text/css';\n    hoverAttributionStyle.innerHTML = '.esri-truncated-attribution:hover {' + 'white-space: normal;' + '}';\n    document.getElementsByTagName('head')[0].appendChild(hoverAttributionStyle);\n    DomUtil.addClass(map.attributionControl._container, 'esri-truncated-attribution:hover'); // define a new css class in JS to trim attribution into a single line\n\n    var attributionStyle = document.createElement('style');\n    attributionStyle.type = 'text/css';\n    attributionStyle.innerHTML = '.esri-truncated-attribution {' + 'vertical-align: -3px;' + 'white-space: nowrap;' + 'overflow: hidden;' + 'text-overflow: ellipsis;' + 'display: inline-block;' + 'transition: 0s white-space;' + 'transition-delay: 1s;' + 'max-width: ' + calcAttributionWidth(map) + ';' + '}';\n    document.getElementsByTagName('head')[0].appendChild(attributionStyle);\n    DomUtil.addClass(map.attributionControl._container, 'esri-truncated-attribution'); // update the width used to truncate when the map itself is resized\n\n    map.on('resize', function (e) {\n      map.attributionControl._container.style.maxWidth = calcAttributionWidth(e.target);\n    });\n    map.attributionControl._esriAttributionAdded = true;\n  }\n}\nexport function _setGeometry(geometry) {\n  var params = {\n    geometry: null,\n    geometryType: null\n  }; // convert bounds to extent and finish\n\n  if (geometry instanceof LatLngBounds) {\n    // set geometry + geometryType\n    params.geometry = boundsToExtent(geometry);\n    params.geometryType = 'esriGeometryEnvelope';\n    return params;\n  } // convert L.Marker > L.LatLng\n\n\n  if (geometry.getLatLng) {\n    geometry = geometry.getLatLng();\n  } // convert L.LatLng to a geojson point and continue;\n\n\n  if (geometry instanceof LatLng) {\n    geometry = {\n      type: 'Point',\n      coordinates: [geometry.lng, geometry.lat]\n    };\n  } // handle L.GeoJSON, pull out the first geometry\n\n\n  if (geometry instanceof GeoJSON) {\n    // reassign geometry to the GeoJSON value  (we are assuming that only one feature is present)\n    geometry = geometry.getLayers()[0].feature.geometry;\n    params.geometry = geojsonToArcGIS(geometry);\n    params.geometryType = geojsonTypeToArcGIS(geometry.type);\n  } // Handle L.Polyline and L.Polygon\n\n\n  if (geometry.toGeoJSON) {\n    geometry = geometry.toGeoJSON();\n  } // handle GeoJSON feature by pulling out the geometry\n\n\n  if (geometry.type === 'Feature') {\n    // get the geometry of the geojson feature\n    geometry = geometry.geometry;\n  } // confirm that our GeoJSON is a point, line or polygon\n\n\n  if (geometry.type === 'Point' || geometry.type === 'LineString' || geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\n    params.geometry = geojsonToArcGIS(geometry);\n    params.geometryType = geojsonTypeToArcGIS(geometry.type);\n    return params;\n  } // warn the user if we havn't found an appropriate object\n\n\n  warn('invalid geometry passed to spatial query. Should be L.LatLng, L.LatLngBounds, L.Marker or a GeoJSON Point, Line, Polygon or MultiPolygon object');\n  return;\n}\nexport function _getAttributionData(url, map) {\n  if (Support.cors) {\n    request(url, {}, Util.bind(function (error, attributions) {\n      if (error) {\n        return;\n      }\n\n      map._esriAttributions = [];\n\n      for (var c = 0; c < attributions.contributors.length; c++) {\n        var contributor = attributions.contributors[c];\n\n        for (var i = 0; i < contributor.coverageAreas.length; i++) {\n          var coverageArea = contributor.coverageAreas[i];\n          var southWest = latLng(coverageArea.bbox[0], coverageArea.bbox[1]);\n          var northEast = latLng(coverageArea.bbox[2], coverageArea.bbox[3]);\n\n          map._esriAttributions.push({\n            attribution: contributor.attribution,\n            score: coverageArea.score,\n            bounds: latLngBounds(southWest, northEast),\n            minZoom: coverageArea.zoomMin,\n            maxZoom: coverageArea.zoomMax\n          });\n        }\n      }\n\n      map._esriAttributions.sort(function (a, b) {\n        return b.score - a.score;\n      }); // pass the same argument as the map's 'moveend' event\n\n\n      var obj = {\n        target: map\n      };\n\n      _updateMapAttribution(obj);\n    }, this));\n  }\n}\nexport function _updateMapAttribution(evt) {\n  var map = evt.target;\n  var oldAttributions = map._esriAttributions;\n  if (!map || !map.attributionControl) return;\n\n  var attributionElement = map.attributionControl._container.querySelector('.esri-dynamic-attribution');\n\n  if (attributionElement && oldAttributions) {\n    var newAttributions = '';\n    var bounds = map.getBounds();\n    var wrappedBounds = latLngBounds(bounds.getSouthWest().wrap(), bounds.getNorthEast().wrap());\n    var zoom = map.getZoom();\n\n    for (var i = 0; i < oldAttributions.length; i++) {\n      var attribution = oldAttributions[i];\n      var text = attribution.attribution;\n\n      if (!newAttributions.match(text) && attribution.bounds.intersects(wrappedBounds) && zoom >= attribution.minZoom && zoom <= attribution.maxZoom) {\n        newAttributions += ', ' + text;\n      }\n    }\n\n    newAttributions = newAttributions.substr(2);\n    attributionElement.innerHTML = newAttributions;\n    attributionElement.style.maxWidth = calcAttributionWidth(map);\n    map.fire('attributionupdated', {\n      attribution: newAttributions\n    });\n  }\n} // for backwards compatibility\n\nexport { warn };\nexport var EsriUtil = {\n  warn: warn,\n  cleanUrl: cleanUrl,\n  getUrlParams: getUrlParams,\n  isArcgisOnline: isArcgisOnline,\n  geojsonTypeToArcGIS: geojsonTypeToArcGIS,\n  responseToFeatureCollection: responseToFeatureCollection,\n  geojsonToArcGIS: geojsonToArcGIS,\n  arcgisToGeoJSON: arcgisToGeoJSON,\n  boundsToExtent: boundsToExtent,\n  extentToBounds: extentToBounds,\n  calcAttributionWidth: calcAttributionWidth,\n  setEsriAttribution: setEsriAttribution,\n  _setGeometry: _setGeometry,\n  _getAttributionData: _getAttributionData,\n  _updateMapAttribution: _updateMapAttribution,\n  _findIdAttributeFromFeature: _findIdAttributeFromFeature,\n  _findIdAttributeFromResponse: _findIdAttributeFromResponse\n};\nexport default EsriUtil;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/esri-leaflet/src/Util.js"],"names":["latLng","latLngBounds","LatLng","LatLngBounds","Util","DomUtil","GeoJSON","request","warn","options","Support","geojsonToArcGIS","g2a","arcgisToGeoJSON","a2g","geojson","idAttr","arcgis","extentToBounds","extent","xmin","ymin","xmax","ymax","sw","ne","boundsToExtent","bounds","getSouthWest","lng","lat","getNorthEast","knownFieldNames","_findIdAttributeFromResponse","response","result","objectIdFieldName","fields","j","length","type","name","match","_findIdAttributeFromFeature","feature","key","attributes","responseToFeatureCollection","idAttribute","objectIdField","features","results","count","featureCollection","i","push","cleanUrl","url","trim","getUrlParams","indexOf","requestParams","queryString","substring","split","JSON","parse","decodeURI","replace","isArcgisOnline","test","geojsonTypeToArcGIS","geoJsonType","arcgisGeometryType","calcAttributionWidth","map","getSize","x","attributionWidthOffset","setEsriAttribution","attributionControl","_esriAttributionAdded","setPrefix","hoverAttributionStyle","document","createElement","innerHTML","getElementsByTagName","appendChild","addClass","_container","attributionStyle","on","e","style","maxWidth","target","_setGeometry","geometry","params","geometryType","getLatLng","coordinates","getLayers","toGeoJSON","_getAttributionData","cors","bind","error","attributions","_esriAttributions","c","contributors","contributor","coverageAreas","coverageArea","southWest","bbox","northEast","attribution","score","minZoom","zoomMin","maxZoom","zoomMax","sort","a","b","obj","_updateMapAttribution","evt","oldAttributions","attributionElement","querySelector","newAttributions","getBounds","wrappedBounds","wrap","zoom","getZoom","text","intersects","substr","fire","EsriUtil"],"mappings":"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","sourcesContent":["import { latLng, latLngBounds, LatLng, LatLngBounds, Util, DomUtil, GeoJSON } from 'leaflet';\r\nimport { request, warn } from './Request';\r\nimport { options } from './Options';\r\nimport { Support } from './Support';\r\n\r\nimport {\r\n  geojsonToArcGIS as g2a,\r\n  arcgisToGeoJSON as a2g\r\n} from '@terraformer/arcgis';\r\n\r\nexport function geojsonToArcGIS (geojson, idAttr) {\r\n  return g2a(geojson, idAttr);\r\n}\r\n\r\nexport function arcgisToGeoJSON (arcgis, idAttr) {\r\n  return a2g(arcgis, idAttr);\r\n}\r\n\r\n// convert an extent (ArcGIS) to LatLngBounds (Leaflet)\r\nexport function extentToBounds (extent) {\r\n  // \"NaN\" coordinates from ArcGIS Server indicate a null geometry\r\n  if (extent.xmin !== 'NaN' && extent.ymin !== 'NaN' && extent.xmax !== 'NaN' && extent.ymax !== 'NaN') {\r\n    var sw = latLng(extent.ymin, extent.xmin);\r\n    var ne = latLng(extent.ymax, extent.xmax);\r\n    return latLngBounds(sw, ne);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n// convert an LatLngBounds (Leaflet) to extent (ArcGIS)\r\nexport function boundsToExtent (bounds) {\r\n  bounds = latLngBounds(bounds);\r\n  return {\r\n    'xmin': bounds.getSouthWest().lng,\r\n    'ymin': bounds.getSouthWest().lat,\r\n    'xmax': bounds.getNorthEast().lng,\r\n    'ymax': bounds.getNorthEast().lat,\r\n    'spatialReference': {\r\n      'wkid': 4326\r\n    }\r\n  };\r\n}\r\n\r\nvar knownFieldNames = /^(OBJECTID|FID|OID|ID)$/i;\r\n\r\n// Attempts to find the ID Field from response\r\nexport function _findIdAttributeFromResponse (response) {\r\n  var result;\r\n\r\n  if (response.objectIdFieldName) {\r\n    // Find Id Field directly\r\n    result = response.objectIdFieldName;\r\n  } else if (response.fields) {\r\n    // Find ID Field based on field type\r\n    for (var j = 0; j <= response.fields.length - 1; j++) {\r\n      if (response.fields[j].type === 'esriFieldTypeOID') {\r\n        result = response.fields[j].name;\r\n        break;\r\n      }\r\n    }\r\n    if (!result) {\r\n      // If no field was marked as being the esriFieldTypeOID try well known field names\r\n      for (j = 0; j <= response.fields.length - 1; j++) {\r\n        if (response.fields[j].name.match(knownFieldNames)) {\r\n          result = response.fields[j].name;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n// This is the 'last' resort, find the Id field from the specified feature\r\nexport function _findIdAttributeFromFeature (feature) {\r\n  for (var key in feature.attributes) {\r\n    if (key.match(knownFieldNames)) {\r\n      return key;\r\n    }\r\n  }\r\n}\r\n\r\nexport function responseToFeatureCollection (response, idAttribute) {\r\n  var objectIdField;\r\n  var features = response.features || response.results;\r\n  var count = features && features.length;\r\n\r\n  if (idAttribute) {\r\n    objectIdField = idAttribute;\r\n  } else {\r\n    objectIdField = _findIdAttributeFromResponse(response);\r\n  }\r\n\r\n  var featureCollection = {\r\n    type: 'FeatureCollection',\r\n    features: []\r\n  };\r\n\r\n  if (count) {\r\n    for (var i = features.length - 1; i >= 0; i--) {\r\n      var feature = arcgisToGeoJSON(features[i], objectIdField || _findIdAttributeFromFeature(features[i]));\r\n      featureCollection.features.push(feature);\r\n    }\r\n  }\r\n\r\n  return featureCollection;\r\n}\r\n\r\n  // trim url whitespace and add a trailing slash if needed\r\nexport function cleanUrl (url) {\r\n  // trim leading and trailing spaces, but not spaces inside the url\r\n  url = Util.trim(url);\r\n\r\n  // add a trailing slash to the url if the user omitted it\r\n  if (url[url.length - 1] !== '/') {\r\n    url += '/';\r\n  }\r\n\r\n  return url;\r\n}\r\n\r\n/* Extract url params if any and store them in requestParams attribute.\r\n   Return the options params updated */\r\nexport function getUrlParams (options) {\r\n  if (options.url.indexOf('?') !== -1) {\r\n    options.requestParams = options.requestParams || {};\r\n    var queryString = options.url.substring(options.url.indexOf('?') + 1);\r\n    options.url = options.url.split('?')[0];\r\n    options.requestParams = JSON.parse('{\"' + decodeURI(queryString).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\r\n  }\r\n  options.url = cleanUrl(options.url.split('?')[0]);\r\n  return options;\r\n}\r\n\r\nexport function isArcgisOnline (url) {\r\n  /* hosted feature services support geojson as an output format\r\n  utility.arcgis.com services are proxied from a variety of ArcGIS Server vintages, and may not */\r\n  return (/^(?!.*utility\\.arcgis\\.com).*\\.arcgis\\.com.*FeatureServer/i).test(url);\r\n}\r\n\r\nexport function geojsonTypeToArcGIS (geoJsonType) {\r\n  var arcgisGeometryType;\r\n  switch (geoJsonType) {\r\n    case 'Point':\r\n      arcgisGeometryType = 'esriGeometryPoint';\r\n      break;\r\n    case 'MultiPoint':\r\n      arcgisGeometryType = 'esriGeometryMultipoint';\r\n      break;\r\n    case 'LineString':\r\n      arcgisGeometryType = 'esriGeometryPolyline';\r\n      break;\r\n    case 'MultiLineString':\r\n      arcgisGeometryType = 'esriGeometryPolyline';\r\n      break;\r\n    case 'Polygon':\r\n      arcgisGeometryType = 'esriGeometryPolygon';\r\n      break;\r\n    case 'MultiPolygon':\r\n      arcgisGeometryType = 'esriGeometryPolygon';\r\n      break;\r\n  }\r\n\r\n  return arcgisGeometryType;\r\n}\r\n\r\nexport function calcAttributionWidth (map) {\r\n  // either crop at 55px or user defined buffer\r\n  return (map.getSize().x - options.attributionWidthOffset) + 'px';\r\n}\r\n\r\nexport function setEsriAttribution (map) {\r\n  if (map.attributionControl && !map.attributionControl._esriAttributionAdded) {\r\n    map.attributionControl.setPrefix('<a href=\"http://leafletjs.com\" title=\"A JS library for interactive maps\">Leaflet</a> | Powered by <a href=\"https://www.esri.com\">Esri</a>');\r\n\r\n    var hoverAttributionStyle = document.createElement('style');\r\n    hoverAttributionStyle.type = 'text/css';\r\n    hoverAttributionStyle.innerHTML = '.esri-truncated-attribution:hover {' +\r\n      'white-space: normal;' +\r\n    '}';\r\n\r\n    document.getElementsByTagName('head')[0].appendChild(hoverAttributionStyle);\r\n    DomUtil.addClass(map.attributionControl._container, 'esri-truncated-attribution:hover');\r\n\r\n    // define a new css class in JS to trim attribution into a single line\r\n    var attributionStyle = document.createElement('style');\r\n    attributionStyle.type = 'text/css';\r\n    attributionStyle.innerHTML = '.esri-truncated-attribution {' +\r\n      'vertical-align: -3px;' +\r\n      'white-space: nowrap;' +\r\n      'overflow: hidden;' +\r\n      'text-overflow: ellipsis;' +\r\n      'display: inline-block;' +\r\n      'transition: 0s white-space;' +\r\n      'transition-delay: 1s;' +\r\n      'max-width: ' + calcAttributionWidth(map) + ';' +\r\n    '}';\r\n\r\n    document.getElementsByTagName('head')[0].appendChild(attributionStyle);\r\n    DomUtil.addClass(map.attributionControl._container, 'esri-truncated-attribution');\r\n\r\n    // update the width used to truncate when the map itself is resized\r\n    map.on('resize', function (e) {\r\n      map.attributionControl._container.style.maxWidth = calcAttributionWidth(e.target);\r\n    });\r\n\r\n    map.attributionControl._esriAttributionAdded = true;\r\n  }\r\n}\r\n\r\nexport function _setGeometry (geometry) {\r\n  var params = {\r\n    geometry: null,\r\n    geometryType: null\r\n  };\r\n\r\n  // convert bounds to extent and finish\r\n  if (geometry instanceof LatLngBounds) {\r\n    // set geometry + geometryType\r\n    params.geometry = boundsToExtent(geometry);\r\n    params.geometryType = 'esriGeometryEnvelope';\r\n    return params;\r\n  }\r\n\r\n  // convert L.Marker > L.LatLng\r\n  if (geometry.getLatLng) {\r\n    geometry = geometry.getLatLng();\r\n  }\r\n\r\n  // convert L.LatLng to a geojson point and continue;\r\n  if (geometry instanceof LatLng) {\r\n    geometry = {\r\n      type: 'Point',\r\n      coordinates: [geometry.lng, geometry.lat]\r\n    };\r\n  }\r\n\r\n  // handle L.GeoJSON, pull out the first geometry\r\n  if (geometry instanceof GeoJSON) {\r\n    // reassign geometry to the GeoJSON value  (we are assuming that only one feature is present)\r\n    geometry = geometry.getLayers()[0].feature.geometry;\r\n    params.geometry = geojsonToArcGIS(geometry);\r\n    params.geometryType = geojsonTypeToArcGIS(geometry.type);\r\n  }\r\n\r\n  // Handle L.Polyline and L.Polygon\r\n  if (geometry.toGeoJSON) {\r\n    geometry = geometry.toGeoJSON();\r\n  }\r\n\r\n  // handle GeoJSON feature by pulling out the geometry\r\n  if (geometry.type === 'Feature') {\r\n    // get the geometry of the geojson feature\r\n    geometry = geometry.geometry;\r\n  }\r\n\r\n  // confirm that our GeoJSON is a point, line or polygon\r\n  if (geometry.type === 'Point' || geometry.type === 'LineString' || geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\r\n    params.geometry = geojsonToArcGIS(geometry);\r\n    params.geometryType = geojsonTypeToArcGIS(geometry.type);\r\n    return params;\r\n  }\r\n\r\n  // warn the user if we havn't found an appropriate object\r\n  warn('invalid geometry passed to spatial query. Should be L.LatLng, L.LatLngBounds, L.Marker or a GeoJSON Point, Line, Polygon or MultiPolygon object');\r\n\r\n  return;\r\n}\r\n\r\nexport function _getAttributionData (url, map) {\r\n  if (Support.cors) {\r\n    request(url, {}, Util.bind(function (error, attributions) {\r\n      if (error) { return; }\r\n      map._esriAttributions = [];\r\n      for (var c = 0; c < attributions.contributors.length; c++) {\r\n        var contributor = attributions.contributors[c];\r\n\r\n        for (var i = 0; i < contributor.coverageAreas.length; i++) {\r\n          var coverageArea = contributor.coverageAreas[i];\r\n          var southWest = latLng(coverageArea.bbox[0], coverageArea.bbox[1]);\r\n          var northEast = latLng(coverageArea.bbox[2], coverageArea.bbox[3]);\r\n          map._esriAttributions.push({\r\n            attribution: contributor.attribution,\r\n            score: coverageArea.score,\r\n            bounds: latLngBounds(southWest, northEast),\r\n            minZoom: coverageArea.zoomMin,\r\n            maxZoom: coverageArea.zoomMax\r\n          });\r\n        }\r\n      }\r\n\r\n      map._esriAttributions.sort(function (a, b) {\r\n        return b.score - a.score;\r\n      });\r\n\r\n      // pass the same argument as the map's 'moveend' event\r\n      var obj = { target: map };\r\n      _updateMapAttribution(obj);\r\n    }, this));\r\n  }\r\n}\r\n\r\nexport function _updateMapAttribution (evt) {\r\n  var map = evt.target;\r\n  var oldAttributions = map._esriAttributions;\r\n\r\n  if (!map || !map.attributionControl) return;\r\n\r\n  var attributionElement = map.attributionControl._container.querySelector('.esri-dynamic-attribution');\r\n\r\n  if (attributionElement && oldAttributions) {\r\n    var newAttributions = '';\r\n    var bounds = map.getBounds();\r\n    var wrappedBounds = latLngBounds(\r\n      bounds.getSouthWest().wrap(),\r\n      bounds.getNorthEast().wrap()\r\n    );\r\n    var zoom = map.getZoom();\r\n\r\n    for (var i = 0; i < oldAttributions.length; i++) {\r\n      var attribution = oldAttributions[i];\r\n      var text = attribution.attribution;\r\n\r\n      if (!newAttributions.match(text) && attribution.bounds.intersects(wrappedBounds) && zoom >= attribution.minZoom && zoom <= attribution.maxZoom) {\r\n        newAttributions += (', ' + text);\r\n      }\r\n    }\r\n\r\n    newAttributions = newAttributions.substr(2);\r\n    attributionElement.innerHTML = newAttributions;\r\n    attributionElement.style.maxWidth = calcAttributionWidth(map);\r\n\r\n    map.fire('attributionupdated', {\r\n      attribution: newAttributions\r\n    });\r\n  }\r\n}\r\n\r\n// for backwards compatibility\r\nexport { warn };\r\n\r\nexport var EsriUtil = {\r\n  warn: warn,\r\n  cleanUrl: cleanUrl,\r\n  getUrlParams: getUrlParams,\r\n  isArcgisOnline: isArcgisOnline,\r\n  geojsonTypeToArcGIS: geojsonTypeToArcGIS,\r\n  responseToFeatureCollection: responseToFeatureCollection,\r\n  geojsonToArcGIS: geojsonToArcGIS,\r\n  arcgisToGeoJSON: arcgisToGeoJSON,\r\n  boundsToExtent: boundsToExtent,\r\n  extentToBounds: extentToBounds,\r\n  calcAttributionWidth: calcAttributionWidth,\r\n  setEsriAttribution: setEsriAttribution,\r\n  _setGeometry: _setGeometry,\r\n  _getAttributionData: _getAttributionData,\r\n  _updateMapAttribution: _updateMapAttribution,\r\n  _findIdAttributeFromFeature: _findIdAttributeFromFeature,\r\n  _findIdAttributeFromResponse: _findIdAttributeFromResponse\r\n};\r\n\r\nexport default EsriUtil;\r\n"]},"metadata":{},"sourceType":"module"}