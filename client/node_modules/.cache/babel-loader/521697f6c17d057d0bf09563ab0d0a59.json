{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\n\nvar invariant = require(\"./invariant\");\n/**\r\n * Convert array-like objects to arrays.\r\n *\r\n * This API assumes the caller knows the contents of the data type. For less\r\n * well defined inputs use createArrayFromMixed.\r\n *\r\n * @param {object|function|filelist} obj\r\n * @return {array}\r\n */\n\n\nfunction toArray(obj) {\n  var length = obj.length; // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n  !(typeof length === 'number') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0; // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {// IE < 9 does not support Array#slice on collections objects\n    }\n  } // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n\n\n  var ret = Array(length);\n\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n\n  return ret;\n}\n/**\r\n * Perform a heuristic test to determine if an object is \"array-like\".\r\n *\r\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\r\n *   Joshu replied: \"Mu.\"\r\n *\r\n * This function determines if its argument has \"array nature\": it returns\r\n * true if the argument is an actual array, an `arguments' object, or an\r\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\r\n *\r\n * It will return false for other array-like objects like Filelist.\r\n *\r\n * @param {*} obj\r\n * @return {boolean}\r\n */\n\n\nfunction hasArrayNature(obj) {\n  return (// not null/false\n    !!obj && ( // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') && // quacks like an array\n    'length' in obj && // not window\n    !('setInterval' in obj) && // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && ( // a real array\n    Array.isArray(obj) || // arguments\n    'callee' in obj || // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n/**\r\n * Ensure that the argument is an array by wrapping it in an array if it is not.\r\n * Creates a copy of the argument if it is already an array.\r\n *\r\n * This is mostly useful idiomatically:\r\n *\r\n *   var createArrayFromMixed = require('createArrayFromMixed');\r\n *\r\n *   function takesOneOrMoreThings(things) {\r\n *     things = createArrayFromMixed(things);\r\n *     ...\r\n *   }\r\n *\r\n * This allows you to treat `things' as an array, but accept scalars in the API.\r\n *\r\n * If you need to convert an array-like object, like `arguments`, into an array\r\n * use toArray instead.\r\n *\r\n * @param {*} obj\r\n * @return {array}\r\n */\n\n\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/fbjs/lib/createArrayFromMixed.js"],"names":["invariant","require","toArray","obj","length","Array","isArray","process","env","NODE_ENV","callee","hasOwnProperty","prototype","slice","call","e","ret","ii","hasArrayNature","nodeType","createArrayFromMixed","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\r\nvar invariant = require(\"./invariant\");\r\n/**\r\n * Convert array-like objects to arrays.\r\n *\r\n * This API assumes the caller knows the contents of the data type. For less\r\n * well defined inputs use createArrayFromMixed.\r\n *\r\n * @param {object|function|filelist} obj\r\n * @return {array}\r\n */\r\n\r\n\r\nfunction toArray(obj) {\r\n  var length = obj.length; // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\r\n  // in old versions of Safari).\r\n\r\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\r\n  !(typeof length === 'number') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\r\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\r\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0; // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\r\n  // without method will throw during the slice call and skip straight to the\r\n  // fallback.\r\n\r\n  if (obj.hasOwnProperty) {\r\n    try {\r\n      return Array.prototype.slice.call(obj);\r\n    } catch (e) {// IE < 9 does not support Array#slice on collections objects\r\n    }\r\n  } // Fall back to copying key by key. This assumes all keys have a value,\r\n  // so will not preserve sparsely populated inputs.\r\n\r\n\r\n  var ret = Array(length);\r\n\r\n  for (var ii = 0; ii < length; ii++) {\r\n    ret[ii] = obj[ii];\r\n  }\r\n\r\n  return ret;\r\n}\r\n/**\r\n * Perform a heuristic test to determine if an object is \"array-like\".\r\n *\r\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\r\n *   Joshu replied: \"Mu.\"\r\n *\r\n * This function determines if its argument has \"array nature\": it returns\r\n * true if the argument is an actual array, an `arguments' object, or an\r\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\r\n *\r\n * It will return false for other array-like objects like Filelist.\r\n *\r\n * @param {*} obj\r\n * @return {boolean}\r\n */\r\n\r\n\r\nfunction hasArrayNature(obj) {\r\n  return (// not null/false\r\n    !!obj && ( // arrays are objects, NodeLists are functions in Safari\r\n    typeof obj == 'object' || typeof obj == 'function') && // quacks like an array\r\n    'length' in obj && // not window\r\n    !('setInterval' in obj) && // no DOM node should be considered an array-like\r\n    // a 'select' element has 'length' and 'item' properties on IE8\r\n    typeof obj.nodeType != 'number' && ( // a real array\r\n    Array.isArray(obj) || // arguments\r\n    'callee' in obj || // HTMLCollection/NodeList\r\n    'item' in obj)\r\n  );\r\n}\r\n/**\r\n * Ensure that the argument is an array by wrapping it in an array if it is not.\r\n * Creates a copy of the argument if it is already an array.\r\n *\r\n * This is mostly useful idiomatically:\r\n *\r\n *   var createArrayFromMixed = require('createArrayFromMixed');\r\n *\r\n *   function takesOneOrMoreThings(things) {\r\n *     things = createArrayFromMixed(things);\r\n *     ...\r\n *   }\r\n *\r\n * This allows you to treat `things' as an array, but accept scalars in the API.\r\n *\r\n * If you need to convert an array-like object, like `arguments`, into an array\r\n * use toArray instead.\r\n *\r\n * @param {*} obj\r\n * @return {array}\r\n */\r\n\r\n\r\nfunction createArrayFromMixed(obj) {\r\n  if (!hasArrayNature(obj)) {\r\n    return [obj];\r\n  } else if (Array.isArray(obj)) {\r\n    return obj.slice();\r\n  } else {\r\n    return toArray(obj);\r\n  }\r\n}\r\n\r\nmodule.exports = createArrayFromMixed;"]},"metadata":{},"sourceType":"script"}