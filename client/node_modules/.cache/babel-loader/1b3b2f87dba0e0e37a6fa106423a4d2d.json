{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\Messenger\\\\EditorEmoji.jsx\";\nimport React, { Component } from \"react\";\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport style from 'styled-components';\nimport { convertToRaw, getDefaultKeyBinding, KeyBindingUtil, ContentState, EditorState } from \"draft-js\";\nconst emojiPlugin = createEmojiPlugin({\n  useNativeArt: true\n});\nconst {\n  EmojiSuggestions,\n  EmojiSelect\n} = emojiPlugin;\nconst plugins = [emojiPlugin];\nconst text = ``;\nconst StyleEditor = style.div`\n  width: 720px;\n  max-height: 55px;\n  overflow-y: auto;\n  margin-left: 10px;\n  font-size: 14px;\n`;\nexport default class CustomEmojiEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: createEditorStateWithText(text)\n    };\n\n    this.onChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n\n    this.onFocus = () => {\n      this.props.isTypingMess();\n    };\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n\n  componentDidMount() {\n    var selectionState = this.state.editorState.getSelection();\n    var getHasFocus = selectionState.getHasFocus();\n    console.log(getHasFocus);\n\n    if (this.props.showModalCreatePost) {\n      this.editor.focus();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.statusCreatePost !== this.props.statusCreatePost) {\n      if (nextProps.statusCreatePost === 'success' || nextProps.statusCreatePost === 'error') {\n        const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\n        this.setState({\n          editorState\n        });\n      }\n    }\n  }\n\n  keyBindingFn(e) {\n    if (e.keyCode === 13) {\n      return 'submit-mess';\n    }\n\n    return getDefaultKeyBinding(e);\n  }\n\n  handleKeyCommand(command) {\n    if (command === 'submit-mess') {\n      const value = this.state.editorState.getCurrentContent().getPlainText();\n      const content = this.state.editorState.getCurrentContent();\n      const isEditorEmpty = !content.hasText();\n      const lengthOfTrimmedContent = value.trim().length;\n      const isContainOnlySpaces = !isEditorEmpty && !lengthOfTrimmedContent;\n\n      if (value && !isContainOnlySpaces) {\n        this.props.onSubmitMess(value);\n        const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\n        this.setState({\n          editorState\n        });\n      }\n\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StyleEditor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      keyBindingFn: this.keyBindingFn,\n      handleKeyCommand: this.handleKeyCommand,\n      editorState: this.state.editorState,\n      onChange: this.onChange,\n      onFocus: this.onFocus,\n      plugins: plugins,\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn...\",\n      ref: element => {\n        this.editor = element;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(EmojiSuggestions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"emoij-mess\",\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EmojiSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/Messenger/EditorEmoji.jsx"],"names":["React","Component","Editor","createEditorStateWithText","createEmojiPlugin","style","convertToRaw","getDefaultKeyBinding","KeyBindingUtil","ContentState","EditorState","emojiPlugin","useNativeArt","EmojiSuggestions","EmojiSelect","plugins","text","StyleEditor","div","CustomEmojiEditor","constructor","props","state","editorState","onChange","setState","onFocus","isTypingMess","handleKeyCommand","bind","componentDidMount","selectionState","getSelection","getHasFocus","console","log","showModalCreatePost","editor","focus","componentWillReceiveProps","nextProps","statusCreatePost","push","createFromText","keyBindingFn","e","keyCode","command","value","getCurrentContent","getPlainText","content","isEditorEmpty","hasText","lengthOfTrimmedContent","trim","length","isContainOnlySpaces","onSubmitMess","render","display","alignItems","element","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\r\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\r\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\r\nimport style from 'styled-components';\r\nimport {convertToRaw, getDefaultKeyBinding, KeyBindingUtil, ContentState, EditorState} from \"draft-js\";\r\n\r\nconst emojiPlugin = createEmojiPlugin({\r\n  useNativeArt: true\r\n});\r\nconst { EmojiSuggestions, EmojiSelect } = emojiPlugin;\r\nconst plugins = [emojiPlugin];\r\nconst text = ``;\r\n\r\nconst StyleEditor = style.div`\r\n  width: 720px;\r\n  max-height: 55px;\r\n  overflow-y: auto;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n`;\r\nexport default class CustomEmojiEditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\r\n  }\r\n    state = {\r\n      editorState: createEditorStateWithText(text)\r\n    };\r\n\r\n  componentDidMount(){\r\n    var selectionState = this.state.editorState.getSelection();\r\n    var getHasFocus = selectionState.getHasFocus();\r\n\r\n    console.log(getHasFocus);\r\n    if(this.props.showModalCreatePost){\r\n      this.editor.focus();\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.statusCreatePost !== this.props.statusCreatePost){\r\n      if(nextProps.statusCreatePost === 'success' || nextProps.statusCreatePost === 'error'){\r\n        const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\r\n        this.setState({ editorState });\r\n      }\r\n    }\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  };\r\n\r\n  onFocus = () => {\r\n    this.props.isTypingMess()\r\n  }\r\n\r\n  keyBindingFn(e){\r\n    if (e.keyCode === 13) {\r\n      return 'submit-mess'\r\n    }\r\n\r\n    return getDefaultKeyBinding(e)\r\n  }\r\n\r\n  handleKeyCommand(command){\r\n    if (command === 'submit-mess') {\r\n      const value = this.state.editorState.getCurrentContent().getPlainText();\r\n      const content = this.state.editorState.getCurrentContent();\r\n      const isEditorEmpty = !content.hasText();\r\n      const lengthOfTrimmedContent = value.trim().length;\r\n      const isContainOnlySpaces = !isEditorEmpty && !lengthOfTrimmedContent;\r\n\r\n      if(value && !isContainOnlySpaces) {\r\n        this.props.onSubmitMess(value)\r\n        const editorState = EditorState.push(this.state.editorState, ContentState.createFromText(''));\r\n        this.setState({ editorState });\r\n      }\r\n      return 'handled'\r\n    }\r\n\r\n    return 'not-handled'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{display: 'flex',alignItems: 'center'}}>\r\n        <StyleEditor>\r\n          <Editor\r\n            keyBindingFn={this.keyBindingFn}\r\n            handleKeyCommand={this.handleKeyCommand}\r\n            editorState={this.state.editorState}\r\n            onChange={this.onChange}\r\n            onFocus={this.onFocus}\r\n            plugins={plugins}\r\n            placeholder=\"Nhập tin nhắn...\"\r\n            ref={(element) => {\r\n              this.editor = element;\r\n            }}\r\n          />\r\n        </StyleEditor>\r\n        <EmojiSuggestions />\r\n        <div className=\"emoij-mess\" style={{textAlign: 'right'}}>\r\n          <EmojiSelect />\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}