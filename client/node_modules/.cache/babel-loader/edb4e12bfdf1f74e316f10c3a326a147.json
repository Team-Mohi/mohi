{"ast":null,"code":"// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\r\n * Conenience method returns corresponding value for given keyName or keyCode.\r\n *\r\n * @param {Mixed} keyCode {Number} or keyName {String}\r\n * @return {Mixed}\r\n * @api public\r\n */\nfunction keyCode(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;\n    if (hasKeyCode) searchInput = hasKeyCode;\n  } // Numbers\n\n\n  if ('number' === typeof searchInput) return names[searchInput]; // Everything else (cast to string)\n\n  var search = String(searchInput); // check codes\n\n  var foundNamedKey = codes[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey; // check aliases\n\n  var foundNamedKey = aliases[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey; // weird character?\n\n  if (search.length === 1) return search.charCodeAt(0);\n  return undefined;\n}\n/**\r\n * Compares a keyboard event with a given keyCode or keyName.\r\n *\r\n * @param {Event} event Keyboard event that should be tested\r\n * @param {Mixed} keyCode {Number} or keyName {String}\r\n * @return {Boolean}\r\n * @api public\r\n */\n\n\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\n  if (event && 'object' === typeof event) {\n    var keyCode = event.which || event.keyCode || event.charCode;\n\n    if (keyCode === null || keyCode === undefined) {\n      return false;\n    }\n\n    if (typeof nameOrCode === 'string') {\n      // check codes\n      var foundNamedKey = codes[nameOrCode.toLowerCase()];\n\n      if (foundNamedKey) {\n        return foundNamedKey === keyCode;\n      } // check aliases\n\n\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()];\n\n      if (foundNamedKey) {\n        return foundNamedKey === keyCode;\n      }\n    } else if (typeof nameOrCode === 'number') {\n      return nameOrCode === keyCode;\n    }\n\n    return false;\n  }\n};\n\nexports = module.exports = keyCode;\n/**\r\n * Get by name\r\n *\r\n *   exports.code['enter'] // => 13\r\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'left command': 91,\n  'right command': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222\n}; // Helper aliases\n\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'spacebar': 32,\n  'pgup': 33,\n  'pgdn': 34,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n};\n/*!\r\n * Programatically add the following\r\n */\n// lower case chars\n\nfor (i = 97; i < 123; i++) {\n  codes[String.fromCharCode(i)] = i - 32;\n} // numbers\n\n\nfor (var i = 48; i < 58; i++) {\n  codes[i - 48] = i;\n} // function keys\n\n\nfor (i = 1; i < 13; i++) {\n  codes['f' + i] = i + 111;\n} // numpad keys\n\n\nfor (i = 0; i < 10; i++) {\n  codes['numpad ' + i] = i + 96;\n}\n/**\r\n * Get by code\r\n *\r\n *   exports.name[13] // => 'Enter'\r\n */\n\n\nvar names = exports.names = exports.title = {}; // title for backward compat\n// Create reverse mapping\n\nfor (i in codes) {\n  names[codes[i]] = i;\n} // Add aliases\n\n\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias];\n}","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/keycode/index.js"],"names":["keyCode","searchInput","hasKeyCode","which","charCode","names","search","String","foundNamedKey","codes","toLowerCase","aliases","length","charCodeAt","undefined","isEventKey","event","nameOrCode","exports","module","code","i","fromCharCode","title","alias"],"mappings":"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","sourcesContent":["// Source: http://jsfiddle.net/vWx8V/\r\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\r\n\r\n/**\r\n * Conenience method returns corresponding value for given keyName or keyCode.\r\n *\r\n * @param {Mixed} keyCode {Number} or keyName {String}\r\n * @return {Mixed}\r\n * @api public\r\n */\r\n\r\nfunction keyCode(searchInput) {\r\n  // Keyboard Events\r\n  if (searchInput && 'object' === typeof searchInput) {\r\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode\r\n    if (hasKeyCode) searchInput = hasKeyCode\r\n  }\r\n\r\n  // Numbers\r\n  if ('number' === typeof searchInput) return names[searchInput]\r\n\r\n  // Everything else (cast to string)\r\n  var search = String(searchInput)\r\n\r\n  // check codes\r\n  var foundNamedKey = codes[search.toLowerCase()]\r\n  if (foundNamedKey) return foundNamedKey\r\n\r\n  // check aliases\r\n  var foundNamedKey = aliases[search.toLowerCase()]\r\n  if (foundNamedKey) return foundNamedKey\r\n\r\n  // weird character?\r\n  if (search.length === 1) return search.charCodeAt(0)\r\n\r\n  return undefined\r\n}\r\n\r\n/**\r\n * Compares a keyboard event with a given keyCode or keyName.\r\n *\r\n * @param {Event} event Keyboard event that should be tested\r\n * @param {Mixed} keyCode {Number} or keyName {String}\r\n * @return {Boolean}\r\n * @api public\r\n */\r\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\r\n  if (event && 'object' === typeof event) {\r\n    var keyCode = event.which || event.keyCode || event.charCode\r\n    if (keyCode === null || keyCode === undefined) { return false; }\r\n    if (typeof nameOrCode === 'string') {\r\n      // check codes\r\n      var foundNamedKey = codes[nameOrCode.toLowerCase()]\r\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\r\n    \r\n      // check aliases\r\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()]\r\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\r\n    } else if (typeof nameOrCode === 'number') {\r\n      return nameOrCode === keyCode;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexports = module.exports = keyCode;\r\n\r\n/**\r\n * Get by name\r\n *\r\n *   exports.code['enter'] // => 13\r\n */\r\n\r\nvar codes = exports.code = exports.codes = {\r\n  'backspace': 8,\r\n  'tab': 9,\r\n  'enter': 13,\r\n  'shift': 16,\r\n  'ctrl': 17,\r\n  'alt': 18,\r\n  'pause/break': 19,\r\n  'caps lock': 20,\r\n  'esc': 27,\r\n  'space': 32,\r\n  'page up': 33,\r\n  'page down': 34,\r\n  'end': 35,\r\n  'home': 36,\r\n  'left': 37,\r\n  'up': 38,\r\n  'right': 39,\r\n  'down': 40,\r\n  'insert': 45,\r\n  'delete': 46,\r\n  'command': 91,\r\n  'left command': 91,\r\n  'right command': 93,\r\n  'numpad *': 106,\r\n  'numpad +': 107,\r\n  'numpad -': 109,\r\n  'numpad .': 110,\r\n  'numpad /': 111,\r\n  'num lock': 144,\r\n  'scroll lock': 145,\r\n  'my computer': 182,\r\n  'my calculator': 183,\r\n  ';': 186,\r\n  '=': 187,\r\n  ',': 188,\r\n  '-': 189,\r\n  '.': 190,\r\n  '/': 191,\r\n  '`': 192,\r\n  '[': 219,\r\n  '\\\\': 220,\r\n  ']': 221,\r\n  \"'\": 222\r\n}\r\n\r\n// Helper aliases\r\n\r\nvar aliases = exports.aliases = {\r\n  'windows': 91,\r\n  '⇧': 16,\r\n  '⌥': 18,\r\n  '⌃': 17,\r\n  '⌘': 91,\r\n  'ctl': 17,\r\n  'control': 17,\r\n  'option': 18,\r\n  'pause': 19,\r\n  'break': 19,\r\n  'caps': 20,\r\n  'return': 13,\r\n  'escape': 27,\r\n  'spc': 32,\r\n  'spacebar': 32,\r\n  'pgup': 33,\r\n  'pgdn': 34,\r\n  'ins': 45,\r\n  'del': 46,\r\n  'cmd': 91\r\n}\r\n\r\n/*!\r\n * Programatically add the following\r\n */\r\n\r\n// lower case chars\r\nfor (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32\r\n\r\n// numbers\r\nfor (var i = 48; i < 58; i++) codes[i - 48] = i\r\n\r\n// function keys\r\nfor (i = 1; i < 13; i++) codes['f'+i] = i + 111\r\n\r\n// numpad keys\r\nfor (i = 0; i < 10; i++) codes['numpad '+i] = i + 96\r\n\r\n/**\r\n * Get by code\r\n *\r\n *   exports.name[13] // => 'Enter'\r\n */\r\n\r\nvar names = exports.names = exports.title = {} // title for backward compat\r\n\r\n// Create reverse mapping\r\nfor (i in codes) names[codes[i]] = i\r\n\r\n// Add aliases\r\nfor (var alias in aliases) {\r\n  codes[alias] = aliases[alias]\r\n}\r\n"]},"metadata":{},"sourceType":"script"}