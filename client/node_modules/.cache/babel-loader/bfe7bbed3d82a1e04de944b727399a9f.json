{"ast":null,"code":"import { latLng } from 'leaflet';\nimport { Identify } from './Identify';\nimport { responseToFeatureCollection } from '../Util';\nexport var IdentifyImage = Identify.extend({\n  setters: {\n    'setMosaicRule': 'mosaicRule',\n    'setRenderingRule': 'renderingRule',\n    'setPixelSize': 'pixelSize',\n    'returnCatalogItems': 'returnCatalogItems',\n    'returnGeometry': 'returnGeometry'\n  },\n  params: {\n    returnGeometry: false\n  },\n  at: function (latlng) {\n    latlng = latLng(latlng);\n    this.params.geometry = JSON.stringify({\n      x: latlng.lng,\n      y: latlng.lat,\n      spatialReference: {\n        wkid: 4326\n      }\n    });\n    this.params.geometryType = 'esriGeometryPoint';\n    return this;\n  },\n  getMosaicRule: function () {\n    return this.params.mosaicRule;\n  },\n  getRenderingRule: function () {\n    return this.params.renderingRule;\n  },\n  getPixelSize: function () {\n    return this.params.pixelSize;\n  },\n  run: function (callback, context) {\n    return this.request(function (error, response) {\n      callback.call(context, error, response && this._responseToGeoJSON(response), response);\n    }, this);\n  },\n  // get pixel data and return as geoJSON point\n  // populate catalog items (if any)\n  // merging in any catalogItemVisibilities as a propery of each feature\n  _responseToGeoJSON: function (response) {\n    var location = response.location;\n    var catalogItems = response.catalogItems;\n    var catalogItemVisibilities = response.catalogItemVisibilities;\n    var geoJSON = {\n      'pixel': {\n        'type': 'Feature',\n        'geometry': {\n          'type': 'Point',\n          'coordinates': [location.x, location.y]\n        },\n        'crs': {\n          'type': 'EPSG',\n          'properties': {\n            'code': location.spatialReference.wkid\n          }\n        },\n        'properties': {\n          'OBJECTID': response.objectId,\n          'name': response.name,\n          'value': response.value\n        },\n        'id': response.objectId\n      }\n    };\n\n    if (response.properties && response.properties.Values) {\n      geoJSON.pixel.properties.values = response.properties.Values;\n    }\n\n    if (catalogItems && catalogItems.features) {\n      geoJSON.catalogItems = responseToFeatureCollection(catalogItems);\n\n      if (catalogItemVisibilities && catalogItemVisibilities.length === geoJSON.catalogItems.features.length) {\n        for (var i = catalogItemVisibilities.length - 1; i >= 0; i--) {\n          geoJSON.catalogItems.features[i].properties.catalogItemVisibility = catalogItemVisibilities[i];\n        }\n      }\n    }\n\n    return geoJSON;\n  }\n});\nexport function identifyImage(params) {\n  return new IdentifyImage(params);\n}\nexport default identifyImage;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/esri-leaflet/src/Tasks/IdentifyImage.js"],"names":["latLng","Identify","responseToFeatureCollection","IdentifyImage","extend","setters","params","returnGeometry","at","latlng","geometry","JSON","stringify","x","lng","y","lat","spatialReference","wkid","geometryType","getMosaicRule","mosaicRule","getRenderingRule","renderingRule","getPixelSize","pixelSize","run","callback","context","request","error","response","call","_responseToGeoJSON","location","catalogItems","catalogItemVisibilities","geoJSON","objectId","name","value","properties","Values","pixel","values","features","length","i","catalogItemVisibility","identifyImage"],"mappings":"AAAA,SAASA,MAAT,QAAuB,SAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,2BAAT,QAA4C,SAA5C;AAEA,OAAO,IAAIC,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAgB;AACzCC,EAAAA,OAAO,EAAE;AACP,qBAAiB,YADV;AAEP,wBAAoB,eAFb;AAGP,oBAAgB,WAHT;AAIP,0BAAsB,oBAJf;AAKP,sBAAkB;AALX,GADgC;AASzCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,cAAc,EAAE;AADV,GATiC;AAazCC,EAAAA,EAAE,EAAE,UAAUC,MAAV,EAAkB;AACpBA,IAAAA,MAAM,GAAGT,MAAM,CAACS,MAAD,CAAf;AACA,SAAKH,MAAL,CAAYI,QAAZ,GAAuBC,IAAI,CAACC,SAAL,CAAe;AACpCC,MAAAA,CAAC,EAAEJ,MAAM,CAACK,GAD0B;AAEpCC,MAAAA,CAAC,EAAEN,MAAM,CAACO,GAF0B;AAGpCC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,IAAI,EAAE;AADU;AAHkB,KAAf,CAAvB;AAOA,SAAKZ,MAAL,CAAYa,YAAZ,GAA2B,mBAA3B;AACA,WAAO,IAAP;AACD,GAxBwC;AA0BzCC,EAAAA,aAAa,EAAE,YAAY;AACzB,WAAO,KAAKd,MAAL,CAAYe,UAAnB;AACD,GA5BwC;AA8BzCC,EAAAA,gBAAgB,EAAE,YAAY;AAC5B,WAAO,KAAKhB,MAAL,CAAYiB,aAAnB;AACD,GAhCwC;AAkCzCC,EAAAA,YAAY,EAAE,YAAY;AACxB,WAAO,KAAKlB,MAAL,CAAYmB,SAAnB;AACD,GApCwC;AAsCzCC,EAAAA,GAAG,EAAE,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AAChC,WAAO,KAAKC,OAAL,CAAa,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC7CJ,MAAAA,QAAQ,CAACK,IAAT,CAAcJ,OAAd,EAAuBE,KAAvB,EAA+BC,QAAQ,IAAI,KAAKE,kBAAL,CAAwBF,QAAxB,CAA3C,EAA+EA,QAA/E;AACD,KAFM,EAEJ,IAFI,CAAP;AAGD,GA1CwC;AA4CzC;AACA;AACA;AACAE,EAAAA,kBAAkB,EAAE,UAAUF,QAAV,EAAoB;AACtC,QAAIG,QAAQ,GAAGH,QAAQ,CAACG,QAAxB;AACA,QAAIC,YAAY,GAAGJ,QAAQ,CAACI,YAA5B;AACA,QAAIC,uBAAuB,GAAGL,QAAQ,CAACK,uBAAvC;AACA,QAAIC,OAAO,GAAG;AACZ,eAAS;AACP,gBAAQ,SADD;AAEP,oBAAY;AACV,kBAAQ,OADE;AAEV,yBAAe,CAACH,QAAQ,CAACrB,CAAV,EAAaqB,QAAQ,CAACnB,CAAtB;AAFL,SAFL;AAMP,eAAO;AACL,kBAAQ,MADH;AAEL,wBAAc;AACZ,oBAAQmB,QAAQ,CAACjB,gBAAT,CAA0BC;AADtB;AAFT,SANA;AAYP,sBAAc;AACZ,sBAAYa,QAAQ,CAACO,QADT;AAEZ,kBAAQP,QAAQ,CAACQ,IAFL;AAGZ,mBAASR,QAAQ,CAACS;AAHN,SAZP;AAiBP,cAAMT,QAAQ,CAACO;AAjBR;AADG,KAAd;;AAsBA,QAAIP,QAAQ,CAACU,UAAT,IAAuBV,QAAQ,CAACU,UAAT,CAAoBC,MAA/C,EAAuD;AACrDL,MAAAA,OAAO,CAACM,KAAR,CAAcF,UAAd,CAAyBG,MAAzB,GAAkCb,QAAQ,CAACU,UAAT,CAAoBC,MAAtD;AACD;;AAED,QAAIP,YAAY,IAAIA,YAAY,CAACU,QAAjC,EAA2C;AACzCR,MAAAA,OAAO,CAACF,YAAR,GAAuBjC,2BAA2B,CAACiC,YAAD,CAAlD;;AACA,UAAIC,uBAAuB,IAAIA,uBAAuB,CAACU,MAAxB,KAAmCT,OAAO,CAACF,YAAR,CAAqBU,QAArB,CAA8BC,MAAhG,EAAwG;AACtG,aAAK,IAAIC,CAAC,GAAGX,uBAAuB,CAACU,MAAxB,GAAiC,CAA9C,EAAiDC,CAAC,IAAI,CAAtD,EAAyDA,CAAC,EAA1D,EAA8D;AAC5DV,UAAAA,OAAO,CAACF,YAAR,CAAqBU,QAArB,CAA8BE,CAA9B,EAAiCN,UAAjC,CAA4CO,qBAA5C,GAAoEZ,uBAAuB,CAACW,CAAD,CAA3F;AACD;AACF;AACF;;AACD,WAAOV,OAAP;AACD;AAtFwC,CAAhB,CAApB;AA0FP,OAAO,SAASY,aAAT,CAAwB3C,MAAxB,EAAgC;AACrC,SAAO,IAAIH,aAAJ,CAAkBG,MAAlB,CAAP;AACD;AAED,eAAe2C,aAAf","sourcesContent":["import { latLng } from 'leaflet';\r\nimport { Identify } from './Identify';\r\nimport { responseToFeatureCollection } from '../Util';\r\n\r\nexport var IdentifyImage = Identify.extend({\r\n  setters: {\r\n    'setMosaicRule': 'mosaicRule',\r\n    'setRenderingRule': 'renderingRule',\r\n    'setPixelSize': 'pixelSize',\r\n    'returnCatalogItems': 'returnCatalogItems',\r\n    'returnGeometry': 'returnGeometry'\r\n  },\r\n\r\n  params: {\r\n    returnGeometry: false\r\n  },\r\n\r\n  at: function (latlng) {\r\n    latlng = latLng(latlng);\r\n    this.params.geometry = JSON.stringify({\r\n      x: latlng.lng,\r\n      y: latlng.lat,\r\n      spatialReference: {\r\n        wkid: 4326\r\n      }\r\n    });\r\n    this.params.geometryType = 'esriGeometryPoint';\r\n    return this;\r\n  },\r\n\r\n  getMosaicRule: function () {\r\n    return this.params.mosaicRule;\r\n  },\r\n\r\n  getRenderingRule: function () {\r\n    return this.params.renderingRule;\r\n  },\r\n\r\n  getPixelSize: function () {\r\n    return this.params.pixelSize;\r\n  },\r\n\r\n  run: function (callback, context) {\r\n    return this.request(function (error, response) {\r\n      callback.call(context, error, (response && this._responseToGeoJSON(response)), response);\r\n    }, this);\r\n  },\r\n\r\n  // get pixel data and return as geoJSON point\r\n  // populate catalog items (if any)\r\n  // merging in any catalogItemVisibilities as a propery of each feature\r\n  _responseToGeoJSON: function (response) {\r\n    var location = response.location;\r\n    var catalogItems = response.catalogItems;\r\n    var catalogItemVisibilities = response.catalogItemVisibilities;\r\n    var geoJSON = {\r\n      'pixel': {\r\n        'type': 'Feature',\r\n        'geometry': {\r\n          'type': 'Point',\r\n          'coordinates': [location.x, location.y]\r\n        },\r\n        'crs': {\r\n          'type': 'EPSG',\r\n          'properties': {\r\n            'code': location.spatialReference.wkid\r\n          }\r\n        },\r\n        'properties': {\r\n          'OBJECTID': response.objectId,\r\n          'name': response.name,\r\n          'value': response.value\r\n        },\r\n        'id': response.objectId\r\n      }\r\n    };\r\n\r\n    if (response.properties && response.properties.Values) {\r\n      geoJSON.pixel.properties.values = response.properties.Values;\r\n    }\r\n\r\n    if (catalogItems && catalogItems.features) {\r\n      geoJSON.catalogItems = responseToFeatureCollection(catalogItems);\r\n      if (catalogItemVisibilities && catalogItemVisibilities.length === geoJSON.catalogItems.features.length) {\r\n        for (var i = catalogItemVisibilities.length - 1; i >= 0; i--) {\r\n          geoJSON.catalogItems.features[i].properties.catalogItemVisibility = catalogItemVisibilities[i];\r\n        }\r\n      }\r\n    }\r\n    return geoJSON;\r\n  }\r\n\r\n});\r\n\r\nexport function identifyImage (params) {\r\n  return new IdentifyImage(params);\r\n}\r\n\r\nexport default identifyImage;\r\n"]},"metadata":{},"sourceType":"module"}