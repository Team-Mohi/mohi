{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar Immutable = require(\"immutable\");\n\nvar Map = Immutable.Map;\n\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\n  var startKey = selectionState.getStartKey();\n  var endKey = selectionState.getEndKey();\n  var blockMap = contentState.getBlockMap();\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = modifyBlockForContentState;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/draft-js/lib/modifyBlockForContentState.js"],"names":["Immutable","require","Map","modifyBlockForContentState","contentState","selectionState","operation","startKey","getStartKey","endKey","getEndKey","blockMap","getBlockMap","newBlocks","toSeq","skipUntil","_","k","takeUntil","concat","get","map","merge","selectionBefore","selectionAfter","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,GAAG,GAAGF,SAAS,CAACE,GAApB;;AAEA,SAASC,0BAAT,CAAoCC,YAApC,EAAkDC,cAAlD,EAAkEC,SAAlE,EAA6E;AAC3E,MAAIC,QAAQ,GAAGF,cAAc,CAACG,WAAf,EAAf;AACA,MAAIC,MAAM,GAAGJ,cAAc,CAACK,SAAf,EAAb;AACA,MAAIC,QAAQ,GAAGP,YAAY,CAACQ,WAAb,EAAf;AACA,MAAIC,SAAS,GAAGF,QAAQ,CAACG,KAAT,GAAiBC,SAAjB,CAA2B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACzD,WAAOA,CAAC,KAAKV,QAAb;AACD,GAFe,EAEbW,SAFa,CAEH,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AAC3B,WAAOA,CAAC,KAAKR,MAAb;AACD,GAJe,EAIbU,MAJa,CAINjB,GAAG,CAAC,CAAC,CAACO,MAAD,EAASE,QAAQ,CAACS,GAAT,CAAaX,MAAb,CAAT,CAAD,CAAD,CAJG,EAIiCY,GAJjC,CAIqCf,SAJrC,CAAhB;AAKA,SAAOF,YAAY,CAACkB,KAAb,CAAmB;AACxBX,IAAAA,QAAQ,EAAEA,QAAQ,CAACW,KAAT,CAAeT,SAAf,CADc;AAExBU,IAAAA,eAAe,EAAElB,cAFO;AAGxBmB,IAAAA,cAAc,EAAEnB;AAHQ,GAAnB,CAAP;AAKD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBvB,0BAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar Immutable = require(\"immutable\");\r\n\r\nvar Map = Immutable.Map;\r\n\r\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\r\n  var startKey = selectionState.getStartKey();\r\n  var endKey = selectionState.getEndKey();\r\n  var blockMap = contentState.getBlockMap();\r\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\r\n    return k === startKey;\r\n  }).takeUntil(function (_, k) {\r\n    return k === endKey;\r\n  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);\r\n  return contentState.merge({\r\n    blockMap: blockMap.merge(newBlocks),\r\n    selectionBefore: selectionState,\r\n    selectionAfter: selectionState\r\n  });\r\n}\r\n\r\nmodule.exports = modifyBlockForContentState;"]},"metadata":{},"sourceType":"script"}