{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Containers\\\\NewFeedContainer.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport NewFeed from './../Components/NewFeed/Newfeed.jsx';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPosts } from './../Actions/index.jsx';\nimport { responsePosts } from './../Actions/index.jsx';\nimport { fetchMorePosts } from './../Actions/index.jsx';\nimport { responseMorePosts } from './../Actions/index.jsx';\n\nfunction NewFeedContainer({\n  posts\n}) {\n  const {\n    currentPage\n  } = useSelector(state => state.posts);\n  const pageDefault = 1;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchPosts());\n    getPostNewFeedFirst();\n  }, []);\n  useEffect(() => {\n    if (currentPage > 1) {\n      dispatch(fetchMorePosts());\n      getPostNewFeedInfinite();\n    }\n  }, [currentPage]);\n\n  const getPostNewFeedFirst = () => {\n    axios({\n      method: 'GET',\n      url: \"/api/auth/get-post-home\",\n      params: {\n        page: pageDefault\n      }\n    }).then(res => {\n      dispatch(responsePosts(res.data));\n    }).catch(e => {\n      if (axios.isCancel(e)) return;\n    });\n  };\n\n  const getPostNewFeedInfinite = () => {\n    axios({\n      method: 'GET',\n      url: \"/api/auth/get-post-home\",\n      params: {\n        page: currentPage\n      }\n    }).then(res => {\n      dispatch(responseMorePosts(res.data));\n    }).catch(e => {\n      if (axios.isCancel(e)) return;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(NewFeed, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default NewFeedContainer;","map":{"version":3,"sources":["D:/Web/mohi/client/src/Containers/NewFeedContainer.jsx"],"names":["React","useEffect","useState","NewFeed","axios","useSelector","useDispatch","fetchPosts","responsePosts","fetchMorePosts","responseMorePosts","NewFeedContainer","posts","currentPage","state","pageDefault","dispatch","getPostNewFeedFirst","getPostNewFeedInfinite","method","url","params","page","then","res","data","catch","e","isCancel"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;;AAEA,SAASC,gBAAT,CAA0B;AAACC,EAAAA;AAAD,CAA1B,EAAkC;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAkBR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACF,KAAhB,CAAnC;AACA,QAAMG,WAAW,GAAG,CAApB;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACAU,IAAAA,mBAAmB;AACpB,GAHQ,EAGN,EAHM,CAAT;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGY,WAAW,GAAG,CAAjB,EAAmB;AACjBG,MAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACAS,MAAAA,sBAAsB;AACvB;AACF,GALQ,EAKN,CAACL,WAAD,CALM,CAAT;;AAOA,QAAMI,mBAAmB,GAAG,MAAM;AAC5Bb,IAAAA,KAAK,CAAC;AACJe,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE,yBAFD;AAGJC,MAAAA,MAAM,EAAE;AAACC,QAAAA,IAAI,EAAGP;AAAR;AAHJ,KAAD,CAAL,CAKCQ,IALD,CAKMC,GAAG,IAAG;AACVR,MAAAA,QAAQ,CAACR,aAAa,CAACgB,GAAG,CAACC,IAAL,CAAd,CAAR;AACD,KAPD,EAQCC,KARD,CAQOC,CAAC,IAAI;AACV,UAAGvB,KAAK,CAACwB,QAAN,CAAeD,CAAf,CAAH,EAAsB;AACvB,KAVD;AAWL,GAZD;;AAcA,QAAMT,sBAAsB,GAAG,MAAM;AAC/Bd,IAAAA,KAAK,CAAC;AACJe,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE,yBAFD;AAGJC,MAAAA,MAAM,EAAE;AAACC,QAAAA,IAAI,EAAGT;AAAR;AAHJ,KAAD,CAAL,CAKCU,IALD,CAKMC,GAAG,IAAG;AACVR,MAAAA,QAAQ,CAACN,iBAAiB,CAACc,GAAG,CAACC,IAAL,CAAlB,CAAR;AACD,KAPD,EAQCC,KARD,CAQOC,CAAC,IAAI;AACV,UAAGvB,KAAK,CAACwB,QAAN,CAAeD,CAAf,CAAH,EAAsB;AACvB,KAVD;AAWL,GAZD;;AAcA,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;AACD,eAAehB,gBAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport NewFeed from './../Components/NewFeed/Newfeed.jsx';\r\nimport axios from 'axios';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { fetchPosts } from './../Actions/index.jsx';\r\nimport { responsePosts } from './../Actions/index.jsx';\r\nimport { fetchMorePosts } from './../Actions/index.jsx';\r\nimport { responseMorePosts } from './../Actions/index.jsx';\r\n\r\nfunction NewFeedContainer({posts}){\r\n  const { currentPage } = useSelector(state => state.posts);\r\n  const pageDefault = 1;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts())\r\n    getPostNewFeedFirst();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if(currentPage > 1){\r\n      dispatch(fetchMorePosts())\r\n      getPostNewFeedInfinite();\r\n    }\r\n  }, [currentPage])\r\n\r\n  const getPostNewFeedFirst = () => {\r\n        axios({\r\n          method: 'GET',\r\n          url: \"/api/auth/get-post-home\",\r\n          params: {page : pageDefault}\r\n        })\r\n        .then(res =>{\r\n          dispatch(responsePosts(res.data))\r\n        })\r\n        .catch(e => {\r\n          if(axios.isCancel(e)) return\r\n        })\r\n  }\r\n\r\n  const getPostNewFeedInfinite = () => {\r\n        axios({\r\n          method: 'GET',\r\n          url: \"/api/auth/get-post-home\",\r\n          params: {page : currentPage}\r\n        })\r\n        .then(res =>{\r\n          dispatch(responseMorePosts(res.data))\r\n        })\r\n        .catch(e => {\r\n          if(axios.isCancel(e)) return\r\n        })\r\n  }\r\n\r\n  return(\r\n    <NewFeed />\r\n  )\r\n}\r\nexport default NewFeedContainer;\r\n"]},"metadata":{},"sourceType":"module"}