{"ast":null,"code":"import * as Types from './../Constants/ActionTypes.jsx';\nconst initialState = {\n  loading: false,\n  loadingMore: false,\n  list: [],\n  infoUser: {},\n  currentPage: 1,\n  typing: false,\n  hasMore: false\n};\nexport const oneMessage = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.REQUEST_ONE_MESSAGE:\n      state.loading = true;\n      state.list = [];\n      state.currentPage = 1;\n      return { ...state\n      };\n      break;\n\n    case Types.RESPONSE_ONE_MESSAGE:\n      return { ...state,\n        loadingMore: false,\n        loading: false,\n        list: action.payload.message_detail.data.reverse(),\n        infoUser: action.payload.info,\n        hasMore: action.payload.message_detail.last_page > action.payload.message_detail.current_page\n      };\n      break;\n\n    case Types.SET_CURRENT_ONE_MESSAGE:\n      state.currentPage = state.currentPage + 1;\n      return { ...state\n      };\n      break;\n\n    case Types.REQUEST_MORE_ONE_MESSAGE:\n      return { ...state,\n        loadingMore: true,\n        loading: false\n      };\n      break;\n\n    case Types.RESPONSE_MORE_ONE_MESSAGE:\n      state.list = [...action.payload.message_detail.data.reverse(), ...state.list];\n      state.loadingMore = false;\n      state.hasMore = action.payload.message_detail.last_page > action.payload.message_detail.current_page;\n      return { ...state\n      };\n      break;\n\n    case Types.ADD_NEW_MESSAGE:\n      if (state.infoUser.id === action.payload[0].messages_To || state.infoUser.id === action.payload[0].messages_From) {\n        state.list = [...state.list, ...action.payload];\n      }\n\n      return { ...state\n      };\n      break;\n\n    case Types.READ_MESSAGE:\n      state.list.forEach((message, i) => {\n        if (message.messages_From === action.payload) {\n          state.list[i].messages_ReadAt = new Date();\n        }\n      });\n      return { ...state\n      };\n      break;\n\n    case Types.TYPING_MESS:\n      if (action.payload.from === state.infoUser.id && action.payload.status) {\n        state.typing = true;\n      }\n\n      return { ...state\n      };\n      break;\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["D:/Web/mohi/client/src/Reducers/OneMessage.jsx"],"names":["Types","initialState","loading","loadingMore","list","infoUser","currentPage","typing","hasMore","oneMessage","state","action","type","REQUEST_ONE_MESSAGE","RESPONSE_ONE_MESSAGE","payload","message_detail","data","reverse","info","last_page","current_page","SET_CURRENT_ONE_MESSAGE","REQUEST_MORE_ONE_MESSAGE","RESPONSE_MORE_ONE_MESSAGE","ADD_NEW_MESSAGE","id","messages_To","messages_From","READ_MESSAGE","forEach","message","i","messages_ReadAt","Date","TYPING_MESS","from","status"],"mappings":"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","sourcesContent":["import * as Types from './../Constants/ActionTypes.jsx';\r\n\r\nconst initialState = {\r\n  loading:false,\r\n  loadingMore:false,\r\n  list: [],\r\n  infoUser: {},\r\n  currentPage: 1,\r\n  typing: false,\r\n  hasMore: false\r\n};\r\n\r\nexport const oneMessage = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Types.REQUEST_ONE_MESSAGE:\r\n      state.loading = true\r\n      state.list = []\r\n      state.currentPage = 1\r\n      return {...state}\r\n      break;\r\n    case Types.RESPONSE_ONE_MESSAGE:\r\n      return {\r\n        ...state,\r\n        loadingMore: false,\r\n        loading: false,\r\n        list: action.payload.message_detail.data.reverse(),\r\n        infoUser: action.payload.info,\r\n        hasMore: action.payload.message_detail.last_page > action.payload.message_detail.current_page\r\n      }\r\n      break;\r\n    case Types.SET_CURRENT_ONE_MESSAGE:\r\n      state.currentPage = state.currentPage + 1\r\n      return {...state}\r\n      break;\r\n    case Types.REQUEST_MORE_ONE_MESSAGE:\r\n      return {\r\n              ...state,\r\n              loadingMore: true,\r\n              loading: false,\r\n            }\r\n      break;\r\n    case Types.RESPONSE_MORE_ONE_MESSAGE:\r\n      state.list = [...action.payload.message_detail.data.reverse(), ...state.list]\r\n      state.loadingMore = false\r\n      state.hasMore = action.payload.message_detail.last_page > action.payload.message_detail.current_page\r\n      return {...state}\r\n      break;\r\n    case Types.ADD_NEW_MESSAGE:\r\n      if(state.infoUser.id === action.payload[0].messages_To || state.infoUser.id === action.payload[0].messages_From){\r\n        state.list = [...state.list, ...action.payload];\r\n      }\r\n      return {...state}\r\n      break;\r\n    case Types.READ_MESSAGE:\r\n      state.list.forEach((message, i) => {\r\n        if(message.messages_From === action.payload){\r\n          state.list[i].messages_ReadAt = new Date();\r\n        }\r\n      });\r\n      return {...state}\r\n      break;\r\n    case Types.TYPING_MESS:\r\n      if(action.payload.from === state.infoUser.id && action.payload.status){\r\n        state.typing = true;\r\n      }\r\n      return {...state}\r\n      break;\r\n    default: return {...state}\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}