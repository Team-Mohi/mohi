{"ast":null,"code":"import { point, latLng } from 'leaflet';\nimport { Task } from './Task';\nimport { warn, responseToFeatureCollection, isArcgisOnline, extentToBounds, _setGeometry } from '../Util';\nexport var Query = Task.extend({\n  setters: {\n    'offset': 'resultOffset',\n    'limit': 'resultRecordCount',\n    'fields': 'outFields',\n    'precision': 'geometryPrecision',\n    'featureIds': 'objectIds',\n    'returnGeometry': 'returnGeometry',\n    'returnM': 'returnM',\n    'transform': 'datumTransformation',\n    'token': 'token'\n  },\n  path: 'query',\n  params: {\n    returnGeometry: true,\n    where: '1=1',\n    outSR: 4326,\n    outFields: '*'\n  },\n  // Returns a feature if its shape is wholly contained within the search geometry. Valid for all shape type combinations.\n  within: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelContains'; // to the REST api this reads geometry **contains** layer\n\n    return this;\n  },\n  // Returns a feature if any spatial relationship is found. Applies to all shape type combinations.\n  intersects: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelIntersects';\n    return this;\n  },\n  // Returns a feature if its shape wholly contains the search geometry. Valid for all shape type combinations.\n  contains: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelWithin'; // to the REST api this reads geometry **within** layer\n\n    return this;\n  },\n  // Returns a feature if the intersection of the interiors of the two shapes is not empty and has a lower dimension than the maximum dimension of the two shapes. Two lines that share an endpoint in common do not cross. Valid for Line/Line, Line/Area, Multi-point/Area, and Multi-point/Line shape type combinations.\n  crosses: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelCrosses';\n    return this;\n  },\n  // Returns a feature if the two shapes share a common boundary. However, the intersection of the interiors of the two shapes must be empty. In the Point/Line case, the point may touch an endpoint only of the line. Applies to all combinations except Point/Point.\n  touches: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelTouches';\n    return this;\n  },\n  // Returns a feature if the intersection of the two shapes results in an object of the same dimension, but different from both of the shapes. Applies to Area/Area, Line/Line, and Multi-point/Multi-point shape type combinations.\n  overlaps: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelOverlaps';\n    return this;\n  },\n  // Returns a feature if the envelope of the two shapes intersects.\n  bboxIntersects: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelEnvelopeIntersects';\n    return this;\n  },\n  // if someone can help decipher the ArcObjects explanation and translate to plain speak, we should mention this method in the doc\n  indexIntersects: function (geometry) {\n    this._setGeometryParams(geometry);\n\n    this.params.spatialRel = 'esriSpatialRelIndexIntersects'; // Returns a feature if the envelope of the query geometry intersects the index entry for the target geometry\n\n    return this;\n  },\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\n  nearby: function (latlng, radius) {\n    latlng = latLng(latlng);\n    this.params.geometry = [latlng.lng, latlng.lat];\n    this.params.geometryType = 'esriGeometryPoint';\n    this.params.spatialRel = 'esriSpatialRelIntersects';\n    this.params.units = 'esriSRUnit_Meter';\n    this.params.distance = radius;\n    this.params.inSr = 4326;\n    return this;\n  },\n  where: function (string) {\n    // instead of converting double-quotes to single quotes, pass as is, and provide a more informative message if a 400 is encountered\n    this.params.where = string;\n    return this;\n  },\n  between: function (start, end) {\n    this.params.time = [start.valueOf(), end.valueOf()];\n    return this;\n  },\n  simplify: function (map, factor) {\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\n    this.params.maxAllowableOffset = mapWidth / map.getSize().y * factor;\n    return this;\n  },\n  orderBy: function (fieldName, order) {\n    order = order || 'ASC';\n    this.params.orderByFields = this.params.orderByFields ? this.params.orderByFields + ',' : '';\n    this.params.orderByFields += [fieldName, order].join(' ');\n    return this;\n  },\n  run: function (callback, context) {\n    this._cleanParams(); // services hosted on ArcGIS Online and ArcGIS Server 10.3.1+ support requesting geojson directly\n\n\n    if (this.options.isModern || isArcgisOnline(this.options.url) && this.options.isModern === undefined) {\n      this.params.f = 'geojson';\n      return this.request(function (error, response) {\n        this._trapSQLerrors(error);\n\n        callback.call(context, error, response, response);\n      }, this); // otherwise convert it in the callback then pass it on\n    } else {\n      return this.request(function (error, response) {\n        this._trapSQLerrors(error);\n\n        callback.call(context, error, response && responseToFeatureCollection(response), response);\n      }, this);\n    }\n  },\n  count: function (callback, context) {\n    this._cleanParams();\n\n    this.params.returnCountOnly = true;\n    return this.request(function (error, response) {\n      callback.call(this, error, response && response.count, response);\n    }, context);\n  },\n  ids: function (callback, context) {\n    this._cleanParams();\n\n    this.params.returnIdsOnly = true;\n    return this.request(function (error, response) {\n      callback.call(this, error, response && response.objectIds, response);\n    }, context);\n  },\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\n  bounds: function (callback, context) {\n    this._cleanParams();\n\n    this.params.returnExtentOnly = true;\n    return this.request(function (error, response) {\n      if (response && response.extent && extentToBounds(response.extent)) {\n        callback.call(context, error, extentToBounds(response.extent), response);\n      } else {\n        error = {\n          message: 'Invalid Bounds'\n        };\n        callback.call(context, error, null, response);\n      }\n    }, context);\n  },\n  distinct: function () {\n    // geometry must be omitted for queries requesting distinct values\n    this.params.returnGeometry = false;\n    this.params.returnDistinctValues = true;\n    return this;\n  },\n  // only valid for image services\n  pixelSize: function (rawPoint) {\n    var castPoint = point(rawPoint);\n    this.params.pixelSize = [castPoint.x, castPoint.y];\n    return this;\n  },\n  // only valid for map services\n  layer: function (layer) {\n    this.path = layer + '/query';\n    return this;\n  },\n  _trapSQLerrors: function (error) {\n    if (error) {\n      if (error.code === '400') {\n        warn('one common syntax error in query requests is encasing string values in double quotes instead of single quotes');\n      }\n    }\n  },\n  _cleanParams: function () {\n    delete this.params.returnIdsOnly;\n    delete this.params.returnExtentOnly;\n    delete this.params.returnCountOnly;\n  },\n  _setGeometryParams: function (geometry) {\n    this.params.inSr = 4326;\n\n    var converted = _setGeometry(geometry);\n\n    this.params.geometry = converted.geometry;\n    this.params.geometryType = converted.geometryType;\n  }\n});\nexport function query(options) {\n  return new Query(options);\n}\nexport default query;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/esri-leaflet/src/Tasks/Query.js"],"names":["point","latLng","Task","warn","responseToFeatureCollection","isArcgisOnline","extentToBounds","_setGeometry","Query","extend","setters","path","params","returnGeometry","where","outSR","outFields","within","geometry","_setGeometryParams","spatialRel","intersects","contains","crosses","touches","overlaps","bboxIntersects","indexIntersects","nearby","latlng","radius","lng","lat","geometryType","units","distance","inSr","string","between","start","end","time","valueOf","simplify","map","factor","mapWidth","Math","abs","getBounds","getWest","getEast","maxAllowableOffset","getSize","y","orderBy","fieldName","order","orderByFields","join","run","callback","context","_cleanParams","options","isModern","url","undefined","f","request","error","response","_trapSQLerrors","call","count","returnCountOnly","ids","returnIdsOnly","objectIds","bounds","returnExtentOnly","extent","message","distinct","returnDistinctValues","pixelSize","rawPoint","castPoint","x","layer","code","converted","query"],"mappings":"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","sourcesContent":["import { point, latLng } from 'leaflet';\r\nimport { Task } from './Task';\r\nimport {\r\n  warn,\r\n  responseToFeatureCollection,\r\n  isArcgisOnline,\r\n  extentToBounds,\r\n  _setGeometry\r\n} from '../Util';\r\n\r\nexport var Query = Task.extend({\r\n  setters: {\r\n    'offset': 'resultOffset',\r\n    'limit': 'resultRecordCount',\r\n    'fields': 'outFields',\r\n    'precision': 'geometryPrecision',\r\n    'featureIds': 'objectIds',\r\n    'returnGeometry': 'returnGeometry',\r\n    'returnM': 'returnM',\r\n    'transform': 'datumTransformation',\r\n    'token': 'token'\r\n  },\r\n\r\n  path: 'query',\r\n\r\n  params: {\r\n    returnGeometry: true,\r\n    where: '1=1',\r\n    outSR: 4326,\r\n    outFields: '*'\r\n  },\r\n\r\n  // Returns a feature if its shape is wholly contained within the search geometry. Valid for all shape type combinations.\r\n  within: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelContains'; // to the REST api this reads geometry **contains** layer\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if any spatial relationship is found. Applies to all shape type combinations.\r\n  intersects: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelIntersects';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if its shape wholly contains the search geometry. Valid for all shape type combinations.\r\n  contains: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelWithin'; // to the REST api this reads geometry **within** layer\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the intersection of the interiors of the two shapes is not empty and has a lower dimension than the maximum dimension of the two shapes. Two lines that share an endpoint in common do not cross. Valid for Line/Line, Line/Area, Multi-point/Area, and Multi-point/Line shape type combinations.\r\n  crosses: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelCrosses';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the two shapes share a common boundary. However, the intersection of the interiors of the two shapes must be empty. In the Point/Line case, the point may touch an endpoint only of the line. Applies to all combinations except Point/Point.\r\n  touches: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelTouches';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the intersection of the two shapes results in an object of the same dimension, but different from both of the shapes. Applies to Area/Area, Line/Line, and Multi-point/Multi-point shape type combinations.\r\n  overlaps: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelOverlaps';\r\n    return this;\r\n  },\r\n\r\n  // Returns a feature if the envelope of the two shapes intersects.\r\n  bboxIntersects: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelEnvelopeIntersects';\r\n    return this;\r\n  },\r\n\r\n  // if someone can help decipher the ArcObjects explanation and translate to plain speak, we should mention this method in the doc\r\n  indexIntersects: function (geometry) {\r\n    this._setGeometryParams(geometry);\r\n    this.params.spatialRel = 'esriSpatialRelIndexIntersects'; // Returns a feature if the envelope of the query geometry intersects the index entry for the target geometry\r\n    return this;\r\n  },\r\n\r\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\r\n  nearby: function (latlng, radius) {\r\n    latlng = latLng(latlng);\r\n    this.params.geometry = [latlng.lng, latlng.lat];\r\n    this.params.geometryType = 'esriGeometryPoint';\r\n    this.params.spatialRel = 'esriSpatialRelIntersects';\r\n    this.params.units = 'esriSRUnit_Meter';\r\n    this.params.distance = radius;\r\n    this.params.inSr = 4326;\r\n    return this;\r\n  },\r\n\r\n  where: function (string) {\r\n    // instead of converting double-quotes to single quotes, pass as is, and provide a more informative message if a 400 is encountered\r\n    this.params.where = string;\r\n    return this;\r\n  },\r\n\r\n  between: function (start, end) {\r\n    this.params.time = [start.valueOf(), end.valueOf()];\r\n    return this;\r\n  },\r\n\r\n  simplify: function (map, factor) {\r\n    var mapWidth = Math.abs(map.getBounds().getWest() - map.getBounds().getEast());\r\n    this.params.maxAllowableOffset = (mapWidth / map.getSize().y) * factor;\r\n    return this;\r\n  },\r\n\r\n  orderBy: function (fieldName, order) {\r\n    order = order || 'ASC';\r\n    this.params.orderByFields = (this.params.orderByFields) ? this.params.orderByFields + ',' : '';\r\n    this.params.orderByFields += ([fieldName, order]).join(' ');\r\n    return this;\r\n  },\r\n\r\n  run: function (callback, context) {\r\n    this._cleanParams();\r\n\r\n    // services hosted on ArcGIS Online and ArcGIS Server 10.3.1+ support requesting geojson directly\r\n    if (this.options.isModern || (isArcgisOnline(this.options.url) && this.options.isModern === undefined)) {\r\n      this.params.f = 'geojson';\r\n\r\n      return this.request(function (error, response) {\r\n        this._trapSQLerrors(error);\r\n        callback.call(context, error, response, response);\r\n      }, this);\r\n\r\n      // otherwise convert it in the callback then pass it on\r\n    } else {\r\n      return this.request(function (error, response) {\r\n        this._trapSQLerrors(error);\r\n        callback.call(context, error, (response && responseToFeatureCollection(response)), response);\r\n      }, this);\r\n    }\r\n  },\r\n\r\n  count: function (callback, context) {\r\n    this._cleanParams();\r\n    this.params.returnCountOnly = true;\r\n    return this.request(function (error, response) {\r\n      callback.call(this, error, (response && response.count), response);\r\n    }, context);\r\n  },\r\n\r\n  ids: function (callback, context) {\r\n    this._cleanParams();\r\n    this.params.returnIdsOnly = true;\r\n    return this.request(function (error, response) {\r\n      callback.call(this, error, (response && response.objectIds), response);\r\n    }, context);\r\n  },\r\n\r\n  // only valid for Feature Services running on ArcGIS Server 10.3+ or ArcGIS Online\r\n  bounds: function (callback, context) {\r\n    this._cleanParams();\r\n    this.params.returnExtentOnly = true;\r\n    return this.request(function (error, response) {\r\n      if (response && response.extent && extentToBounds(response.extent)) {\r\n        callback.call(context, error, extentToBounds(response.extent), response);\r\n      } else {\r\n        error = {\r\n          message: 'Invalid Bounds'\r\n        };\r\n        callback.call(context, error, null, response);\r\n      }\r\n    }, context);\r\n  },\r\n\r\n  distinct: function () {\r\n    // geometry must be omitted for queries requesting distinct values\r\n    this.params.returnGeometry = false;\r\n    this.params.returnDistinctValues = true;\r\n    return this;\r\n  },\r\n\r\n  // only valid for image services\r\n  pixelSize: function (rawPoint) {\r\n    var castPoint = point(rawPoint);\r\n    this.params.pixelSize = [castPoint.x, castPoint.y];\r\n    return this;\r\n  },\r\n\r\n  // only valid for map services\r\n  layer: function (layer) {\r\n    this.path = layer + '/query';\r\n    return this;\r\n  },\r\n\r\n  _trapSQLerrors: function (error) {\r\n    if (error) {\r\n      if (error.code === '400') {\r\n        warn('one common syntax error in query requests is encasing string values in double quotes instead of single quotes');\r\n      }\r\n    }\r\n  },\r\n\r\n  _cleanParams: function () {\r\n    delete this.params.returnIdsOnly;\r\n    delete this.params.returnExtentOnly;\r\n    delete this.params.returnCountOnly;\r\n  },\r\n\r\n  _setGeometryParams: function (geometry) {\r\n    this.params.inSr = 4326;\r\n    var converted = _setGeometry(geometry);\r\n    this.params.geometry = converted.geometry;\r\n    this.params.geometryType = converted.geometryType;\r\n  }\r\n\r\n});\r\n\r\nexport function query (options) {\r\n  return new Query(options);\r\n}\r\n\r\nexport default query;\r\n"]},"metadata":{},"sourceType":"module"}