{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nlet ustk = IsJsonString(localStorage.getItem('ustk')) ? JSON.parse(localStorage.getItem('ustk')) : '';\nlet currentToken = ustk ? ustk.access_token : '';\n\nif (!currentToken) {\n  localStorage.removeItem('ustk');\n} else {\n  console.log('aaaaaaaa');\n  axios.interceptors.request.use(config => {\n    const token = localStorage.getItem('ustk') ? JSON.parse(localStorage.getItem('ustk')).access_token : '';\n\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    return config;\n  }, error => {\n    Promise.reject(error);\n  });\n  let isRefreshing = false;\n  let failedQueue = [];\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error);\n      } else {\n        prom.resolve(token);\n      }\n    });\n    failedQueue = [];\n  };\n\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        return new Promise(function (resolve, reject) {\n          failedQueue.push({\n            resolve,\n            reject\n          });\n        }).then(token => {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          originalRequest.headers['Content-Type'] = 'application/json';\n          originalRequest.headers['Access-Control-Allow-Origin'] = '*';\n          return axios(originalRequest);\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      }\n\n      originalRequest._retry = true;\n      isRefreshing = true;\n      return new Promise(function (resolve, reject) {\n        axios.post(API_REFRESH_TOKEN, {\n          'token': JSON.parse(localStorage.getItem('ustk')).access_token\n        }).then(res => {\n          if (res.status === 200) {\n            localStorage.setItem('ustk', JSON.stringify(res.data));\n            let new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\n            processQueue(null, res.data.access_token);\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\n            originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n            resolve(axios(originalRequest));\n          }\n        }).then(() => {\n          isRefreshing = false;\n        });\n      });\n    }\n\n    return Promise.reject(error);\n  });\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","IsJsonString","str","JSON","parse","e","ustk","localStorage","getItem","currentToken","access_token","removeItem","console","log","interceptors","request","use","config","token","headers","error","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","originalRequest","status","_retry","push","then","catch","err","post","res","setItem","stringify","data","new_token","defaults","common"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\nfunction IsJsonString(str) {\r\n  try {\r\n      JSON.parse(str);\r\n  } catch (e) {\r\n      return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nlet ustk = IsJsonString(localStorage.getItem('ustk')) ? JSON.parse(localStorage.getItem('ustk')) : '';\r\nlet currentToken = ustk ? ustk.access_token : '';\r\n\r\nif(!currentToken){\r\n  localStorage.removeItem('ustk');\r\n}else{\r\n  console.log('aaaaaaaa');\r\n  axios.interceptors.request.use(\r\n     config => {\r\n        const token = localStorage.getItem('ustk') ? JSON.parse(localStorage.getItem('ustk')).access_token: '';\r\n         if (token) {\r\n             config.headers['Authorization'] = 'Bearer ' + token;\r\n         }\r\n         return config;\r\n     },\r\n     error => {\r\n         Promise.reject(error)\r\n   });\r\n\r\n   let isRefreshing = false;\r\n   let failedQueue = [];\r\n\r\n   const processQueue = (error, token = null) => {\r\n     failedQueue.forEach(prom => {\r\n       if (error) {\r\n         prom.reject(error);\r\n       } else {\r\n         prom.resolve(token);\r\n       }\r\n     })\r\n\r\n     failedQueue = [];\r\n   }\r\n\r\n  axios.interceptors.response.use((response) => {\r\n     return response\r\n  },\r\n  function (error) {\r\n     const originalRequest = error.config;\r\n     if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n\r\n       if (isRefreshing) {\r\n          return new Promise(function(resolve, reject) {\r\n            failedQueue.push({resolve, reject})\r\n          }).then(token => {\r\n            originalRequest.headers['Authorization'] = 'Bearer ' + token;\r\n            originalRequest.headers['Content-Type'] = 'application/json';\r\n            originalRequest.headers['Access-Control-Allow-Origin'] = '*';\r\n            return axios(originalRequest);\r\n          }).catch(err => {\r\n            return Promise.reject(err);\r\n          })\r\n        }\r\n\r\n         originalRequest._retry = true;\r\n         isRefreshing = true;\r\n         return new Promise(function (resolve, reject) {\r\n           axios.post(API_REFRESH_TOKEN,\r\n               {\r\n                   'token' : JSON.parse(localStorage.getItem('ustk')).access_token\r\n               })\r\n               .then((res) => {\r\n                   if (res.status === 200) {\r\n                       localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                       let new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n                       processQueue(null, res.data.access_token);\r\n                       axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\r\n                       originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                       resolve(axios(originalRequest));\r\n                   }\r\n               })\r\n               .then(() => { isRefreshing = false })\r\n          })\r\n     }\r\n     return Promise.reject(error);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}