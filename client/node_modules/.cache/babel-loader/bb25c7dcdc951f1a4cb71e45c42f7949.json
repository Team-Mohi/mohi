{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\nconst token = localStorage.getItem('ustk') ? JSON.parse(localStorage.getItem('ustk')).access_token : '';\n\nconst interceptorAxios = async () => {\n  axios.interceptors.request.use(config => {\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    return config;\n  }, error => {\n    Promise.reject(error);\n  });\n  let isRefreshing = false;\n  let failedQueue = [];\n\n  const processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n      if (error) {\n        prom.reject(error);\n      } else {\n        prom.resolve(token);\n      }\n    });\n    failedQueue = [];\n  };\n\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      if (isRefreshing) {\n        return new Promise(function (resolve, reject) {\n          failedQueue.push({\n            resolve,\n            reject\n          });\n        }).then(token => {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return axios(originalRequest);\n        }).catch(err => {\n          return Promise.reject(err);\n        });\n      }\n\n      originalRequest._retry = true;\n      isRefreshing = true;\n      return new Promise(function (resolve, reject) {\n        axios.post(API_REFRESH_TOKEN, {\n          'token': token\n        }).then(async res => {\n          if (res.status === 200) {\n            console.log('new' + res.data.access_token);\n            await localStorage.setItem('ustk', JSON.stringify(res.data));\n            let new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\n            processQueue(null, res.data.access_token);\n            axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\n            originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n            resolve(axios(originalRequest));\n          }\n        }).then(() => {\n          isRefreshing = false;\n        });\n      });\n    }\n\n    return Promise.reject(error);\n  });\n};\n\ninterceptorAxios();","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","token","localStorage","getItem","JSON","parse","access_token","interceptorAxios","interceptors","request","use","config","headers","error","Promise","reject","isRefreshing","failedQueue","processQueue","forEach","prom","resolve","response","originalRequest","status","_retry","push","then","catch","err","post","res","console","log","data","setItem","stringify","new_token","defaults","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AAEA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCG,YAAxE,GAAuF,EAArG;;AAEA,MAAMC,gBAAgB,GAAG,YAAY;AACnCR,EAAAA,KAAK,CAACS,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAM,IAAI;AACN,QAAIV,KAAJ,EAAW;AACPU,MAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,YAAYX,KAA9C;AACH;;AACD,WAAOU,MAAP;AACH,GANJ,EAOGE,KAAK,IAAI;AACLC,IAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACL,GATF;AAWC,MAAIG,YAAY,GAAG,KAAnB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,QAAMC,YAAY,GAAG,CAACL,KAAD,EAAQZ,KAAK,GAAG,IAAhB,KAAyB;AAC5CgB,IAAAA,WAAW,CAACE,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,UAAIP,KAAJ,EAAW;AACTO,QAAAA,IAAI,CAACL,MAAL,CAAYF,KAAZ;AACD,OAFD,MAEO;AACLO,QAAAA,IAAI,CAACC,OAAL,CAAapB,KAAb;AACD;AACF,KAND;AAQAgB,IAAAA,WAAW,GAAG,EAAd;AACD,GAVD;;AAYDlB,EAAAA,KAAK,CAACS,YAAN,CAAmBc,QAAnB,CAA4BZ,GAA5B,CAAiCY,QAAD,IAAc;AAC3C,WAAOA,QAAP;AACF,GAFD,EAGA,UAAUT,KAAV,EAAiB;AACd,UAAMU,eAAe,GAAGV,KAAK,CAACF,MAA9B;;AACA,QAAIE,KAAK,CAACS,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAE5D,UAAIT,YAAJ,EAAkB;AACf,eAAO,IAAIF,OAAJ,CAAY,UAASO,OAAT,EAAkBN,MAAlB,EAA0B;AAC3CE,UAAAA,WAAW,CAACS,IAAZ,CAAiB;AAACL,YAAAA,OAAD;AAAUN,YAAAA;AAAV,WAAjB;AACD,SAFM,EAEJY,IAFI,CAEC1B,KAAK,IAAI;AACfsB,UAAAA,eAAe,CAACX,OAAhB,CAAwB,eAAxB,IAA2C,YAAYX,KAAvD;AACA,iBAAOF,KAAK,CAACwB,eAAD,CAAZ;AACD,SALM,EAKJK,KALI,CAKEC,GAAG,IAAI;AACd,iBAAOf,OAAO,CAACC,MAAR,CAAec,GAAf,CAAP;AACD,SAPM,CAAP;AAQD;;AAEAN,MAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACAT,MAAAA,YAAY,GAAG,IAAf;AACA,aAAO,IAAIF,OAAJ,CAAY,UAAUO,OAAV,EAAmBN,MAAnB,EAA2B;AAC5ChB,QAAAA,KAAK,CAAC+B,IAAN,CAAW9B,iBAAX,EACI;AACI,mBAAUC;AADd,SADJ,EAIK0B,IAJL,CAIU,MAAOI,GAAP,IAAe;AACjB,cAAIA,GAAG,CAACP,MAAJ,KAAe,GAAnB,EAAwB;AACrBQ,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,GAAG,CAACG,IAAJ,CAAS5B,YAA7B;AACC,kBAAMJ,YAAY,CAACiC,OAAb,CAAqB,MAArB,EAA6B/B,IAAI,CAACgC,SAAL,CAAeL,GAAG,CAACG,IAAnB,CAA7B,CAAN;AACA,gBAAIG,SAAS,GAAGjC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCG,YAAzD;AACAY,YAAAA,YAAY,CAAC,IAAD,EAAOa,GAAG,CAACG,IAAJ,CAAS5B,YAAhB,CAAZ;AACAP,YAAAA,KAAK,CAACuC,QAAN,CAAe1B,OAAf,CAAuB2B,MAAvB,CAA8B,eAA9B,IAAiD,YAAYF,SAA7D;AACAd,YAAAA,eAAe,CAACX,OAAhB,CAAwB,eAAxB,IAA2C,YAAYyB,SAAvD;AACAhB,YAAAA,OAAO,CAACtB,KAAK,CAACwB,eAAD,CAAN,CAAP;AACH;AACJ,SAdL,EAeKI,IAfL,CAeU,MAAM;AAAEX,UAAAA,YAAY,GAAG,KAAf;AAAsB,SAfxC;AAgBA,OAjBK,CAAP;AAkBH;;AACD,WAAOF,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,GAxCD;AAyCD,CApED;;AAqEAN,gBAAgB","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\nconst token = localStorage.getItem('ustk') ? JSON.parse(localStorage.getItem('ustk')).access_token : '';\r\n\r\nconst interceptorAxios = async () => {\r\n  axios.interceptors.request.use(\r\n     config => {\r\n         if (token) {\r\n             config.headers['Authorization'] = 'Bearer ' + token;\r\n         }\r\n         return config;\r\n     },\r\n     error => {\r\n         Promise.reject(error)\r\n   });\r\n\r\n   let isRefreshing = false;\r\n   let failedQueue = [];\r\n\r\n   const processQueue = (error, token = null) => {\r\n     failedQueue.forEach(prom => {\r\n       if (error) {\r\n         prom.reject(error);\r\n       } else {\r\n         prom.resolve(token);\r\n       }\r\n     })\r\n\r\n     failedQueue = [];\r\n   }\r\n\r\n  axios.interceptors.response.use((response) => {\r\n     return response\r\n  },\r\n  function (error) {\r\n     const originalRequest = error.config;\r\n     if (error.response.status === 401 && !originalRequest._retry) {\r\n\r\n       if (isRefreshing) {\r\n          return new Promise(function(resolve, reject) {\r\n            failedQueue.push({resolve, reject})\r\n          }).then(token => {\r\n            originalRequest.headers['Authorization'] = 'Bearer ' + token;\r\n            return axios(originalRequest);\r\n          }).catch(err => {\r\n            return Promise.reject(err);\r\n          })\r\n        }\r\n\r\n         originalRequest._retry = true;\r\n         isRefreshing = true;\r\n         return new Promise(function (resolve, reject) {\r\n           axios.post(API_REFRESH_TOKEN,\r\n               {\r\n                   'token' : token\r\n               })\r\n               .then(async (res) => {\r\n                   if (res.status === 200) {\r\n                      console.log('new' + res.data.access_token)\r\n                       await localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                       let new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n                       processQueue(null, res.data.access_token);\r\n                       axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\r\n                       originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                       resolve(axios(originalRequest));\r\n                   }\r\n               })\r\n               .then(() => { isRefreshing = false })\r\n          })\r\n     }\r\n     return Promise.reject(error);\r\n  });\r\n}\r\ninterceptorAxios();\r\n"]},"metadata":{},"sourceType":"module"}