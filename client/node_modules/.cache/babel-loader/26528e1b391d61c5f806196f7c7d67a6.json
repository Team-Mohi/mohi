{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/**\r\n * TODO: 4.0\r\n * - remove `dataSource`\r\n * - `size` not work with customizeInput\r\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\r\n */\n\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nimport devWarning from '../_util/devWarning';\nimport { isValidElement } from '../_util/reactNode';\nvar Option = Select.Option;\nvar InternalSelect = Select;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = toArray(children);\n  var selectRef = React.useRef();\n  React.useImperativeHandle(ref, function () {\n    return selectRef.current;\n  }); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n\n    customizeInput = _childNodes[0];\n  }\n\n  var getInputElement = function getInputElement() {\n    return customizeInput;\n  }; // ============================ Options ============================\n\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n      }\n    }) : [];\n  } // ============================ Warning ============================\n\n\n  React.useEffect(function () {\n    devWarning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\n    devWarning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\n  }, []);\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(InternalSelect, _extends({\n      ref: selectRef\n    }, omit(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      className: classNames(className, \"\".concat(prefixCls, \"-auto-complete\")),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\n\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/antd/es/auto-complete/index.js"],"names":["_extends","_typeof","_slicedToArray","React","toArray","classNames","omit","Select","ConfigConsumer","devWarning","isValidElement","Option","InternalSelect","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizePrefixCls","prefixCls","className","children","dataSource","childNodes","selectRef","useRef","useImperativeHandle","current","customizeInput","length","_childNodes","getInputElement","optionChildren","map","item","createElement","key","value","optionValue","text","Error","useEffect","_ref","getPrefixCls","concat","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\r\nimport _typeof from \"@babel/runtime/helpers/typeof\";\r\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\r\n\r\n/**\r\n * TODO: 4.0\r\n * - remove `dataSource`\r\n * - `size` not work with customizeInput\r\n * - customizeInput not feedback `ENTER` key since accessibility enhancement\r\n */\r\nimport * as React from 'react';\r\nimport toArray from \"rc-util/es/Children/toArray\";\r\nimport classNames from 'classnames';\r\nimport omit from 'omit.js';\r\nimport Select from '../select';\r\nimport { ConfigConsumer } from '../config-provider';\r\nimport devWarning from '../_util/devWarning';\r\nimport { isValidElement } from '../_util/reactNode';\r\nvar Option = Select.Option;\r\nvar InternalSelect = Select;\r\n\r\nfunction isSelectOptionOrSelectOptGroup(child) {\r\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\r\n}\r\n\r\nvar AutoComplete = function AutoComplete(props, ref) {\r\n  var customizePrefixCls = props.prefixCls,\r\n      className = props.className,\r\n      children = props.children,\r\n      dataSource = props.dataSource;\r\n  var childNodes = toArray(children);\r\n  var selectRef = React.useRef();\r\n  React.useImperativeHandle(ref, function () {\r\n    return selectRef.current;\r\n  }); // ============================= Input =============================\r\n\r\n  var customizeInput;\r\n\r\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\r\n    var _childNodes = _slicedToArray(childNodes, 1);\r\n\r\n    customizeInput = _childNodes[0];\r\n  }\r\n\r\n  var getInputElement = function getInputElement() {\r\n    return customizeInput;\r\n  }; // ============================ Options ============================\r\n\r\n\r\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\r\n\r\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\r\n    optionChildren = children;\r\n  } else {\r\n    optionChildren = dataSource ? dataSource.map(function (item) {\r\n      if (isValidElement(item)) {\r\n        return item;\r\n      }\r\n\r\n      switch (_typeof(item)) {\r\n        case 'string':\r\n          return /*#__PURE__*/React.createElement(Option, {\r\n            key: item,\r\n            value: item\r\n          }, item);\r\n\r\n        case 'object':\r\n          {\r\n            var optionValue = item.value;\r\n            return /*#__PURE__*/React.createElement(Option, {\r\n              key: optionValue,\r\n              value: optionValue\r\n            }, item.text);\r\n          }\r\n\r\n        default:\r\n          throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\r\n      }\r\n    }) : [];\r\n  } // ============================ Warning ============================\r\n\r\n\r\n  React.useEffect(function () {\r\n    devWarning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.');\r\n    devWarning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.');\r\n  }, []);\r\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\r\n    var getPrefixCls = _ref.getPrefixCls;\r\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\r\n    return /*#__PURE__*/React.createElement(InternalSelect, _extends({\r\n      ref: selectRef\r\n    }, omit(props, ['dataSource']), {\r\n      prefixCls: prefixCls,\r\n      className: classNames(className, \"\".concat(prefixCls, \"-auto-complete\")),\r\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\r\n      getInputElement: getInputElement\r\n    }), optionChildren);\r\n  });\r\n};\r\n\r\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\r\nRefAutoComplete.Option = Option;\r\nexport default RefAutoComplete;"]},"metadata":{},"sourceType":"module"}