{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\n/**\r\n * This function is used to mark string literals representing CSS class names\r\n * so that they can be transformed statically. This allows for modularization\r\n * and minification of CSS class names.\r\n *\r\n * In static_upstream, this function is actually implemented, but it should\r\n * eventually be replaced with something more descriptive, and the transform\r\n * that is used in the main stack should be ported for use elsewhere.\r\n *\r\n * @param string|object className to modularize, or an object of key/values.\r\n *                      In the object case, the values are conditions that\r\n *                      determine if the className keys should be included.\r\n * @param [string ...]  Variable list of classNames in the string case.\r\n * @return string       Renderable space-separated CSS className.\r\n */\n\nfunction cx(classNames) {\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function (className) {\n      return classNames[className];\n    }).map(replace).join(' ');\n  }\n\n  return Array.prototype.map.call(arguments, replace).join(' ');\n}\n\nfunction replace(str) {\n  return str.replace(/\\//g, '-');\n}\n\nmodule.exports = cx;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/fbjs/lib/cx.js"],"names":["cx","classNames","Object","keys","filter","className","map","replace","join","Array","prototype","call","arguments","str","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAQA;;;;;;;;;;;;;;;;AAeA,SAASA,EAAT,CAAYC,UAAZ,EAAwB;AACtB,MAAI,OAAOA,UAAP,IAAqB,QAAzB,EAAmC;AACjC,WAAOC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAA+B,UAAUC,SAAV,EAAqB;AACzD,aAAOJ,UAAU,CAACI,SAAD,CAAjB;AACD,KAFM,EAEJC,GAFI,CAEAC,OAFA,EAESC,IAFT,CAEc,GAFd,CAAP;AAGD;;AAED,SAAOC,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,CAAoBK,IAApB,CAAyBC,SAAzB,EAAoCL,OAApC,EAA6CC,IAA7C,CAAkD,GAAlD,CAAP;AACD;;AAED,SAASD,OAAT,CAAiBM,GAAjB,EAAsB;AACpB,SAAOA,GAAG,CAACN,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,CAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBf,EAAjB","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n/**\r\n * This function is used to mark string literals representing CSS class names\r\n * so that they can be transformed statically. This allows for modularization\r\n * and minification of CSS class names.\r\n *\r\n * In static_upstream, this function is actually implemented, but it should\r\n * eventually be replaced with something more descriptive, and the transform\r\n * that is used in the main stack should be ported for use elsewhere.\r\n *\r\n * @param string|object className to modularize, or an object of key/values.\r\n *                      In the object case, the values are conditions that\r\n *                      determine if the className keys should be included.\r\n * @param [string ...]  Variable list of classNames in the string case.\r\n * @return string       Renderable space-separated CSS className.\r\n */\r\nfunction cx(classNames) {\r\n  if (typeof classNames == 'object') {\r\n    return Object.keys(classNames).filter(function (className) {\r\n      return classNames[className];\r\n    }).map(replace).join(' ');\r\n  }\r\n\r\n  return Array.prototype.map.call(arguments, replace).join(' ');\r\n}\r\n\r\nfunction replace(str) {\r\n  return str.replace(/\\//g, '-');\r\n}\r\n\r\nmodule.exports = cx;"]},"metadata":{},"sourceType":"script"}