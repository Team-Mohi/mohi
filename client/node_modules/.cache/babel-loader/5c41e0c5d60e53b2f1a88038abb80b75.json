{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Containers\\\\LoginContainer.jsx\";\nimport React, { useState } from 'react';\nimport Login from './../app/Authen/Login.jsx';\nimport axios from 'axios';\nimport { API_LOGIN } from './../Constants/Api.jsx';\nimport { useHistory } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { toggleStatusSpin } from './../Actions/index.jsx';\n\nvar CryptoJS = require(\"crypto-js\");\n\nexport default function LoginContainer(props) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [errorLogin, setErrorLogin] = useState();\n\n  const setLoginFunc = async data => {\n    dispatch(toggleStatusSpin());\n    await axios.post('api/auth/login', data).then(res => {\n      props.setLoginFunc(res);\n    }).catch(async err => {\n      if (err) {\n        console.log(err.response);\n\n        if (err.response.status === 301) {\n          await axios.post('/api/resend-otp', {\n            action: 'register',\n            user_email: JSON.parse(err.response.config.data).user_email,\n            user_password: JSON.parse(err.response.config.data).user_password\n          }).then(response => {\n            console.log(response);\n          });\n          let code = CryptoJS.AES.encrypt(JSON.stringify(897263), 'code_veri').toString();\n          let message = \"Chúng tôi đã gửi mã \";\n          history.push('/register/step-2', {\n            message: message,\n            code: code\n          });\n        }\n\n        if (err.response.status === 401) {\n          setErrorLogin(err.response ? err.response.data : '');\n          history.push('/login');\n        }\n      }\n    });\n    dispatch(toggleStatusSpin());\n  };\n\n  return /*#__PURE__*/React.createElement(Login, {\n    setLoginFunc: setLoginFunc,\n    errorLogin: errorLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  });\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Containers/LoginContainer.jsx"],"names":["React","useState","Login","axios","API_LOGIN","useHistory","Route","useDispatch","toggleStatusSpin","CryptoJS","require","LoginContainer","props","dispatch","history","errorLogin","setErrorLogin","setLoginFunc","data","post","then","res","catch","err","console","log","response","status","action","user_email","JSON","parse","config","user_password","code","AES","encrypt","stringify","toString","message","push"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,gBAAT,QAAiC,wBAAjC;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC3C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAMO,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,EAA5C;;AAEA,QAAMgB,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnCL,IAAAA,QAAQ,CAACL,gBAAgB,EAAjB,CAAR;AAEA,UAAML,KAAK,CAACgB,IAAN,CAAW,gBAAX,EAA6BD,IAA7B,EAAmCE,IAAnC,CAAyCC,GAAD,IAAS;AACrDT,MAAAA,KAAK,CAACK,YAAN,CAAmBI,GAAnB;AACD,KAFK,EAEHC,KAFG,CAEI,MAAOC,GAAP,IAAe;AAEvB,UAAGA,GAAH,EAAO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,QAAhB;;AACA,YAAGH,GAAG,CAACG,QAAJ,CAAaC,MAAb,KAAwB,GAA3B,EAA+B;AAC7B,gBAAMxB,KAAK,CAACgB,IAAN,CAAW,iBAAX,EAA8B;AAClCS,YAAAA,MAAM,EAAE,UAD0B;AAElCC,YAAAA,UAAU,EAAEC,IAAI,CAACC,KAAL,CAAWR,GAAG,CAACG,QAAJ,CAAaM,MAAb,CAAoBd,IAA/B,EAAqCW,UAFf;AAGlCI,YAAAA,aAAa,EAAEH,IAAI,CAACC,KAAL,CAAWR,GAAG,CAACG,QAAJ,CAAaM,MAAb,CAAoBd,IAA/B,EAAqCe;AAHlB,WAA9B,EAIHb,IAJG,CAIGM,QAAD,IAAc;AACpBF,YAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACD,WANK,CAAN;AAQA,cAAIQ,IAAI,GAAGzB,QAAQ,CAAC0B,GAAT,CAAaC,OAAb,CAAqBN,IAAI,CAACO,SAAL,CAAe,MAAf,CAArB,EAA6C,WAA7C,EAA0DC,QAA1D,EAAX;AACA,cAAIC,OAAO,GAAG,sBAAd;AACAzB,UAAAA,OAAO,CAAC0B,IAAR,CAAa,kBAAb,EAAiC;AAC/BD,YAAAA,OAAO,EAAEA,OADsB;AAE/BL,YAAAA,IAAI,EAAEA;AAFyB,WAAjC;AAID;;AAED,YAAGX,GAAG,CAACG,QAAJ,CAAaC,MAAb,KAAwB,GAA3B,EAA+B;AAC7BX,UAAAA,aAAa,CAACO,GAAG,CAACG,QAAJ,GAAeH,GAAG,CAACG,QAAJ,CAAaR,IAA5B,GAAmC,EAApC,CAAb;AACAJ,UAAAA,OAAO,CAAC0B,IAAR,CAAa,QAAb;AACD;AAEF;AACF,KA7BK,CAAN;AA8BA3B,IAAAA,QAAQ,CAACL,gBAAgB,EAAjB,CAAR;AACD,GAlCD;;AAqCA,sBACI,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAES,YAArB;AAAmC,IAAA,UAAU,EAAEF,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGD","sourcesContent":["import React, {useState} from 'react';\r\nimport Login from './../app/Authen/Login.jsx';\r\nimport axios from 'axios';\r\nimport {API_LOGIN} from './../Constants/Api.jsx';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Route} from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleStatusSpin } from './../Actions/index.jsx';\r\nvar CryptoJS = require(\"crypto-js\");\r\n\r\nexport default function LoginContainer(props){\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n  const [errorLogin, setErrorLogin] = useState();\r\n\r\n  const setLoginFunc = async (data) => {\r\n    dispatch(toggleStatusSpin())\r\n\r\n    await axios.post('api/auth/login', data).then((res) => {\r\n      props.setLoginFunc(res)\r\n    }).catch( async (err) => {\r\n\r\n      if(err){\r\n        console.log(err.response);\r\n        if(err.response.status === 301){\r\n          await axios.post('/api/resend-otp', {\r\n            action: 'register',\r\n            user_email: JSON.parse(err.response.config.data).user_email,\r\n            user_password: JSON.parse(err.response.config.data).user_password\r\n          }).then((response) => {\r\n            console.log(response);\r\n          })\r\n\r\n          let code = CryptoJS.AES.encrypt(JSON.stringify(897263), 'code_veri').toString();\r\n          let message = \"Chúng tôi đã gửi mã \";\r\n          history.push('/register/step-2', {\r\n            message: message,\r\n            code: code\r\n          });\r\n        }\r\n\r\n        if(err.response.status === 401){\r\n          setErrorLogin(err.response ? err.response.data : '')\r\n          history.push('/login')\r\n        }\r\n\r\n      }\r\n    });\r\n    dispatch(toggleStatusSpin())\r\n  }\r\n\r\n\r\n  return(\r\n      <Login setLoginFunc={setLoginFunc} errorLogin={errorLogin} />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}