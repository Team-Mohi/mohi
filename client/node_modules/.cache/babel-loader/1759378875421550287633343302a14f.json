{"ast":null,"code":"'use strict';\n\nvar camelize = require('./stringUtils/camelize');\n\nvar hyphenate = require('./stringUtils/hyphenate');\n\nvar toLowerFirst = require('./stringUtils/toLowerFirst');\n\nvar toUpperFirst = require('./stringUtils/toUpperFirst');\n\nvar prefixInfo = require('./prefixInfo');\n\nvar prefixProperties = require('./prefixProperties');\n\nvar docStyle = typeof document == 'undefined' ? {} : document.documentElement.style;\n\nmodule.exports = function (asStylePrefix) {\n  return function (name, config) {\n    config = config || {};\n    var styleName = toLowerFirst(camelize(name)),\n        cssName = hyphenate(name),\n        theName = asStylePrefix ? styleName : cssName,\n        thePrefix = prefixInfo.style ? asStylePrefix ? prefixInfo.style : prefixInfo.css : '';\n\n    if (styleName in docStyle) {\n      return config.asString ? theName : [theName];\n    } //not a valid style name, so we'll return the value with a prefix\n\n\n    var upperCased = theName,\n        prefixProperty = prefixProperties[cssName],\n        result = [];\n\n    if (asStylePrefix) {\n      upperCased = toUpperFirst(theName);\n    }\n\n    if (typeof prefixProperty == 'function') {\n      var prefixedCss = prefixProperty(theName, thePrefix) || [];\n\n      if (prefixedCss && !Array.isArray(prefixedCss)) {\n        prefixedCss = [prefixedCss];\n      }\n\n      if (prefixedCss.length) {\n        prefixedCss = prefixedCss.map(function (property) {\n          return asStylePrefix ? toLowerFirst(camelize(property)) : hyphenate(property);\n        });\n      }\n\n      result = result.concat(prefixedCss);\n    }\n\n    if (thePrefix) {\n      result.push(thePrefix + upperCased);\n    }\n\n    result.push(theName);\n\n    if (config.asString || result.length == 1) {\n      return result[0];\n    }\n\n    return result;\n  };\n};","map":{"version":3,"sources":["D:/Web/DoAn/client/node_modules/to-style/src/prefixer.js"],"names":["camelize","require","hyphenate","toLowerFirst","toUpperFirst","prefixInfo","prefixProperties","docStyle","document","documentElement","style","module","exports","asStylePrefix","name","config","styleName","cssName","theName","thePrefix","css","asString","upperCased","prefixProperty","result","prefixedCss","Array","isArray","length","map","property","concat","push"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAOC,OAAO,CAAC,wBAAD,CAA1B;;AACA,IAAIC,SAAS,GAAMD,OAAO,CAAC,yBAAD,CAA1B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,4BAAD,CAA1B;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,4BAAD,CAA1B;;AAEA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,gBAAgB,GAAGL,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIM,QAAQ,GAAG,OAAOC,QAAP,IAAmB,WAAnB,GACC,EADD,GAECA,QAAQ,CAACC,eAAT,CAAyBC,KAFzC;;AAIAC,MAAM,CAACC,OAAP,GAAiB,UAASC,aAAT,EAAuB;AAEpC,SAAO,UAASC,IAAT,EAAeC,MAAf,EAAsB;AACzBA,IAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AAEA,QAAIC,SAAS,GAAGb,YAAY,CAACH,QAAQ,CAACc,IAAD,CAAT,CAA5B;AAAA,QACIG,OAAO,GAAKf,SAAS,CAACY,IAAD,CADzB;AAAA,QAGII,OAAO,GAAKL,aAAa,GACTG,SADS,GAETC,OALpB;AAAA,QAOIE,SAAS,GAAGd,UAAU,CAACK,KAAX,GACIG,aAAa,GACTR,UAAU,CAACK,KADF,GAETL,UAAU,CAACe,GAHnB,GAKI,EAZpB;;AAcA,QAAKJ,SAAS,IAAIT,QAAlB,EAA6B;AACzB,aAAOQ,MAAM,CAACM,QAAP,GACWH,OADX,GAES,CAAEA,OAAF,CAFhB;AAGH,KArBwB,CAuBzB;;;AAEA,QAAII,UAAU,GAAOJ,OAArB;AAAA,QACIK,cAAc,GAAGjB,gBAAgB,CAACW,OAAD,CADrC;AAAA,QAEIO,MAAM,GAAW,EAFrB;;AAIA,QAAIX,aAAJ,EAAkB;AACdS,MAAAA,UAAU,GAAGlB,YAAY,CAACc,OAAD,CAAzB;AACH;;AAED,QAAI,OAAOK,cAAP,IAAyB,UAA7B,EAAwC;AACpC,UAAIE,WAAW,GAAGF,cAAc,CAACL,OAAD,EAAUC,SAAV,CAAd,IAAsC,EAAxD;;AACA,UAAIM,WAAW,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,WAAd,CAApB,EAA+C;AAC3CA,QAAAA,WAAW,GAAG,CAACA,WAAD,CAAd;AACH;;AAED,UAAIA,WAAW,CAACG,MAAhB,EAAuB;AACnBH,QAAAA,WAAW,GAAGA,WAAW,CAACI,GAAZ,CAAgB,UAASC,QAAT,EAAkB;AAC5C,iBAAOjB,aAAa,GACRV,YAAY,CAACH,QAAQ,CAAC8B,QAAD,CAAT,CADJ,GAER5B,SAAS,CAAC4B,QAAD,CAFrB;AAIH,SALa,CAAd;AAMH;;AAEDN,MAAAA,MAAM,GAAGA,MAAM,CAACO,MAAP,CAAcN,WAAd,CAAT;AACH;;AAED,QAAIN,SAAJ,EAAc;AACVK,MAAAA,MAAM,CAACQ,IAAP,CAAYb,SAAS,GAAGG,UAAxB;AACH;;AAEDE,IAAAA,MAAM,CAACQ,IAAP,CAAYd,OAAZ;;AAEA,QAAIH,MAAM,CAACM,QAAP,IAAmBG,MAAM,CAACI,MAAP,IAAiB,CAAxC,EAA0C;AACtC,aAAOJ,MAAM,CAAC,CAAD,CAAb;AACH;;AAED,WAAOA,MAAP;AACH,GA9DD;AA+DH,CAjED","sourcesContent":["'use strict'\n\nvar camelize     = require('./stringUtils/camelize')\nvar hyphenate    = require('./stringUtils/hyphenate')\nvar toLowerFirst = require('./stringUtils/toLowerFirst')\nvar toUpperFirst = require('./stringUtils/toUpperFirst')\n\nvar prefixInfo = require('./prefixInfo')\nvar prefixProperties = require('./prefixProperties')\n\nvar docStyle = typeof document == 'undefined'?\n                {}:\n                document.documentElement.style\n\nmodule.exports = function(asStylePrefix){\n\n    return function(name, config){\n        config = config || {}\n\n        var styleName = toLowerFirst(camelize(name)),\n            cssName   = hyphenate(name),\n\n            theName   = asStylePrefix?\n                            styleName:\n                            cssName,\n\n            thePrefix = prefixInfo.style?\n                            asStylePrefix?\n                                prefixInfo.style:\n                                prefixInfo.css\n                            :\n                            ''\n\n        if ( styleName in docStyle ) {\n            return config.asString?\n                              theName :\n                            [ theName ]\n        }\n\n        //not a valid style name, so we'll return the value with a prefix\n\n        var upperCased     = theName,\n            prefixProperty = prefixProperties[cssName],\n            result         = []\n\n        if (asStylePrefix){\n            upperCased = toUpperFirst(theName)\n        }\n\n        if (typeof prefixProperty == 'function'){\n            var prefixedCss = prefixProperty(theName, thePrefix) || []\n            if (prefixedCss && !Array.isArray(prefixedCss)){\n                prefixedCss = [prefixedCss]\n            }\n\n            if (prefixedCss.length){\n                prefixedCss = prefixedCss.map(function(property){\n                    return asStylePrefix?\n                                toLowerFirst(camelize(property)):\n                                hyphenate(property)\n\n                })\n            }\n\n            result = result.concat(prefixedCss)\n        }\n\n        if (thePrefix){\n            result.push(thePrefix + upperCased)\n        }\n\n        result.push(theName)\n\n        if (config.asString || result.length == 1){\n            return result[0]\n        }\n\n        return result\n    }\n}"]},"metadata":{},"sourceType":"script"}