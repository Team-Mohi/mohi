{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\NewFeed\\\\Newfeed.jsx\";\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { Layout } from 'antd';\nimport './NewFeed.css';\nimport { PostNewFeed } from './PostNewFeed.jsx';\nimport CreatePostContainer from './../../Containers/CreatePostContainer.jsx';\nimport Story from './Story.jsx';\nimport NewPost from './NewPost.jsx';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { skeletonPostNewFeed } from './../Skeleton/index.jsx';\nimport { setCurrentPage } from './../../Actions/index.jsx';\nimport { PUBLIC_URL } from './../../Constants/public.jsx';\n\nfunction NewFeed(props, {\n  posts\n}) {\n  const {\n    Content\n  } = Layout;\n  const dispatch = useDispatch();\n  const observer = useRef();\n  const {\n    listPosts,\n    loading,\n    error,\n    hasMore,\n    loadingAddComment\n  } = useSelector(state => state.posts);\n  const [newPost, setNewPost] = useState();\n  const [errPost, setErrPost] = useState(false);\n  const lastNewFeed = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        dispatch(setCurrentPage());\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n\n  const sendReactionPost = (reaction, postId) => {\n    props.sendReactionPost(reaction, postId);\n  };\n\n  const onSubmitComment = (value, idPost) => {\n    props.onSubmitComment(value, idPost);\n  };\n\n  const loadingSendRequestSetting = (type, idPost, idUser) => {\n    props.loadingSendRequestSetting(type, idPost, idUser);\n\n    if (type === 'hidePost' || type === 'hideAllPost') {// let a = list.filter(i => i.id !== idPost)\n      // setList(a)\n    }\n  };\n\n  const NoPost = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"new-feed-empty content-hello\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, \"Mohi\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: PUBLIC_URL + `images/nopost.jpg`,\n      alt: \"B\\u1EA3ng tin kh\\xF4ng c\\xF3 b\\xE0i vi\\u1EBFt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: 'rgba(0,128,128)',\n        fontSize: '15px',\n        fontWeight: '600'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"H\\xE3y k\\u1EBFt b\\u1EA1n \\u0111\\u1EC3 nh\\u1EADn \\u0111\\u01B0\\u1EE3c nhi\\u1EC1u b\\xE0i vi\\u1EBFt h\\u01A1n t\\u1EEB b\\u1EA1n b\\xE8\")));\n  };\n\n  const setStatusCreatePost = data => {\n    setNewPost(data);\n  };\n\n  const errorStatusCreatePost = () => {\n    setErrPost(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Content, {\n    className: \"pl-3 pr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CreatePostContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(NewPost, {\n    newPost: newPost,\n    errPost: errPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), listPosts.map((post, index) => /*#__PURE__*/React.createElement(PostNewFeed, {\n    errorStatusCreatePost: errorStatusCreatePost,\n    setStatusCreatePost: setStatusCreatePost,\n    key: index,\n    post: post,\n    ref: lastNewFeed,\n    sendReactionPost: sendReactionPost,\n    onSubmitComment: onSubmitComment,\n    loadingAddComment: loadingAddComment,\n    loadingSendRequestSetting: loadingSendRequestSetting,\n    loadingSetting: props.loadingSetting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 45\n    }\n  })), loading && skeletonPostNewFeed, !loading && !listPosts.length && /*#__PURE__*/React.createElement(NoPost, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 48\n    }\n  }), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 23\n    }\n  }, \"\\u0110\\xE3 x\\u1EA3y ra l\\u1ED7i kh\\xF4ng mong mu\\u1ED1n vui l\\xF2ng t\\u1EA3i l\\u1EA1i trang\"));\n}\n\nexport default NewFeed;","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/NewFeed/Newfeed.jsx"],"names":["React","useCallback","useRef","useState","useEffect","Layout","PostNewFeed","CreatePostContainer","Story","NewPost","useSelector","useDispatch","skeletonPostNewFeed","setCurrentPage","PUBLIC_URL","NewFeed","props","posts","Content","dispatch","observer","listPosts","loading","error","hasMore","loadingAddComment","state","newPost","setNewPost","errPost","setErrPost","lastNewFeed","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","sendReactionPost","reaction","postId","onSubmitComment","value","idPost","loadingSendRequestSetting","type","idUser","NoPost","color","fontSize","fontWeight","setStatusCreatePost","data","errorStatusCreatePost","map","post","index","loadingSetting","length"],"mappings":"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","sourcesContent":["import React, {useCallback, useRef, useState, useEffect} from 'react';\r\nimport { Layout } from 'antd';\r\nimport './NewFeed.css';\r\nimport {PostNewFeed} from './PostNewFeed.jsx';\r\nimport CreatePostContainer from './../../Containers/CreatePostContainer.jsx';\r\nimport Story from './Story.jsx';\r\nimport NewPost from './NewPost.jsx';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {skeletonPostNewFeed} from './../Skeleton/index.jsx';\r\nimport {setCurrentPage} from './../../Actions/index.jsx';\r\nimport {PUBLIC_URL} from './../../Constants/public.jsx';\r\n\r\nfunction NewFeed(props, { posts }) {\r\n    const { Content } = Layout;\r\n    const dispatch = useDispatch();\r\n    const observer = useRef();\r\n    const { listPosts, loading, error, hasMore, loadingAddComment } = useSelector(state => state.posts);\r\n    const [newPost, setNewPost] = useState();\r\n    const [errPost, setErrPost] = useState(false);\r\n\r\n    const lastNewFeed = useCallback(node => {\r\n      if(loading) return\r\n        if(observer.current) observer.current.disconnect()\r\n        observer.current = new IntersectionObserver(entries => {\r\n          if(entries[0].isIntersecting && hasMore){\r\n            dispatch(setCurrentPage())\r\n          }\r\n        })\r\n      if(node) observer.current.observe(node)\r\n    }, [loading, hasMore])\r\n\r\n    const sendReactionPost = (reaction, postId) => {\r\n      props.sendReactionPost(reaction, postId)\r\n    }\r\n\r\n    const onSubmitComment = (value, idPost) => {\r\n      props.onSubmitComment(value, idPost)\r\n    }\r\n\r\n    const loadingSendRequestSetting = (type, idPost, idUser) => {\r\n      props.loadingSendRequestSetting(type, idPost, idUser)\r\n      if(type === 'hidePost' || type === 'hideAllPost'){\r\n        // let a = list.filter(i => i.id !== idPost)\r\n        // setList(a)\r\n      }\r\n    }\r\n\r\n    const NoPost = () => {\r\n        return(\r\n          <React.Fragment>\r\n            <div className=\"new-feed-empty content-hello\">\r\n              <p>Mohi</p>\r\n              <img src={PUBLIC_URL + `images/nopost.jpg`} alt=\"Bảng tin không có bài viết\" />\r\n            <div style={{color: 'rgba(0,128,128)', fontSize: '15px', fontWeight: '600'}}>Hãy kết bạn để nhận được nhiều bài viết hơn từ bạn bè</div>\r\n            </div>\r\n          </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const setStatusCreatePost = (data) => {\r\n      setNewPost(data)\r\n    }\r\n\r\n    const errorStatusCreatePost = () => {\r\n      setErrPost(true)\r\n    }\r\n\r\n    return (\r\n        <Content className=\"pl-3 pr-3\">\r\n            <CreatePostContainer />\r\n          <NewPost newPost={newPost} errPost={errPost}/>\r\n            {listPosts.map((post, index) => <PostNewFeed errorStatusCreatePost={errorStatusCreatePost} setStatusCreatePost={setStatusCreatePost} key={index} post={post} ref={lastNewFeed} sendReactionPost={sendReactionPost} onSubmitComment={onSubmitComment} loadingAddComment={loadingAddComment} loadingSendRequestSetting={loadingSendRequestSetting} loadingSetting={props.loadingSetting}/> )}\r\n            {loading && skeletonPostNewFeed}\r\n            {!loading && !listPosts.length  && <NoPost/>}\r\n            {error && <div>Đã xảy ra lỗi không mong muốn vui lòng tải lại trang</div>}\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default NewFeed;\r\n"]},"metadata":{},"sourceType":"module"}