{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport invariant from 'invariant';\nimport uncontrollable from 'uncontrollable';\nimport chainFunction from './utils/createChainedFunction';\nimport ValidChildren from './utils/ValidComponentChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar propTypes = {\n  /**\r\n   * An HTML `<input>` name for each child button.\r\n   *\r\n   * __Required if `type` is set to `'radio'`__\r\n   */\n  name: PropTypes.string,\n\n  /**\r\n   * The value, or array of values, of the active (pressed) buttons\r\n   *\r\n   * @controllable onChange\r\n   */\n  value: PropTypes.any,\n\n  /**\r\n   * Callback fired when a button is pressed, depending on whether the `type`\r\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\r\n   * array of active values\r\n   *\r\n   * @controllable values\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * The input `type` of the rendered buttons, determines the toggle behavior\r\n   * of the buttons\r\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\n};\nvar defaultProps = {\n  type: 'radio'\n};\n\nvar ToggleButtonGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ToggleButtonGroup, _React$Component);\n\n  function ToggleButtonGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ToggleButtonGroup.prototype;\n\n  _proto.getValues = function getValues() {\n    var value = this.props.value;\n    return value == null ? [] : [].concat(value);\n  };\n\n  _proto.handleToggle = function handleToggle(value) {\n    var _this$props = this.props,\n        type = _this$props.type,\n        onChange = _this$props.onChange;\n    var values = this.getValues();\n    var isActive = values.indexOf(value) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) {\n        onChange(value);\n      }\n\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== value;\n      }));\n    } else {\n      onChange(values.concat([value]));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        type = _this$props2.type,\n        name = _this$props2.name,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"type\", \"name\"]);\n\n    var values = this.getValues();\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n    delete props.onChange;\n    delete props.value; // the data attribute is required b/c twbs css uses it in the selector\n\n    return React.createElement(ButtonGroup, _extends({}, props, {\n      \"data-toggle\": \"buttons\"\n    }), ValidChildren.map(children, function (child) {\n      var _child$props = child.props,\n          value = _child$props.value,\n          onChange = _child$props.onChange;\n\n      var handler = function handler() {\n        return _this.handleToggle(value);\n      };\n\n      return React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(value) !== -1,\n        onChange: chainFunction(onChange, handler)\n      });\n    }));\n  };\n\n  return ToggleButtonGroup;\n}(React.Component);\n\nToggleButtonGroup.propTypes = propTypes;\nToggleButtonGroup.defaultProps = defaultProps;\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\n  value: 'onChange'\n});\nUncontrolledToggleButtonGroup.Button = ToggleButton;\nexport default UncontrolledToggleButtonGroup;","map":{"version":3,"sources":["D:/Web/mohi/client/node_modules/react-fb-image-grid/node_modules/react-bootstrap/es/ToggleButtonGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","_inheritsLoose","PropTypes","React","invariant","uncontrollable","chainFunction","ValidChildren","ButtonGroup","ToggleButton","propTypes","name","string","value","any","onChange","func","type","oneOf","isRequired","defaultProps","ToggleButtonGroup","_React$Component","apply","arguments","_proto","prototype","getValues","props","concat","handleToggle","_this$props","values","isActive","indexOf","filter","n","render","_this","_this$props2","children","process","env","NODE_ENV","createElement","map","child","_child$props","handler","cloneElement","checked","Component","UncontrolledToggleButtonGroup","Button"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,4CAArB;AACA,OAAOC,6BAAP,MAA0C,iEAA1C;AACA,OAAOC,cAAP,MAA2B,kDAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,cAAP,MAA2B,gBAA3B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,IAAIC,SAAS,GAAG;AACd;;;;;AAKAC,EAAAA,IAAI,EAAET,SAAS,CAACU,MANF;;AAQd;;;;;AAKAC,EAAAA,KAAK,EAAEX,SAAS,CAACY,GAbH;;AAed;;;;;;;AAOAC,EAAAA,QAAQ,EAAEb,SAAS,CAACc,IAtBN;;AAwBd;;;;AAIAC,EAAAA,IAAI,EAAEf,SAAS,CAACgB,KAAV,CAAgB,CAAC,UAAD,EAAa,OAAb,CAAhB,EAAuCC;AA5B/B,CAAhB;AA8BA,IAAIC,YAAY,GAAG;AACjBH,EAAAA,IAAI,EAAE;AADW,CAAnB;;AAIA,IAAII,iBAAiB,GACrB,aACA,UAAUC,gBAAV,EAA4B;AAC1BrB,EAAAA,cAAc,CAACoB,iBAAD,EAAoBC,gBAApB,CAAd;;AAEA,WAASD,iBAAT,GAA6B;AAC3B,WAAOC,gBAAgB,CAACC,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B,KAA2C,IAAlD;AACD;;AAED,MAAIC,MAAM,GAAGJ,iBAAiB,CAACK,SAA/B;;AAEAD,EAAAA,MAAM,CAACE,SAAP,GAAmB,SAASA,SAAT,GAAqB;AACtC,QAAId,KAAK,GAAG,KAAKe,KAAL,CAAWf,KAAvB;AACA,WAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqB,GAAGgB,MAAH,CAAUhB,KAAV,CAA5B;AACD,GAHD;;AAKAY,EAAAA,MAAM,CAACK,YAAP,GAAsB,SAASA,YAAT,CAAsBjB,KAAtB,EAA6B;AACjD,QAAIkB,WAAW,GAAG,KAAKH,KAAvB;AAAA,QACIX,IAAI,GAAGc,WAAW,CAACd,IADvB;AAAA,QAEIF,QAAQ,GAAGgB,WAAW,CAAChB,QAF3B;AAGA,QAAIiB,MAAM,GAAG,KAAKL,SAAL,EAAb;AACA,QAAIM,QAAQ,GAAGD,MAAM,CAACE,OAAP,CAAerB,KAAf,MAA0B,CAAC,CAA1C;;AAEA,QAAII,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,CAACgB,QAAL,EAAe;AACblB,QAAAA,QAAQ,CAACF,KAAD,CAAR;AACD;;AAED;AACD;;AAED,QAAIoB,QAAJ,EAAc;AACZlB,MAAAA,QAAQ,CAACiB,MAAM,CAACG,MAAP,CAAc,UAAUC,CAAV,EAAa;AAClC,eAAOA,CAAC,KAAKvB,KAAb;AACD,OAFQ,CAAD,CAAR;AAGD,KAJD,MAIO;AACLE,MAAAA,QAAQ,CAACiB,MAAM,CAACH,MAAP,CAAc,CAAChB,KAAD,CAAd,CAAD,CAAR;AACD;AACF,GAtBD;;AAwBAY,EAAAA,MAAM,CAACY,MAAP,GAAgB,SAASA,MAAT,GAAkB;AAChC,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAIC,YAAY,GAAG,KAAKX,KAAxB;AAAA,QACIY,QAAQ,GAAGD,YAAY,CAACC,QAD5B;AAAA,QAEIvB,IAAI,GAAGsB,YAAY,CAACtB,IAFxB;AAAA,QAGIN,IAAI,GAAG4B,YAAY,CAAC5B,IAHxB;AAAA,QAIIiB,KAAK,GAAG5B,6BAA6B,CAACuC,YAAD,EAAe,CAAC,UAAD,EAAa,MAAb,EAAqB,MAArB,CAAf,CAJzC;;AAMA,QAAIP,MAAM,GAAG,KAAKL,SAAL,EAAb;AACA,MAAEV,IAAI,KAAK,OAAT,IAAoB,CAAC,CAACN,IAAxB,IAAgC8B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCvC,SAAS,CAAC,KAAD,EAAQ,sEAAsE,mBAA9E,CAAjD,GAAsJA,SAAS,CAAC,KAAD,CAA/L,GAAyM,KAAK,CAA9M;AACA,WAAOwB,KAAK,CAACb,QAAb;AACA,WAAOa,KAAK,CAACf,KAAb,CAZgC,CAYZ;;AAEpB,WAAOV,KAAK,CAACyC,aAAN,CAAoBpC,WAApB,EAAiCT,QAAQ,CAAC,EAAD,EAAK6B,KAAL,EAAY;AAC1D,qBAAe;AAD2C,KAAZ,CAAzC,EAEHrB,aAAa,CAACsC,GAAd,CAAkBL,QAAlB,EAA4B,UAAUM,KAAV,EAAiB;AAC/C,UAAIC,YAAY,GAAGD,KAAK,CAAClB,KAAzB;AAAA,UACIf,KAAK,GAAGkC,YAAY,CAAClC,KADzB;AAAA,UAEIE,QAAQ,GAAGgC,YAAY,CAAChC,QAF5B;;AAIA,UAAIiC,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/B,eAAOV,KAAK,CAACR,YAAN,CAAmBjB,KAAnB,CAAP;AACD,OAFD;;AAIA,aAAOV,KAAK,CAAC8C,YAAN,CAAmBH,KAAnB,EAA0B;AAC/B7B,QAAAA,IAAI,EAAEA,IADyB;AAE/BN,QAAAA,IAAI,EAAEmC,KAAK,CAACnC,IAAN,IAAcA,IAFW;AAG/BuC,QAAAA,OAAO,EAAElB,MAAM,CAACE,OAAP,CAAerB,KAAf,MAA0B,CAAC,CAHL;AAI/BE,QAAAA,QAAQ,EAAET,aAAa,CAACS,QAAD,EAAWiC,OAAX;AAJQ,OAA1B,CAAP;AAMD,KAfG,CAFG,CAAP;AAkBD,GAhCD;;AAkCA,SAAO3B,iBAAP;AACD,CAzED,CAyEElB,KAAK,CAACgD,SAzER,CAFA;;AA6EA9B,iBAAiB,CAACX,SAAlB,GAA8BA,SAA9B;AACAW,iBAAiB,CAACD,YAAlB,GAAiCA,YAAjC;AACA,IAAIgC,6BAA6B,GAAG/C,cAAc,CAACgB,iBAAD,EAAoB;AACpER,EAAAA,KAAK,EAAE;AAD6D,CAApB,CAAlD;AAGAuC,6BAA6B,CAACC,MAA9B,GAAuC5C,YAAvC;AACA,eAAe2C,6BAAf","sourcesContent":["import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport invariant from 'invariant';\r\nimport uncontrollable from 'uncontrollable';\r\nimport chainFunction from './utils/createChainedFunction';\r\nimport ValidChildren from './utils/ValidComponentChildren';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport ToggleButton from './ToggleButton';\r\nvar propTypes = {\r\n  /**\r\n   * An HTML `<input>` name for each child button.\r\n   *\r\n   * __Required if `type` is set to `'radio'`__\r\n   */\r\n  name: PropTypes.string,\r\n\r\n  /**\r\n   * The value, or array of values, of the active (pressed) buttons\r\n   *\r\n   * @controllable onChange\r\n   */\r\n  value: PropTypes.any,\r\n\r\n  /**\r\n   * Callback fired when a button is pressed, depending on whether the `type`\r\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\r\n   * array of active values\r\n   *\r\n   * @controllable values\r\n   */\r\n  onChange: PropTypes.func,\r\n\r\n  /**\r\n   * The input `type` of the rendered buttons, determines the toggle behavior\r\n   * of the buttons\r\n   */\r\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\r\n};\r\nvar defaultProps = {\r\n  type: 'radio'\r\n};\r\n\r\nvar ToggleButtonGroup =\r\n/*#__PURE__*/\r\nfunction (_React$Component) {\r\n  _inheritsLoose(ToggleButtonGroup, _React$Component);\r\n\r\n  function ToggleButtonGroup() {\r\n    return _React$Component.apply(this, arguments) || this;\r\n  }\r\n\r\n  var _proto = ToggleButtonGroup.prototype;\r\n\r\n  _proto.getValues = function getValues() {\r\n    var value = this.props.value;\r\n    return value == null ? [] : [].concat(value);\r\n  };\r\n\r\n  _proto.handleToggle = function handleToggle(value) {\r\n    var _this$props = this.props,\r\n        type = _this$props.type,\r\n        onChange = _this$props.onChange;\r\n    var values = this.getValues();\r\n    var isActive = values.indexOf(value) !== -1;\r\n\r\n    if (type === 'radio') {\r\n      if (!isActive) {\r\n        onChange(value);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (isActive) {\r\n      onChange(values.filter(function (n) {\r\n        return n !== value;\r\n      }));\r\n    } else {\r\n      onChange(values.concat([value]));\r\n    }\r\n  };\r\n\r\n  _proto.render = function render() {\r\n    var _this = this;\r\n\r\n    var _this$props2 = this.props,\r\n        children = _this$props2.children,\r\n        type = _this$props2.type,\r\n        name = _this$props2.name,\r\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"type\", \"name\"]);\r\n\r\n    var values = this.getValues();\r\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\r\n    delete props.onChange;\r\n    delete props.value; // the data attribute is required b/c twbs css uses it in the selector\r\n\r\n    return React.createElement(ButtonGroup, _extends({}, props, {\r\n      \"data-toggle\": \"buttons\"\r\n    }), ValidChildren.map(children, function (child) {\r\n      var _child$props = child.props,\r\n          value = _child$props.value,\r\n          onChange = _child$props.onChange;\r\n\r\n      var handler = function handler() {\r\n        return _this.handleToggle(value);\r\n      };\r\n\r\n      return React.cloneElement(child, {\r\n        type: type,\r\n        name: child.name || name,\r\n        checked: values.indexOf(value) !== -1,\r\n        onChange: chainFunction(onChange, handler)\r\n      });\r\n    }));\r\n  };\r\n\r\n  return ToggleButtonGroup;\r\n}(React.Component);\r\n\r\nToggleButtonGroup.propTypes = propTypes;\r\nToggleButtonGroup.defaultProps = defaultProps;\r\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\r\n  value: 'onChange'\r\n});\r\nUncontrolledToggleButtonGroup.Button = ToggleButton;\r\nexport default UncontrolledToggleButtonGroup;"]},"metadata":{},"sourceType":"module"}