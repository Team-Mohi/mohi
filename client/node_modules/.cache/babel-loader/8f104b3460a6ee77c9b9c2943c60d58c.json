{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Components\\\\Post\\\\CommentReplyEditor.jsx\";\nimport React, { Component } from \"react\";\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\nimport style from 'styled-components';\nimport { EditorState, Modifier } from 'draft-js';\nconst emojiPlugin = createEmojiPlugin({\n  useNativeArt: true\n});\nconst {\n  EmojiSuggestions,\n  EmojiSelect\n} = emojiPlugin;\nconst plugins = [emojiPlugin];\nconst text = ``;\nconst StyleEditor = style.div`\n  width: 100%;\n  max-height: 100px;\n  overflow-y: auto;\n  border: 1px solid #ddd;\n  margin-left: 10px;\n  font-size: 14px;\n  padding: 5px 10px;\n  border-radius: 30px;\n`;\nconst Wrapper = style.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\nconst StyleEmoji = style.div`\n  position: absolute;\n  right: 10px;\n  border: 0;\n  z-index: 2;\n`;\nexport default class CommentReplyEditor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editorState: createEditorStateWithText(text),\n      idUserReceivedReply: this.props.idUserReceivedReply,\n      userReceivedReply: this.props.userReceivedReply\n    };\n\n    this.onChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(state);\n\n    if (props.idUserReceivedReply !== state.idUserReceivedReply || props.userReceivedReply !== state.userReceivedReply) {\n      const insertText = (userReceivedReply, editorState) => {\n        const currentContent = editorState.getCurrentContent(),\n              currentSelection = editorState.getSelection();\n        const newContent = Modifier.replaceText(currentContent, currentSelection, userReceivedReply);\n        const newEditorState = EditorState.push(editorState, newContent, 'insert-characters');\n        return EditorState.forceSelection(newEditorState, newContent.getSelectionAfter());\n      };\n\n      return {\n        idUserReceivedReply: props.idUserReceivedReply,\n        userReceivedReply: props.userReceivedReply,\n        editorState: insertText(props.userReceivedReply, state.editorState)\n      };\n    } // Return null to indicate no change to state.\n\n\n    return null;\n  }\n\n  focusCommentInput() {\n    this.commentInput.focus();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StyleEditor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      editorState: this.state.editorState,\n      onChange: this.onChange,\n      plugins: plugins,\n      placeholder: \"Vi\\u1EBFt b\\xECnh lu\\u1EADn...\",\n      ref: element => {\n        this.commentInput = element;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(EmojiSuggestions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(StyleEmoji, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EmojiSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Components/Post/CommentReplyEditor.jsx"],"names":["React","Component","Editor","createEditorStateWithText","createEmojiPlugin","style","EditorState","Modifier","emojiPlugin","useNativeArt","EmojiSuggestions","EmojiSelect","plugins","text","StyleEditor","div","Wrapper","StyleEmoji","CommentReplyEditor","state","editorState","idUserReceivedReply","props","userReceivedReply","onChange","setState","getDerivedStateFromProps","console","log","insertText","currentContent","getCurrentContent","currentSelection","getSelection","newContent","replaceText","newEditorState","push","forceSelection","getSelectionAfter","focusCommentInput","commentInput","focus","render","element"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Editor, { createEditorStateWithText } from \"draft-js-plugins-editor\";\r\nimport createEmojiPlugin from \"draft-js-emoji-plugin\";\r\nimport \"draft-js-emoji-plugin/lib/plugin.css\";\r\nimport style from 'styled-components';\r\nimport { EditorState, Modifier } from 'draft-js';\r\nconst emojiPlugin = createEmojiPlugin({\r\n  useNativeArt: true\r\n});\r\nconst { EmojiSuggestions, EmojiSelect } = emojiPlugin;\r\nconst plugins = [emojiPlugin];\r\nconst text = ``;\r\n\r\nconst StyleEditor = style.div`\r\n  width: 100%;\r\n  max-height: 100px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  padding: 5px 10px;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst Wrapper = style.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyleEmoji = style.div`\r\n  position: absolute;\r\n  right: 10px;\r\n  border: 0;\r\n  z-index: 2;\r\n`;\r\n\r\nexport default class CommentReplyEditor extends Component {\r\n    state = {\r\n      editorState: createEditorStateWithText(text),\r\n      idUserReceivedReply: this.props.idUserReceivedReply,\r\n      userReceivedReply: this.props.userReceivedReply\r\n    };\r\n\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n      console.log(state);\r\n     if (props.idUserReceivedReply !== state.idUserReceivedReply || props.userReceivedReply !== state.userReceivedReply) {\r\n       const insertText = (userReceivedReply, editorState) => {\r\n           const currentContent = editorState.getCurrentContent(),\r\n                 currentSelection = editorState.getSelection();\r\n\r\n           const newContent = Modifier.replaceText(\r\n             currentContent,\r\n             currentSelection,\r\n             userReceivedReply\r\n           );\r\n\r\n           const newEditorState = EditorState.push(editorState, newContent, 'insert-characters');\r\n           return  EditorState.forceSelection(newEditorState, newContent.getSelectionAfter());\r\n         }\r\n\r\n       return {\r\n         idUserReceivedReply: props.idUserReceivedReply,\r\n         userReceivedReply: props.userReceivedReply,\r\n         editorState: insertText(props.userReceivedReply, state.editorState)\r\n       };\r\n     }\r\n      // Return null to indicate no change to state.\r\n      return null;\r\n     }\r\n\r\n\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  };\r\n\r\n  focusCommentInput(){\r\n    this.commentInput.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <StyleEditor>\r\n          <Editor\r\n            editorState={this.state.editorState}\r\n            onChange={this.onChange}\r\n            plugins={plugins}\r\n            placeholder=\"Viết bình luận...\"\r\n            ref={(element) => {\r\n              this.commentInput = element;\r\n            }}\r\n          />\r\n        </StyleEditor>\r\n        <EmojiSuggestions />\r\n        <StyleEmoji>\r\n          <EmojiSelect />\r\n        </StyleEmoji>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}