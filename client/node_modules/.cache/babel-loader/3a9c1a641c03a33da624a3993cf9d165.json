{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar EditorState = require(\"./EditorState\");\n\nfunction keyCommandUndo(e, editorState, updateFn) {\n  var undoneState = EditorState.undo(editorState); // If the last change to occur was a spellcheck change, allow the undo\n  // event to fall through to the browser. This allows the browser to record\n  // the unwanted change, which should soon lead it to learn not to suggest\n  // the correction again.\n\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\n    var nativelyRenderedContent = undoneState.getCurrentContent();\n    updateFn(EditorState.set(undoneState, {\n      nativelyRenderedContent: nativelyRenderedContent\n    }));\n    return;\n  } // Otheriwse, manage the undo behavior manually.\n\n\n  e.preventDefault();\n\n  if (!editorState.getNativelyRenderedContent()) {\n    updateFn(undoneState);\n    return;\n  } // Trigger a re-render with the current content state to ensure that the\n  // component tree has up-to-date props for comparison.\n\n\n  updateFn(EditorState.set(editorState, {\n    nativelyRenderedContent: null\n  })); // Wait to ensure that the re-render has occurred before performing\n  // the undo action.\n\n  setTimeout(function () {\n    updateFn(undoneState);\n  }, 0);\n}\n\nmodule.exports = keyCommandUndo;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/draft-js/lib/keyCommandUndo.js"],"names":["EditorState","require","keyCommandUndo","e","editorState","updateFn","undoneState","undo","getLastChangeType","nativelyRenderedContent","getCurrentContent","set","preventDefault","getNativelyRenderedContent","setTimeout","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,WAA3B,EAAwCC,QAAxC,EAAkD;AAChD,MAAIC,WAAW,GAAGN,WAAW,CAACO,IAAZ,CAAiBH,WAAjB,CAAlB,CADgD,CACC;AACjD;AACA;AACA;;AAEA,MAAIA,WAAW,CAACI,iBAAZ,OAAoC,mBAAxC,EAA6D;AAC3D,QAAIC,uBAAuB,GAAGH,WAAW,CAACI,iBAAZ,EAA9B;AACAL,IAAAA,QAAQ,CAACL,WAAW,CAACW,GAAZ,CAAgBL,WAAhB,EAA6B;AACpCG,MAAAA,uBAAuB,EAAEA;AADW,KAA7B,CAAD,CAAR;AAGA;AACD,GAZ+C,CAY9C;;;AAGFN,EAAAA,CAAC,CAACS,cAAF;;AAEA,MAAI,CAACR,WAAW,CAACS,0BAAZ,EAAL,EAA+C;AAC7CR,IAAAA,QAAQ,CAACC,WAAD,CAAR;AACA;AACD,GApB+C,CAoB9C;AACF;;;AAGAD,EAAAA,QAAQ,CAACL,WAAW,CAACW,GAAZ,CAAgBP,WAAhB,EAA6B;AACpCK,IAAAA,uBAAuB,EAAE;AADW,GAA7B,CAAD,CAAR,CAxBgD,CA0B3C;AACL;;AAEAK,EAAAA,UAAU,CAAC,YAAY;AACrBT,IAAAA,QAAQ,CAACC,WAAD,CAAR;AACD,GAFS,EAEP,CAFO,CAAV;AAGD;;AAEDS,MAAM,CAACC,OAAP,GAAiBd,cAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar EditorState = require(\"./EditorState\");\r\n\r\nfunction keyCommandUndo(e, editorState, updateFn) {\r\n  var undoneState = EditorState.undo(editorState); // If the last change to occur was a spellcheck change, allow the undo\r\n  // event to fall through to the browser. This allows the browser to record\r\n  // the unwanted change, which should soon lead it to learn not to suggest\r\n  // the correction again.\r\n\r\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\r\n    var nativelyRenderedContent = undoneState.getCurrentContent();\r\n    updateFn(EditorState.set(undoneState, {\r\n      nativelyRenderedContent: nativelyRenderedContent\r\n    }));\r\n    return;\r\n  } // Otheriwse, manage the undo behavior manually.\r\n\r\n\r\n  e.preventDefault();\r\n\r\n  if (!editorState.getNativelyRenderedContent()) {\r\n    updateFn(undoneState);\r\n    return;\r\n  } // Trigger a re-render with the current content state to ensure that the\r\n  // component tree has up-to-date props for comparison.\r\n\r\n\r\n  updateFn(EditorState.set(editorState, {\r\n    nativelyRenderedContent: null\r\n  })); // Wait to ensure that the re-render has occurred before performing\r\n  // the undo action.\r\n\r\n  setTimeout(function () {\r\n    updateFn(undoneState);\r\n  }, 0);\r\n}\r\n\r\nmodule.exports = keyCommandUndo;"]},"metadata":{},"sourceType":"script"}