{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\mohi\\\\client\\\\src\\\\Containers\\\\LoginContainer.jsx\";\nimport React, { useState } from 'react';\nimport Login from './../app/Authen/Login.jsx';\nimport axios from 'axios';\nimport { API_LOGIN } from './../Constants/Api.jsx';\nimport { useHistory } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { toggleStatusSpin } from './../Actions/index.jsx';\n\nvar CryptoJS = require(\"crypto-js\");\n\nexport default function LoginContainer(props) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [errorLogin, setErrorLogin] = useState();\n\n  const setLoginFunc = async data => {\n    //load Spin\n    dispatch(toggleStatusSpin()); //check credentials\n\n    await axios.post('api/auth/login', data).then(res => {\n      props.setLoginFunc(res);\n      history.push('/');\n    }).catch(err => {\n      console.log(err); //if unveri send otp to email or phone when register\n\n      if (err.response.status === 301) {\n        let user_email = JSON.parse(err.response.config.data).user_email;\n        let user_password = JSON.parse(err.response.config.data).user_password;\n        axios.post('/api/resend-otp', {\n          action: 'register',\n          user_email: user_email\n        }).then(response => {\n          console.log(response);\n          let code = CryptoJS.AES.encrypt(JSON.stringify(response.data.veriCode), 'code_veri').toString();\n          history.push('/register/step-2', {\n            user_email: user_email,\n            code: code,\n            id_user: err.response.data.idUser,\n            user_password: user_password\n          });\n        }).catch(error => {\n          setErrorLogin('Đã có lỗi không mong muốn xảy ra, vui lòng đăng nhập lại');\n          history.push('/login');\n        });\n      } //if uncredentials redirect to login fail\n\n\n      if (err.response.status === 401) {\n        setErrorLogin(err.response ? err.response.data : '');\n        history.push('/login');\n      }\n    }); //close Spin\n\n    dispatch(toggleStatusSpin());\n  };\n\n  return /*#__PURE__*/React.createElement(Login, {\n    setLoginFunc: setLoginFunc,\n    errorLogin: errorLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  });\n}","map":{"version":3,"sources":["D:/Web/mohi/client/src/Containers/LoginContainer.jsx"],"names":["React","useState","Login","axios","API_LOGIN","useHistory","Route","useDispatch","toggleStatusSpin","CryptoJS","require","LoginContainer","props","dispatch","history","errorLogin","setErrorLogin","setLoginFunc","data","post","then","res","push","catch","err","console","log","response","status","user_email","JSON","parse","config","user_password","action","code","AES","encrypt","stringify","veriCode","toString","id_user","idUser","error"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport Login from './../app/Authen/Login.jsx';\r\nimport axios from 'axios';\r\nimport {API_LOGIN} from './../Constants/Api.jsx';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Route} from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleStatusSpin } from './../Actions/index.jsx';\r\nvar CryptoJS = require(\"crypto-js\");\r\n\r\nexport default function LoginContainer(props){\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [errorLogin, setErrorLogin] = useState();\r\n\r\n  const setLoginFunc = async (data) => {\r\n    //load Spin\r\n    dispatch(toggleStatusSpin())\r\n\r\n    //check credentials\r\n    await axios.post('api/auth/login', data).then((res) => {\r\n      props.setLoginFunc(res)\r\n      history.push('/')\r\n    }).catch((err) => {\r\n      console.log(err);\r\n        //if unveri send otp to email or phone when register\r\n        if(err.response.status === 301){\r\n\r\n          let user_email = JSON.parse(err.response.config.data).user_email;\r\n          let user_password = JSON.parse(err.response.config.data).user_password;\r\n\r\n          axios.post('/api/resend-otp', {\r\n            action: 'register',\r\n            user_email: user_email\r\n          }).then((response) => {\r\n            console.log(response);\r\n            let code = CryptoJS.AES.encrypt(JSON.stringify(response.data.veriCode), 'code_veri').toString();\r\n            history.push('/register/step-2', {\r\n              user_email: user_email,\r\n              code: code,\r\n              id_user: err.response.data.idUser,\r\n              user_password: user_password\r\n            });\r\n          }).catch((error) => {\r\n            setErrorLogin('Đã có lỗi không mong muốn xảy ra, vui lòng đăng nhập lại')\r\n            history.push('/login')\r\n          })\r\n\r\n        }\r\n\r\n        //if uncredentials redirect to login fail\r\n        if(err.response.status === 401){\r\n          setErrorLogin(err.response ? err.response.data : '')\r\n          history.push('/login')\r\n        }\r\n\r\n    });\r\n    //close Spin\r\n    dispatch(toggleStatusSpin())\r\n  }\r\n\r\n\r\n  return(\r\n      <Login setLoginFunc={setLoginFunc} errorLogin={errorLogin} />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}