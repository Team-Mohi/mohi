{"ast":null,"code":"import axios from 'axios';\nimport { API_REFRESH_TOKEN } from './../Constants/Api.jsx';\nconst token = JSON.parse(localStorage.getItem('ustk')).access_token;\naxios.interceptors.request.use(config => {\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return new Promise(async (resolve, reject) => {\n      await axios.post(API_REFRESH_TOKEN, {\n        'token': token\n      }).then(res => {\n        if (res.status === 200) {\n          localStorage.setItem('ustk', JSON.stringify(res.data));\n          const new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\n          console.log(new_token);\n          axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\n          originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\n          resolve(axios(originalRequest));\n        }\n      });\n    });\n  }\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["D:/Web/mohi/client/src/axios/inceptor.jsx"],"names":["axios","API_REFRESH_TOKEN","token","JSON","parse","localStorage","getItem","access_token","interceptors","request","use","config","headers","error","Promise","reject","response","originalRequest","status","_retry","resolve","post","then","res","setItem","stringify","data","new_token","console","log","defaults","common"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AAEA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,YAAvD;AAEEP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAM,IAAI;AACN,MAAIT,KAAJ,EAAW;AACPS,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,YAAYV,KAA9C;AACH;;AACD,SAAOS,MAAP;AACH,CANJ,EAOGE,KAAK,IAAI;AACLC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACL,CATF;AAYAb,KAAK,CAACQ,YAAN,CAAmBQ,QAAnB,CAA4BN,GAA5B,CAAiCM,QAAD,IAAc;AAC3C,SAAOA,QAAP;AACF,CAFD,EAGA,UAAUH,KAAV,EAAiB;AACd,QAAMI,eAAe,GAAGJ,KAAK,CAACF,MAA9B;;AACA,MAAIE,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA1B,IAAiC,CAACD,eAAe,CAACE,MAAtD,EAA8D;AAE1DF,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACA,WAAO,IAAIL,OAAJ,CAAY,OAAOM,OAAP,EAAgBL,MAAhB,KAA2B;AAC3C,YAAMf,KAAK,CAACqB,IAAN,CAAWpB,iBAAX,EACH;AACI,iBAAUC;AADd,OADG,EAIFoB,IAJE,CAIIC,GAAD,IAAS;AACX,YAAIA,GAAG,CAACL,MAAJ,KAAe,GAAnB,EAAwB;AACpBb,UAAAA,YAAY,CAACmB,OAAb,CAAqB,MAArB,EAA6BrB,IAAI,CAACsB,SAAL,CAAeF,GAAG,CAACG,IAAnB,CAA7B;AACA,gBAAMC,SAAS,GAAGxB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,EAAyCC,YAA3D;AACAqB,UAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA3B,UAAAA,KAAK,CAAC8B,QAAN,CAAelB,OAAf,CAAuBmB,MAAvB,CAA8B,eAA9B,IAAiD,YAAYJ,SAA7D;AACAV,UAAAA,eAAe,CAACL,OAAhB,CAAwB,eAAxB,IAA2C,YAAYe,SAAvD;AACAP,UAAAA,OAAO,CAACpB,KAAK,CAACiB,eAAD,CAAN,CAAP;AACH;AACJ,OAbE,CAAN;AAcD,KAfK,CAAP;AAgBH;;AACD,SAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,CA1BD","sourcesContent":["import axios from 'axios';\r\nimport {API_REFRESH_TOKEN} from './../Constants/Api.jsx';\r\n\r\nconst token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n\r\n  axios.interceptors.request.use(\r\n     config => {\r\n         if (token) {\r\n             config.headers['Authorization'] = 'Bearer ' + token;\r\n         }\r\n         return config;\r\n     },\r\n     error => {\r\n         Promise.reject(error)\r\n   });\r\n\r\n\r\n  axios.interceptors.response.use((response) => {\r\n     return response\r\n  },\r\n  function (error) {\r\n     const originalRequest = error.config;\r\n     if (error.response.status === 401 && !originalRequest._retry) {\r\n\r\n         originalRequest._retry = true;\r\n         return new Promise(async (resolve, reject) => {\r\n            await axios.post(API_REFRESH_TOKEN,\r\n               {\r\n                   'token' : token\r\n               })\r\n               .then((res) => {\r\n                   if (res.status === 200) {\r\n                       localStorage.setItem('ustk', JSON.stringify(res.data));\r\n                       const new_token = JSON.parse(localStorage.getItem('ustk')).access_token;\r\n                       console.log(new_token);\r\n                       axios.defaults.headers.common['Authorization'] = 'Bearer ' + new_token;\r\n                       originalRequest.headers['Authorization'] = 'Bearer ' + new_token;\r\n                       resolve(axios(originalRequest));\r\n                   }\r\n               })\r\n          })\r\n     }\r\n     return Promise.reject(error);\r\n  });\r\n"]},"metadata":{},"sourceType":"module"}