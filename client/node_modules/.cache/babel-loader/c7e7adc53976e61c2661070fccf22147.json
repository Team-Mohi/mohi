{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar _require = require(\"./draftKeyUtils\"),\n    notEmptyKey = _require.notEmptyKey;\n/**\r\n * Return the entity key that should be used when inserting text for the\r\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\r\n * and `SEGMENTED` entities should not be used for insertion behavior.\r\n */\n\n\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n        return null;\n      }\n\n      return filterKey(contentState.getEntityMap(), entityKey);\n    }\n\n    return null;\n  }\n\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n  return filterKey(contentState.getEntityMap(), entityKey);\n}\n/**\r\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\r\n * return it. If not, return null.\r\n */\n\n\nfunction filterKey(entityMap, entityKey) {\n  if (notEmptyKey(entityKey)) {\n    var entity = entityMap.__get(entityKey);\n\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n\n  return null;\n}\n\nmodule.exports = getEntityKeyForSelection;","map":{"version":3,"sources":["D:/mohi/mohi/client/node_modules/draft-js/lib/getEntityKeyForSelection.js"],"names":["_require","require","notEmptyKey","getEntityKeyForSelection","contentState","targetSelection","entityKey","isCollapsed","key","getAnchorKey","offset","getAnchorOffset","getBlockForKey","getEntityAt","filterKey","getEntityMap","startKey","getStartKey","startOffset","getStartOffset","startBlock","getLength","entityMap","entity","__get","getMutability","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAtB;AAAA,IACIC,WAAW,GAAGF,QAAQ,CAACE,WAD3B;AAEA;;;;;;;AAOA,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,eAAhD,EAAiE;AAC/D,MAAIC,SAAJ;;AAEA,MAAID,eAAe,CAACE,WAAhB,EAAJ,EAAmC;AACjC,QAAIC,GAAG,GAAGH,eAAe,CAACI,YAAhB,EAAV;AACA,QAAIC,MAAM,GAAGL,eAAe,CAACM,eAAhB,EAAb;;AAEA,QAAID,MAAM,GAAG,CAAb,EAAgB;AACdJ,MAAAA,SAAS,GAAGF,YAAY,CAACQ,cAAb,CAA4BJ,GAA5B,EAAiCK,WAAjC,CAA6CH,MAAM,GAAG,CAAtD,CAAZ;;AAEA,UAAIJ,SAAS,KAAKF,YAAY,CAACQ,cAAb,CAA4BJ,GAA5B,EAAiCK,WAAjC,CAA6CH,MAA7C,CAAlB,EAAwE;AACtE,eAAO,IAAP;AACD;;AAED,aAAOI,SAAS,CAACV,YAAY,CAACW,YAAb,EAAD,EAA8BT,SAA9B,CAAhB;AACD;;AAED,WAAO,IAAP;AACD;;AAED,MAAIU,QAAQ,GAAGX,eAAe,CAACY,WAAhB,EAAf;AACA,MAAIC,WAAW,GAAGb,eAAe,CAACc,cAAhB,EAAlB;AACA,MAAIC,UAAU,GAAGhB,YAAY,CAACQ,cAAb,CAA4BI,QAA5B,CAAjB;AACAV,EAAAA,SAAS,GAAGY,WAAW,KAAKE,UAAU,CAACC,SAAX,EAAhB,GAAyC,IAAzC,GAAgDD,UAAU,CAACP,WAAX,CAAuBK,WAAvB,CAA5D;AACA,SAAOJ,SAAS,CAACV,YAAY,CAACW,YAAb,EAAD,EAA8BT,SAA9B,CAAhB;AACD;AACD;;;;;;AAMA,SAASQ,SAAT,CAAmBQ,SAAnB,EAA8BhB,SAA9B,EAAyC;AACvC,MAAIJ,WAAW,CAACI,SAAD,CAAf,EAA4B;AAC1B,QAAIiB,MAAM,GAAGD,SAAS,CAACE,KAAV,CAAgBlB,SAAhB,CAAb;;AAEA,WAAOiB,MAAM,CAACE,aAAP,OAA2B,SAA3B,GAAuCnB,SAAvC,GAAmD,IAA1D;AACD;;AAED,SAAO,IAAP;AACD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBxB,wBAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\r\n'use strict';\r\n\r\nvar _require = require(\"./draftKeyUtils\"),\r\n    notEmptyKey = _require.notEmptyKey;\r\n/**\r\n * Return the entity key that should be used when inserting text for the\r\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\r\n * and `SEGMENTED` entities should not be used for insertion behavior.\r\n */\r\n\r\n\r\nfunction getEntityKeyForSelection(contentState, targetSelection) {\r\n  var entityKey;\r\n\r\n  if (targetSelection.isCollapsed()) {\r\n    var key = targetSelection.getAnchorKey();\r\n    var offset = targetSelection.getAnchorOffset();\r\n\r\n    if (offset > 0) {\r\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\r\n\r\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\r\n        return null;\r\n      }\r\n\r\n      return filterKey(contentState.getEntityMap(), entityKey);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  var startKey = targetSelection.getStartKey();\r\n  var startOffset = targetSelection.getStartOffset();\r\n  var startBlock = contentState.getBlockForKey(startKey);\r\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\r\n  return filterKey(contentState.getEntityMap(), entityKey);\r\n}\r\n/**\r\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\r\n * return it. If not, return null.\r\n */\r\n\r\n\r\nfunction filterKey(entityMap, entityKey) {\r\n  if (notEmptyKey(entityKey)) {\r\n    var entity = entityMap.__get(entityKey);\r\n\r\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nmodule.exports = getEntityKeyForSelection;"]},"metadata":{},"sourceType":"script"}